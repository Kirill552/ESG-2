generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AdminRole {
  SUPER_ADMIN
  FINANCE_ADMIN
  SUPPORT_ADMIN
  SYSTEM_ADMIN
}

enum WebAuthnChallengeType {
  REGISTRATION
  AUTHENTICATION
}

enum UserMode {
  DEMO
  TRIAL
  PAID
  EXPIRED
}

model User {
  id                      String               @id @default(cuid())
  email                   String               @unique
  phone                   String?              @unique // Поддержка телефонной авторизации
  name                    String? // Объединенное имя для NextAuth
  firstName               String?
  lastName                String?
  emailVerified           DateTime? // Для NextAuth
  phoneVerified           DateTime? // Верификация телефона
  image                   String? // Для NextAuth
  isBlocked               Boolean              @default(false)
  planExpiry              DateTime?
  usageStats              Json?
  lastLoginAt             DateTime? // Последний вход для безопасности
  hashedPassword          String? // Хешированный пароль для входа
  createdAt               DateTime             @default(now())
  updatedAt               DateTime             @updatedAt
  planType                PlanType             @default(TRIAL)
  mode                    UserMode             @default(DEMO)
  totpSecret              String?
  // Активная организация пользователя
  activeOrganizationId    String?
  // удалены кредиты
  documents               Document[]
  payments                Payment[]
  reports                 Report[]
  organization            Organization? // Один пользователь может владеть одной организацией
  organizationMemberships OrganizationUser[]
  activeOrganization      Organization?        @relation("UserActiveOrganization", fields: [activeOrganizationId], references: [id])
  accounts                Account[]
  sessions                Session[]
  trialRequests           TrialRequest[]
  backupCodes             BackupCode[]
  webAuthnCredentials     WebAuthnCredential[]
  webAuthnChallenges      WebAuthnChallenge[]
  notifications           Notification[]
  notificationPreferences NotificationPreferences? @relation("UserNotificationPreferences")
  magicLinkTokens         MagicLinkToken[]
  userProfile             UserProfile?
  documentBatches         DocumentBatch[]

  @@map("users")
}

model UserProfile {
  id       String  @id @default(cuid())
  userId   String  @unique
  position String? // Должность
  bio      String? // Биография/описание
  avatar   String? // URL аватара
  timezone String? @default("Europe/Moscow") // Часовой пояс
  language String? @default("ru") // Язык интерфейса
  theme    String? @default("light") // Тема оформления

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

// WebAuthn Passkeys модель для биометрической аутентификации
model WebAuthnCredential {
  id           String   @id @default(cuid())
  userId       String
  credentialId String   @unique
  publicKey    Bytes
  counter      BigInt   @default(0)
  transports   String[] // usb, nfc, ble, internal
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([credentialId])
  @@map("webauthn_credentials")
}

/// Batch загрузка документов для группировки уведомлений
model DocumentBatch {
  id            String   @id @default(cuid())
  userId        String
  totalCount    Int      // Общее количество документов в batch
  processedCount Int     @default(0) // Обработано успешно
  failedCount   Int      @default(0) // Обработано с ошибками
  pendingCount  Int      // Ожидают обработки (totalCount - processedCount - failedCount)

  notificationSent Boolean @default(false) // Отправлено ли итоговое уведомление

  createdAt     DateTime @default(now())
  completedAt   DateTime? // Когда все документы обработаны

  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  documents     Document[]

  @@index([userId])
  @@index([userId, notificationSent])
  @@index([completedAt])
  @@map("document_batches")
}

model Document {
  id                    String         @id @default(cuid())
  userId                String
  fileName              String
  originalName          String
  filePath              String
  fileSize              Int
  fileType              String
  fileHash              String? // sha256 хеш содержимого файла для дедупликации
  status                DocumentStatus @default(UPLOADED)
  category              DocumentCategory @default(OTHER)
  ocrProcessed          Boolean        @default(false)
  ocrData               Json?
  ocrConfidence         Float?
  extractedINN          String? // ИНН извлеченный из документа через OCR
  innMatches            Boolean?       @default(false) // Совпадает ли extractedINN с ИНН организации
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  processingProgress    Int?           @default(0)
  processingStage       String?
  processingMessage     String?
  errorDetails          Json?          // Детальная информация об ошибке обработки
  errorType             String?        // Тип ошибки: CORRUPTED_FILE, UNSUPPORTED_FORMAT, SIZE_LIMIT, OCR_ERROR, SERVICE_ERROR, TIMEOUT
  retryCount            Int?           @default(0) // Количество попыток переобработки
  jobId                 String?
  processingCompletedAt DateTime?
  processingStartedAt   DateTime?
  queueStatus           QueueStatus?
  batchId               String?        // ID batch загрузки для группировки уведомлений
  user                  User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  batch                 DocumentBatch? @relation(fields: [batchId], references: [id], onDelete: SetNull)
  reports               Report[]

  @@index([processingStage])
  @@index([jobId])
  @@index([queueStatus])
  @@index([userId, queueStatus])
  @@index([userId, status])
  @@index([userId, category])
  @@index([status, category])
  @@index([queueStatus, processingStartedAt])
  @@index([processingCompletedAt])
  @@index([fileHash])
  @@index([batchId])
  @@index([createdAt])
  @@index([updatedAt])
  @@index([extractedINN])
  @@index([innMatches])
  @@index([userId, innMatches])
  @@map("documents")
}

model Report {
  id                String             @id @default(cuid())
  userId            String
  documentId        String?
  name              String             // Название отчета (например, "Годовой отчет о выбросах ПГ 2024")
  reportType        ReportType
  format            String
  fileName          String
  filePath          String
  fileSize          Int?
  status            ReportStatus       @default(READY) // ready, submitted, approved
  period            String?            // Отчетный период (например, "2024", "Q1 2025")
  reportPeriodStart DateTime?          // Начало отчетного периода (например, 01.01.2024)
  reportPeriodEnd   DateTime?          // Конец отчетного периода (например, 31.12.2024)
  submissionDeadline DateTime?         // Дедлайн подачи
  totalEmissions    Float?             // Общие выбросы в тСО₂
  documentCount     Int                @default(0) // Количество связанных документов
  emissionData      Json
  methodology       String             @default("296-ФЗ от 02.07.2021")
  downloadCount     Int                @default(0)
  lastDownload      DateTime?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  version           Int                @default(1)
  isLocked          Boolean            @default(false)
  signedAt          DateTime?          // Дата подписания отчета
  signedBy          String?            // ФИО лица, подписавшего отчет
  signerPosition    String?            // Должность подписанта (например, "Генеральный директор")
  signatureType     String?            // Тип электронной подписи (например, "Усиленная квалифицированная ЭП")
  dataHash          String?
  currentSnapshotId String?
  archivedAt        DateTime?
  snapshots         ReportSnapshot[]
  validations       ReportValidation[]
  document          Document?          @relation(fields: [documentId], references: [id], onDelete: Cascade)
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, status])
  @@index([submissionDeadline])
  @@index([status])
  @@map("reports")
}

/// Неизменяемые снапшоты подписанных отчетов
model ReportSnapshot {
  id             String   @id @default(cuid())
  reportId       String
  version        Int      @default(1)
  dataHash       String
  methodVersions String[]
  factorVersions String[]
  signedBy       String
  signedAt       DateTime @default(now())
  signature      String
  payload        Json?
  createdAt      DateTime @default(now())
  report         Report   @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@index([reportId, version])
  @@map("report_snapshots")
}

model Payment {
  id          String        @id @default(cuid())
  userId      String
  amount      Decimal       @db.Decimal(10, 2)
  currency    String        @default("RUB")
  yookassaId  String?       @unique
  paymentUrl  String?
  status      PaymentStatus @default(PENDING)
  metadata    Json?
  description String?
  paidAt      DateTime?
  expiresAt   DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  planType    PlanType?
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model TrialRequest {
  id            String               @id @default(cuid())
  userId        String
  userEmail     String
  userName      String
  companyName   String
  position      String
  phone         String?
  message       String
  requestType   TrialRequestType     @default(TRIAL)
  status        TrialRequestStatus   @default(PENDING)
  ipAddress     String?
  userAgent     String?
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  processedAt   DateTime?
  processedBy   String?
  adminNotes    String?
  user          User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@map("trial_requests")
}

model AuditLog {
  id             String        @id @default(cuid())
  userId         String?
  action         String
  resourceType   String?
  resourceId     String?
  resource       String?
  details        Json?
  ipAddress      String?
  userAgent      String?
  createdAt      DateTime      @default(now())
  metadata       Json?
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([action])
  @@index([createdAt])
  @@index([resourceType])
  @@index([userId])
  @@map("audit_logs")
}

model SystemSettings {
  id          String   @id @default(cuid())
  key         String   @unique
  value       Json
  description String?
  category    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("system_settings")
}

model AdminUser {
  id                  String                    @id @default(cuid())
  email               String                    @unique
  passwordHash        String
  role                AdminRole                 @default(SUPPORT_ADMIN)
  isActive            Boolean                   @default(true)
  totpSecret          String?

  // Telegram bot настройки
  telegramBotToken    String?
  telegramEnabled     Boolean                   @default(false)

  // Настройки уведомлений (какие события отправлять в Telegram)
  notifyTrialRequests Boolean                   @default(true)
  notifyUserErrors    Boolean                   @default(true)
  notifySystemErrors  Boolean                   @default(true)
  notifyPayments      Boolean                   @default(false)
  notifySecurityIssues Boolean                  @default(true)

  createdAt           DateTime                  @default(now())
  updatedAt           DateTime                  @updatedAt
  sessions            AdminSession[]
  permissions         AdminPermission[]
  webAuthnCredentials AdminWebAuthnCredential[]
  recoveryCodes       AdminRecoveryCode[]
  securityIncidents   AdminSecurityIncident[]

  @@index([role])
  @@index([isActive])
  @@map("admin_users")
}

model AdminSession {
  id        String    @id @default(cuid())
  adminId   String
  tokenJti  String    @unique
  expiresAt DateTime
  createdAt DateTime  @default(now())
  admin     AdminUser @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@index([adminId])
  @@index([expiresAt])
  @@map("admin_sessions")
}

model AdminPermission {
  id        String    @id @default(cuid())
  adminId   String
  resource  String
  action    String
  createdAt DateTime  @default(now())
  admin     AdminUser @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@index([adminId])
  @@index([resource, action])
  @@map("admin_permissions")
}

/// WebAuthn Passkeys для администраторов
model AdminWebAuthnCredential {
  id           String   @id @default(cuid())
  adminId      String
  credentialId String   @unique
  publicKey    Bytes
  counter      BigInt   @default(0)
  transports   String[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  admin AdminUser @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@index([adminId])
  @@index([credentialId])
  @@map("admin_webauthn_credentials")
}

/// Резервные коды восстановления для администраторов
model AdminRecoveryCode {
  id        String    @id @default(cuid())
  adminId   String
  codeHash  String
  used      Boolean   @default(false)
  usedAt    DateTime?
  createdAt DateTime  @default(now())

  admin AdminUser @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@index([adminId, used])
  @@map("admin_recovery_codes")
}

/// Журнал инцидентов безопасности в админке
model AdminSecurityIncident {
  id        String   @id @default(cuid())
  adminId   String?
  type      String // rate_limit|anomaly|revoke|step_up_required|mfa_failure
  severity  String   @default("INFO") // INFO|WARN|ERROR
  message   String
  ipAddress String?
  userAgent String?
  metadata  Json?
  createdAt DateTime @default(now())

  admin AdminUser? @relation(fields: [adminId], references: [id], onDelete: SetNull)

  @@index([type])
  @@index([createdAt])
  @@index([adminId])
  @@map("admin_security_incidents")
}

model RateLimit {
  id             String   @id @default(dbgenerated("(gen_random_uuid())::text"))
  organizationId String
  requestCount   Int      @default(0)
  windowStart    DateTime @default(now()) @db.Timestamp(6)
  createdAt      DateTime @default(now()) @db.Timestamp(6)
  updatedAt      DateTime @default(now()) @updatedAt @db.Timestamp(6)

  @@unique([organizationId, windowStart])
  @@index([organizationId])
  @@index([windowStart])
  @@map("rate_limits")
}

model MonetizationSettings {
  id                  String   @id @default(dbgenerated("(gen_random_uuid())::text"))
  organizationId      String   @unique
  surgePricingEnabled Boolean  @default(true)
  surgeMultiplier     Float    @default(2.0)
  creditCostPerTon    Float    @default(5.0)
  cbamAddonCostPerTon Float    @default(3.0)
  rateLimit           Int      @default(10)
  rateLimitWindowSec  Int      @default(90)
  createdAt           DateTime @default(now()) @db.Timestamp(6)
  updatedAt           DateTime @default(now()) @updatedAt @db.Timestamp(6)

  @@index([organizationId])
  @@map("monetization_settings")
}

model QueueJob {
  id           String        @id @default(dbgenerated("(gen_random_uuid())::text"))
  name         String
  data         Json?
  priority     Int           @default(0)
  state        QueueJobState @default(CREATED)
  retryLimit   Int           @default(3)
  retryCount   Int           @default(0)
  retryDelay   Int           @default(0)
  retryBackoff Boolean       @default(false)
  startAfter   DateTime      @default(now()) @db.Timestamp(6)
  startedOn    DateTime?     @db.Timestamp(6)
  singletonKey String?
  singletonOn  DateTime?     @db.Timestamp(6)
  expireIn     String?
  createdOn    DateTime      @default(now()) @db.Timestamp(6)
  completedOn  DateTime?     @db.Timestamp(6)
  keepUntil    DateTime?     @db.Timestamp(6)
  output       Json?
  deadLetter   String?
  policy       String?
  logs         QueueJobLog[]

  @@index([name])
  @@index([state])
  @@index([priority])
  @@index([name, state])
  @@index([startAfter])
  @@index([createdOn])
  @@index([completedOn])
  @@index([singletonKey])
  @@index([keepUntil])
  @@map("queue_jobs")
}

model QueueJobLog {
  id        String        @id @default(dbgenerated("(gen_random_uuid())::text"))
  jobId     String
  level     QueueLogLevel @default(INFO)
  message   String
  data      Json?
  createdOn DateTime      @default(now()) @db.Timestamp(6)
  job       QueueJob      @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@index([jobId])
  @@index([level])
  @@index([createdOn])
  @@map("queue_job_logs")
}

model QueueMetric {
  id          String   @id @default(dbgenerated("(gen_random_uuid())::text"))
  metadata    Json?
  timestamp   DateTime @default(now()) @db.Timestamp(6)
  expiresAt   DateTime @map("expires_at") @db.Timestamp(6)
  metricType  String   @map("metric_type")
  metricValue Float    @map("metric_value")

  @@index([metricType])
  @@index([timestamp])
  @@index([expiresAt])
  @@index([metricType, timestamp])
  @@map("queue_metrics")
}

// удалены модели credit_transactions, credits

model Organization {
  id        String     @id @default(cuid())
  userId    String     @unique
  name      String
  inn       String?    @unique
  address   String?
  phone     String?
  email     String?
  isBlocked Boolean    @default(false)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  auditLogs AuditLog[]

  // Система доступов и ограничений (15.5)
  // Флаги доступа к функциям
  canUploadDocuments Boolean @default(true)
  canUseOCR          Boolean @default(true)
  canGenerate296FZ   Boolean @default(true)
  canGenerateCBAM    Boolean @default(false)
  canExportData      Boolean @default(true)
  canUseAnalytics    Boolean @default(true)

  // Численные лимиты (0 = без ограничений)
  documentsPerMonth  Int @default(0)
  reportsPerMonth    Int @default(0)
  ocrPagesPerMonth   Int @default(0)
  storageQuotaMB     Int @default(0)
  usersPerOrg        Int @default(0)

  // Темпоральные ограничения
  accessExpiresAt DateTime? // Дата истечения доступа
  autoExtendTrial Boolean   @default(false) // Автопродление trial

  // Заметки администратора
  adminNotes String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  profile     OrganizationProfile?
  users       OrganizationUser[]
  invitations OrganizationInvitation[]
  contacts    OrganizationContact[]
  activeUsers User[]                   @relation("UserActiveOrganization")

  // Аналитические данные
  analyticsEvents   AnalyticsEvent[]
  reportingSummary  ReportingSummary[]
  dashboardCache    DashboardCache?

  @@map("organizations")
}

enum OrganizationProfileStatus {
  DRAFT
  VERIFIED
}

enum OrganizationRoleEnum {
  OWNER
  ACCOUNTANT
  ECOLOGIST
  VIEWER
  MAIN
  MANAGER
  OTHER
}

model OrganizationProfile {
  id                  String                    @id @default(cuid())
  organizationId      String                    @unique
  fullName            String?
  shortName           String?
  inn                 String                    @unique
  kpp                 String?
  ogrn                String?
  okpo                String? // Добавлено для 296-ФЗ
  okved               String? // Добавлено для 296-ФЗ
  oktmo               String? // Добавлено для 296-ФЗ
  okato               String? // Добавлено для 296-ФЗ
  legalAddress        String?
  postalAddress       String? // Почтовый адрес отдельно
  factualAddress      String? // Фактический адрес отдельно
  bankAccount         String?
  bankBic             String?
  bankName            String?
  emailForBilling     String?
  phone               String?
  tochkaAccountId     String?
  tochkaCustomerCode  String?
  defaultReportFormat String?
  status              OrganizationProfileStatus @default(DRAFT)
  // Данные руководителя (для отчетов 296-ФЗ)
  directorName        String? // ФИО руководителя
  directorPosition    String? // Должность руководителя
  // Контактное лицо для отчетности (может отличаться от руководителя)
  contactPersonName   String? // ФИО контактного лица (например, главный бухгалтер, эколог)
  contactPersonPhone  String? // Телефон контактного лица для связи с проверяющими органами
  // Дополнительные данные из Dadata
  opfCode             String? // Код организационно-правовой формы
  opfFull             String? // Полное название ОПФ (ООО, АО, и т.д.)
  opfShort            String? // Краткое название ОПФ
  registrationDate    DateTime? // Дата регистрации в ЕГРЮЛ
  liquidationDate     DateTime? // Дата ликвидации (если есть)
  companyStatus       String? // ACTIVE, LIQUIDATING, LIQUIDATED и т.д.
  branchType          String? // MAIN или BRANCH
  branchCount         Int? // Количество филиалов
  // JSON с полными данными из Dadata (для истории и отладки)
  dadataRawData       Json?
  dadataUpdatedAt     DateTime? // Когда последний раз обновлялись данные из Dadata
  checkoData          Json? // Старые данные из Checko (deprecated)
  createdAt           DateTime                  @default(now())
  updatedAt           DateTime                  @updatedAt
  organization        Organization              @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([inn])
  @@index([ogrn])
  @@map("organization_profiles")
}

model OrganizationUser {
  id             String               @id @default(cuid())
  organizationId String
  userId         String
  role           OrganizationRoleEnum @default(VIEWER)
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  organization   Organization         @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([organizationId, userId])
  @@index([organizationId])
  @@index([userId])
  @@map("organization_users")
}

model OrganizationInvitation {
  id             String               @id @default(cuid())
  organizationId String
  email          String
  token          String               @unique
  role           OrganizationRoleEnum @default(VIEWER)
  status         String               @default("PENDING")
  createdAt      DateTime             @default(now())
  expiresAt      DateTime?
  organization   Organization         @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId, email])
  @@map("organization_invitations")
}

model OrganizationContact {
  id             String               @id @default(cuid())
  organizationId String
  name           String
  email          String
  phone          String?
  position       String?
  role           OrganizationRoleEnum @default(OTHER)
  isPrimary      Boolean              @default(false)
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  organization   Organization         @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, email])
  @@index([organizationId])
  @@index([isPrimary])
  @@map("organization_contacts")
}

// удалены organization_credits и organization_credit_transactions

model organization_subscriptions {
  id               String             @id @default(dbgenerated("(gen_random_uuid())::text"))
  organizationId   String             @unique
  plan_type        SubscriptionPlan   @default(FREE)
  status           SubscriptionStatus @default(INACTIVE)
  starts_at        DateTime?          @db.Timestamp(6)
  expires_at       DateTime?          @db.Timestamp(6)
  auto_renew       Boolean            @default(false)
  price_rub        Decimal?           @db.Decimal(10, 2)
  features         Json?
  createdAt        DateTime           @default(now()) @db.Timestamp(6)
  updatedAt        DateTime           @default(now()) @updatedAt @db.Timestamp(6)
  annual_emissions Int?               @default(0)
  has_cbam_addon   Boolean            @default(false)

  @@index([organizationId], map: "org_subscriptions_organizationId_idx")
  @@index([plan_type], map: "org_subscriptions_plan_type_idx")
  @@index([status], map: "org_subscriptions_status_idx")
  @@index([expires_at], map: "org_subscriptions_expires_at_idx")
}

model EmissionFactor {
  id            String    @id @default(dbgenerated("(gen_random_uuid())::text"))
  version       String    @unique
  name          String
  description   String
  effectiveFrom DateTime  @db.Timestamp(6)
  effectiveTo   DateTime? @db.Timestamp(6)
  isActive      Boolean   @default(true)
  source        String
  coefficients  Json
  createdAt     DateTime  @default(now()) @db.Timestamp(6)
  updatedAt     DateTime  @default(now()) @updatedAt @db.Timestamp(6)

  @@index([effectiveFrom])
  @@index([effectiveTo])
  @@index([isActive])
  @@index([version])
  @@map("emission_factors")
}

model ReportValidation {
  id             String         @id @default(cuid())
  reportId       String
  validationType ValidationType
  isValid        Boolean
  errors         String[]
  warnings       String[]
  schemaType     String?
  validationData Json?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  report         Report         @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@map("report_validations")
}

model TemplateCustomization {
  id           String   @id @default(cuid())
  userId       String
  name         String
  templateType String
  fields       Json
  header       Json
  footer       Json
  branding     Json
  logo         String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("template_customizations")
}

model BankInvoice {
  id                 String        @id @default(cuid())
  organizationId     String
  invoiceNumber      String        @unique
  bankInvoiceId      String        @unique
  customerCode       String? // Bank Tochka customerCode (sandbox/production)
  invoiceType        InvoiceType
  amount             Decimal       @db.Decimal(12, 2)
  currency           String        @default("RUB")
  status             InvoiceStatus @default(PENDING)
  customerName       String
  customerInn        String
  customerAddress    String?
  customerPhone      String?
  customerEmail      String?
  paymentUrl         String?
  qrCodeUrl          String?
  pdfUrl             String?
  description        String
  estimatedEmissions Decimal?      @db.Decimal(12, 3)
  excessEmissions    Decimal?      @db.Decimal(12, 3)
  ratePerTon         Decimal?      @db.Decimal(8, 2)
  expirationDate     DateTime?
  paidAt             DateTime?
  errorMessage       String?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  planType           PlanType?

  @@index([organizationId])
  @@index([status])
  @@index([invoiceType])
  @@index([createdAt])
  @@map("bank_invoices")
}

model EmissionOveragePayment {
  id              String        @id @default(cuid())
  organizationId  String
  reportId        String
  bankInvoiceId   String
  excessEmissions Decimal       @db.Decimal(12, 3)
  ratePerTon      Decimal       @db.Decimal(8, 2)
  totalAmount     Decimal       @db.Decimal(12, 2)
  status          PaymentStatus @default(PENDING)
  paidAt          DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([organizationId])
  @@index([reportId])
  @@index([status])
  @@map("emission_overage_payments")
}

enum DocumentStatus {
  UPLOADED    // Загружен
  PROCESSING  // В обработке
  PROCESSED   // Обработан
  FAILED      // Ошибка
  ARCHIVED
  QUEUED
  QUARANTINE
}

enum DocumentCategory {
  PRODUCTION  // Производство
  SUPPLIERS   // Поставщики
  WASTE       // Отходы
  TRANSPORT   // Транспорт
  ENERGY      // Энергия
  OTHER       // Другое
}

enum ReportType {
  REPORT_296FZ
  CBAM_XML
  CBAM_CSV
  CARBON_FOOTPRINT
}

enum ReportStatus {
  READY      // Готов (отчет создается сразу в готовом состоянии)
  // SUBMITTED  // Отправлен - TODO: для будущих улучшений (отправка в регулятор)
  // APPROVED   // Утвержден - TODO: для будущих улучшений (подтверждение от регулятора)
}

enum PlanType {
  TRIAL
  LITE
  STANDARD
  LARGE
  ENTERPRISE
  CBAM
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  CANCELLED
  REFUNDED
}

// удалён enum CreditTransactionType

enum SubscriptionPlan {
  FREE
  TRIAL
  LITE
  STANDARD
  LARGE
  CBAM_ADDON
}

enum SubscriptionStatus {
  INACTIVE
  ACTIVE
  CANCELLED
  EXPIRED
  PENDING
}

// Auth.js совместимые таблицы
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  password          String? // Хешированный пароль для credentials провайдера

  // WebAuthn/Passkey поля для биометрической авторизации
  credentialID         String? // Unique identifier for the credential
  credentialPublicKey  Bytes? // Public key for verification
  counter              Int? // Signature counter for replay protection
  credentialDeviceType String? // "platform" or "cross-platform"
  credentialBackedUp   Boolean? // Whether the credential is backed up
  transports           String[] @default([]) // Transport methods (e.g., ["internal", "hybrid"])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@index([credentialID])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expires])
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model MagicLinkToken {
  id             String                  @id @default(cuid())
  email          String
  emailHash      String                  @db.Char(64)
  userId         String?
  tokenHash      String                  @unique @db.Char(64)
  redirectTo     String?
  requestedIp    String?
  consumedIp     String?
  userAgent      String?
  expiresAt      DateTime
  consumedAt     DateTime?
  deliveryStatus MagicLinkDeliveryStatus @default(PENDING)
  deliveryError  String?
  createdAt      DateTime                @default(now())
  updatedAt      DateTime                @updatedAt

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([emailHash, expiresAt])
  @@index([requestedIp, createdAt])
  @@map("magic_link_tokens")
}

enum MagicLinkDeliveryStatus {
  PENDING
  SENT
  FAILED
  SKIPPED
}

model OtpCode {
  id        String   @id @default(cuid())
  contact   String
  codeHash  String
  purpose   String?
  attempts  Int      @default(0)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([contact])
  @@index([expiresAt])
  @@map("otp_codes")
}

model BackupCode {
  id        String   @id @default(cuid())
  userId    String
  codeHash  String
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, used])
  @@map("backup_codes")
}

enum QueueStatus {
  WAITING
  ACTIVE
  COMPLETED
  FAILED
  DELAYED
  STALLED
}

enum QueueJobState {
  CREATED
  RETRY
  ACTIVE
  COMPLETED
  EXPIRED
  CANCELLED
  FAILED
}

enum QueueLogLevel {
  DEBUG
  INFO
  WARN
  ERROR
}

enum ValidationType {
  CBAM_XML
  EMISSION_296FZ
  STRUCTURE_CHECK
  DATA_QUALITY
}

enum InvoiceType {
  PLAN_PURCHASE
  OVERAGE_PAYMENT
}

enum InvoiceStatus {
  PENDING
  PAID
  FAILED
  CANCELLED
  EXPIRED
}

enum TrialRequestType {
  TRIAL
  DEMO_EXTEND
  FULL_ACCESS
}

enum TrialRequestStatus {
  PENDING
  APPROVED
  REJECTED
  PROCESSING
}

/// События для простого rate limiting по ключу (IP+идентификатор)
model RateLimitEvent {
  id        String   @id @default(cuid())
  key       String
  createdAt DateTime @default(now())

  @@index([key, createdAt])
  @@map("rate_limit_events")
}

/// Попытки аутентификации для анти-brute force системы
model SecurityAttempt {
  id         String   @id @default(cuid())
  ip         String
  identifier String? // email, phone, username
  endpoint   String   @default("auth")
  success    Boolean  @default(false)
  userAgent  String?
  timestamp  DateTime @default(now())

  @@index([ip, endpoint, success, timestamp])
  @@index([identifier, endpoint, success, timestamp])
  @@map("security_attempts")
}

/// Активные блокировки IP/пользователей
model SecurityBlock {
  id         String   @id @default(cuid())
  ip         String
  identifier String? // email, phone, username
  endpoint   String   @default("auth")
  attempts   Int      @default(0)
  reason     String
  expiresAt  DateTime
  createdAt  DateTime @default(now())

  @@index([ip, expiresAt])
  @@index([identifier, expiresAt])
  @@map("security_blocks")
}

/// Аудит логи для 152-ФЗ соответствия
model SecurityLog {
  id        String   @id @default(cuid())
  userId    String?
  ip        String
  event     String // login_attempt, login_success, login_failed, blocked, captcha_required
  details   Json // дополнительная информация о событии
  timestamp DateTime @default(now())

  @@index([userId, timestamp])
  @@index([ip, event, timestamp])
  @@map("security_logs")
}

/// WebAuthn challenges (замена Redis)
model WebAuthnChallenge {
  id        String                @id @default(cuid())
  userId    String?
  email     String?
  challenge String
  type      WebAuthnChallengeType
  data      Json? // дополнительные данные
  expiresAt DateTime
  createdAt DateTime              @default(now())
  ipAddress String?
  userAgent String?

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([email, type])
  @@index([type, createdAt])
  @@index([expiresAt])
  @@map("webauthn_challenges")
}

/// GigaChat токены (кэш в PostgreSQL вместо Redis)
model GigaChatToken {
  id        String   @id @default(cuid())
  clientId  String   @unique
  token     String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([clientId])
  @@index([expiresAt])
  @@map("gigachat_tokens")
}

/// Уведомления для пользователей и администраторов
model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String // document_data_edited, document_correction_submitted, document_failed_processing, system_error, user_feedback
  title     String
  message   String
  metadata  Json? // дополнительные данные (documentId, changes, triggeredBy, priority, etc.)
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([userId, read])
  @@index([type])
  @@index([createdAt])
  @@map("notifications")
}

/// Настройки уведомлений пользователя
model NotificationPreferences {
  id       String @id @default(cuid())
  userId   String @unique

  // Каналы доставки
  emailEnabled Boolean @default(true) // Email уведомления
  pushEnabled  Boolean @default(false) // Push уведомления в браузере

  // Типы уведомлений
  reportsEnabled   Boolean @default(true) // Готовность отчетов
  deadlinesEnabled Boolean @default(true) // Приближение дедлайнов
  documentsEnabled Boolean @default(false) // Обработка документов

  // Настройки дедлайнов (за сколько дней уведомлять)
  deadlineDays Int[] @default([30, 7, 1])

  // Дополнительные настройки (опционально)
  quietHoursStart Int? // Начало тихих часов (0-23)
  quietHoursEnd   Int? // Конец тихих часов (0-23)
  timezone        String @default("Europe/Moscow")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation("UserNotificationPreferences", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("notification_preferences")
}

// === АНАЛИТИКА И АГРЕГАЦИЯ ДАННЫХ ===

/// События для трекинга аналитики
model AnalyticsEvent {
  id             String    @id @default(cuid())
  organizationId String
  eventType      String    // document_uploaded, report_generated, emission_calculated, etc.
  eventData      Json      // данные события
  userId         String?
  timestamp      DateTime  @default(now())
  metadata       Json?
  createdAt      DateTime  @default(now())
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([eventType])
  @@index([timestamp])
  @@index([organizationId, eventType])
  @@map("analytics_events")
}

/// Агрегированные данные по периодам для быстрой загрузки
model ReportingSummary {
  id                String       @id @default(cuid())
  organizationId    String
  period            String       // "2024", "2024-Q1", "2024-01", etc.
  periodType        String       // "year", "quarter", "month"
  totalEmissions    Float        @default(0)
  scope1Emissions   Float        @default(0)
  scope2Emissions   Float        @default(0)
  scope3Emissions   Float        @default(0)
  documentsCount    Int          @default(0)
  reportsCount      Int          @default(0)
  processedCount    Int          @default(0)
  complianceScore   Float        @default(0)
  dataQuality       Float        @default(0)
  emissionsSources  Json?        // агрегация по категориям
  trends            Json?        // тренды и изменения
  calculatedAt      DateTime     @default(now())
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  organization      Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, period, periodType])
  @@index([organizationId])
  @@index([period])
  @@index([periodType])
  @@index([calculatedAt])
  @@map("reporting_summary")
}

/// Кэш данных дашборда для быстрой загрузки
model DashboardCache {
  id             String       @id @default(cuid())
  organizationId String       @unique
  kpiData        Json         // KPI карточки
  recentData     Json         // последние документы/отчеты
  progressData   Json         // прогресс 296-ФЗ
  complianceData Json?        // статус соответствия
  analyticsData  Json?        // аналитические данные
  cachedAt       DateTime     @default(now())
  expiresAt      DateTime     // время истечения кэша
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([expiresAt])
  @@map("dashboard_cache")
}
