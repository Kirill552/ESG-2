/**
 * –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Ñ–∞–π–ª–æ–≤ —Å –∞–≤—Ç–æ–≤—ã–±–æ—Ä–æ–º –ø–∞—Ä—Å–µ—Ä–∞
 * –†–µ–∞–ª–∏–∑—É–µ—Ç –∑–∞–¥–∞—á–∏ 5.1.2-5.1.4: –∞–≤—Ç–æ-–≤—ã–±–æ—Ä + fallback + –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
 */

import { detectFormat, type FileFormatInfo, type ProcessingStrategy, ProcessingPriority, ParserType } from './format-detector';
import { processImageMultiLevel } from './multi-level-ocr-service';
import * as fs from 'fs';
import * as path from 'path';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞
interface ParsingResult {
  text: string;
  confidence: number;
  source: string;
  processingTime: number;
  metadata?: Record<string, any>;
  warnings?: string[];
  errors?: string[];
}

interface ProcessingLog {
  filename: string;
  fileSize: number;
  detectedFormat: FileFormatInfo;
  strategy: ProcessingStrategy;
  attempts: Array<{
    parser: ParserType;
    result: 'success' | 'error' | 'low_confidence';
    confidence: number;
    processingTime: number;
    error?: string;
    textLength: number;
  }>;
  finalResult: ParsingResult;
  totalProcessingTime: number;
  timestamp: Date;
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
interface ProcessingConfig {
  minConfidence: number;
  maxRetries: number;
  enableLogging: boolean;
  logDirectory: string;
  enableFallback: boolean;
  timeoutMs: number;
}

class IntelligentFileProcessor {
  private config: ProcessingConfig;
  private processingLogs: ProcessingLog[] = [];

  constructor(config: Partial<ProcessingConfig> = {}) {
    this.config = {
      minConfidence: 0.7,
      maxRetries: 3,
      enableLogging: true,
      logDirectory: './debug_output/processing_logs',
      enableFallback: true,
      timeoutMs: 30000,
      ...config
    };

    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (this.config.enableLogging) {
      this.ensureLogDirectory();
    }
  }

  /**
   * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ —Å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–º –≤—ã–±–æ—Ä–æ–º –ø–∞—Ä—Å–µ—Ä–∞
   * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≤—Ö–æ–¥–∞:
   * 1) processFile(filePath: string, customStrategy?)
   * 2) processFile(fileBuffer: Buffer, filename: string, customStrategy?)
   *
   * –¢–∞–∫–∂–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ –ø–µ—Ä–µ–∂–∏–≤–∞–µ—Ç –æ—à–∏–±–æ—á–Ω—ã–µ –≤—ã–∑–æ–≤—ã –≤–∏–¥–∞ processFile(filePath, filename, strategy)
   * ‚Äî –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–æ–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫ –¥—É–±–ª–∏—Ä—É—é—â–µ–µ –∏–º—è —Ñ–∞–π–ª–∞.
   */
  async processFile(
    input: string | Buffer,
    arg2?: string | Partial<ProcessingStrategy>,
    arg3?: Partial<ProcessingStrategy>
  ): Promise<ParsingResult> {
    const startTime = Date.now();

    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    let filename: string;
    let fileBuffer: Buffer;
    let customStrategy: Partial<ProcessingStrategy> | undefined;

    if (typeof input === 'string') {
      // –í–∞—Ä–∏–∞–Ω—Ç 1: –ø–µ—Ä–µ–¥–∞–Ω –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
      filename = path.basename(input);
      fileBuffer = fs.readFileSync(input);
      // –ï—Å–ª–∏ –≤—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç ‚Äî —Å—Ç—Ä–æ–∫–∞ (—á–∞—Å—Ç–æ –æ—à–∏–±–æ—á–Ω–æ –ø–µ—Ä–µ–¥–∞—é—Ç filename), –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ–≥–æ –∫–∞–∫ –∏–º—è
      // –∏ –±–µ—Ä—ë–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∏–∑ —Ç—Ä–µ—Ç—å–µ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
      if (typeof arg2 === 'string') {
        customStrategy = arg3;
      } else {
        customStrategy = arg2;
      }
    } else {
      // –í–∞—Ä–∏–∞–Ω—Ç 2: –ø–µ—Ä–µ–¥–∞–Ω Buffer
      fileBuffer = input;
      if (typeof arg2 === 'string') {
        filename = arg2 || 'file.dat';
        customStrategy = arg3;
      } else {
        // –ò–º—è —Ñ–∞–π–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ ‚Äî –ø–æ–¥—Å—Ç–∞–≤–∏–º –∑–∞–≥–ª—É—à–∫—É
        filename = 'file.dat';
        customStrategy = arg2;
      }
    }

    const fileSize = fileBuffer.length;

    console.log(`üîç –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞: ${filename} (${fileSize} –±–∞–π—Ç)`);

    // 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
  const formatInfo = detectFormat(filename, fileBuffer);
  const strategy = customStrategy ? { ...formatInfo.strategy, ...customStrategy } : formatInfo.strategy;

    console.log(`üìã –§–æ—Ä–º–∞—Ç: ${formatInfo.extension.toUpperCase()}, –¢–∏–ø: ${formatInfo.type}`);
    console.log(`üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç=${strategy.priority}, –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π=${strategy.recommendedParser}`);

    const log: ProcessingLog = {
      filename,
      fileSize,
      detectedFormat: formatInfo,
      strategy,
      attempts: [],
      finalResult: { text: '', confidence: 0, source: 'none', processingTime: 0 },
      totalProcessingTime: 0,
      timestamp: new Date()
    };

    let result: ParsingResult | null = null;
    let lastError: string = '';

    // 2. –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–µ—Ä—ã –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    const parsersToTry = this.getParsersInOrder(strategy);
    
    for (const parserType of parsersToTry) {
      if (result && result.confidence >= this.config.minConfidence) {
        break; // –£–∂–µ –ø–æ–ª—É—á–∏–ª–∏ —Ö–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      }

      console.log(`üîÑ –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–µ—Ä: ${parserType.toUpperCase()}`);
      const attemptStart = Date.now();

      try {
  const attemptResult = await this.tryParser(parserType, filename, fileBuffer, formatInfo);
        const attemptTime = Date.now() - attemptStart;

        log.attempts.push({
          parser: parserType,
          result: attemptResult.confidence >= this.config.minConfidence ? 'success' : 'low_confidence',
          confidence: attemptResult.confidence,
          processingTime: attemptTime,
          textLength: attemptResult.text.length
        });

        console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç ${parserType}: —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å=${(attemptResult.confidence * 100).toFixed(1)}%, —Ç–µ–∫—Å—Ç=${attemptResult.text.length} —Å–∏–º–≤., –≤—Ä–µ–º—è=${attemptTime}–º—Å`);

        if (!result || attemptResult.confidence > result.confidence) {
          result = attemptResult;
        }

        // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏, –º–æ–∂–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è
        if (attemptResult.confidence >= this.config.minConfidence) {
          console.log(`‚úÖ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å ${this.config.minConfidence}, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç`);
          break;
        }

      } catch (error) {
        const attemptTime = Date.now() - attemptStart;
        lastError = error instanceof Error ? error.message : String(error);
        
        log.attempts.push({
          parser: parserType,
          result: 'error',
          confidence: 0,
          processingTime: attemptTime,
          error: lastError,
          textLength: 0
        });

        console.log(`‚ùå –û—à–∏–±–∫–∞ ${parserType}: ${lastError}`);
        
        if (!this.config.enableFallback) {
          break; // –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏ –µ—Å–ª–∏ fallback –æ—Ç–∫–ª—é—á–µ–Ω
        }
      }
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (!result || result.text.length === 0) {
      result = {
        text: '',
        confidence: 0,
        source: 'failed',
        processingTime: Date.now() - startTime,
        errors: [`–í—Å–µ –ø–∞—Ä—Å–µ—Ä—ã –Ω–µ —Å–º–æ–≥–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª. –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: ${lastError}`]
      };
    }

    // 4. –§–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥
    log.finalResult = result;
    log.totalProcessingTime = Date.now() - startTime;
    this.processingLogs.push(log);

    // 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥–∏
    if (this.config.enableLogging) {
      await this.saveProcessingLog(log);
    }

    console.log(`üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${result.text.length} —Å–∏–º–≤–æ–ª–æ–≤, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å=${(result.confidence * 100).toFixed(1)}%, –≤—Ä–µ–º—è=${log.totalProcessingTime}–º—Å`);
    return result;
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ—Ä—è–¥–æ–∫ –ø–∞—Ä—Å–µ—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
   */
  private getParsersInOrder(strategy: ProcessingStrategy): ParserType[] {
    const parsers: ParserType[] = [];
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø–∞—Ä—Å–µ—Ä –ø–µ—Ä–≤—ã–º
    if (strategy.recommendedParser && !parsers.includes(strategy.recommendedParser)) {
      parsers.push(strategy.recommendedParser);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º fallback –ø–∞—Ä—Å–µ—Ä—ã
    if (strategy.fallbackParsers) {
      for (const parser of strategy.fallbackParsers) {
        if (!parsers.includes(parser)) {
          parsers.push(parser);
        }
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    const standardSequence = this.getStandardParserSequence(strategy.priority);
    for (const parser of standardSequence) {
      if (!parsers.includes(parser)) {
        parsers.push(parser);
      }
    }

    return parsers;
  }

  /**
   * –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–∞—Ä—Å–µ—Ä–æ–≤ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
   */
  private getStandardParserSequence(priority: ProcessingPriority): ParserType[] {
    switch (priority) {
      case ProcessingPriority.STRUCTURAL:
        return ['pdf-parse', 'xlsx', 'docx', 'text', 'ocr'];
      
      case ProcessingPriority.TEXTUAL:
        return ['text', 'docx', 'pdf-parse', 'xlsx', 'ocr'];
      
      case ProcessingPriority.OCR:
        return ['ocr', 'text', 'pdf-parse', 'docx', 'xlsx'];
      
      case ProcessingPriority.HYBRID:
      default:
        return ['pdf-parse', 'docx', 'xlsx', 'text', 'ocr'];
    }
  }

  /**
   * –ü—Ä–æ–±—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–∞—Ä—Å–µ—Ä
   */
  private async tryParser(
    parserType: ParserType, 
    filePath: string, 
    fileBuffer: Buffer,
    formatInfo: FileFormatInfo
  ): Promise<ParsingResult> {
    const startTime = Date.now();
    
    switch (parserType) {
      case 'ocr':
        return await this.tryOCRParser(fileBuffer, formatInfo);
      
      case 'pdf-parse':
        return await this.tryPDFParser(fileBuffer);
      
      case 'xlsx':
        return await this.tryExcelParser(fileBuffer);
      
      case 'docx':
        return await this.tryDocxParser(fileBuffer);
      
      case 'text':
        return await this.tryTextParser(fileBuffer, formatInfo);
      
      default:
        throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –ø–∞—Ä—Å–µ—Ä–∞: ${parserType}`);
    }
  }

  /**
   * OCR –ø–∞—Ä—Å–µ—Ä —á–µ—Ä–µ–∑ –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—É—é —Å–∏—Å—Ç–µ–º—É
   */
  private async tryOCRParser(fileBuffer: Buffer, formatInfo: FileFormatInfo): Promise<ParsingResult> {
    try {
      const result = await processImageMultiLevel(fileBuffer, {
        preferredSource: 'auto',
        enableFallback: true,
        minConfidence: 0.3
      });

      return {
        text: result.text,
        confidence: result.confidence,
        source: `ocr_${result.source}`,
        processingTime: result.processingTime || 0,
        metadata: {
          words: result.words?.length || 0,
          ocrEngine: result.source
        }
      };
    } catch (error) {
      throw new Error(`OCR –ø–∞—Ä—Å–µ—Ä –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª: ${error instanceof Error ? error.message : String(error)}`);
    }
  }

  /**
   * PDF –ø–∞—Ä—Å–µ—Ä
   */
  private async tryPDFParser(fileBuffer: Buffer): Promise<ParsingResult> {
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º pdf-parse –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ 
      const pdfParseModule = await import('pdf-parse');
      const pdfParse = (pdfParseModule as any).default || pdfParseModule;
      const result = await pdfParse(fileBuffer);

      return {
        text: result.text,
        confidence: result.text.length > 0 ? 0.9 : 0.1,
        source: 'pdf-parse',
        processingTime: 0,
        metadata: {
          pages: result.numpages,
          info: result.info
        }
      };
    } catch (error) {
      throw new Error(`PDF –ø–∞—Ä—Å–µ—Ä –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª: ${error instanceof Error ? error.message : String(error)}`);
    }
  }

  /**
   * Excel –ø–∞—Ä—Å–µ—Ä
   */
  private async tryExcelParser(fileBuffer: Buffer): Promise<ParsingResult> {
    try {
      const XLSX = await import('xlsx');
      const workbook = XLSX.read(fileBuffer, { type: 'buffer' });
      
      let allText = '';
      let sheetCount = 0;
      
      for (const sheetName of workbook.SheetNames) {
        const sheet = workbook.Sheets[sheetName];
        const csv = XLSX.utils.sheet_to_csv(sheet);
        allText += `\n=== ${sheetName} ===\n${csv}\n`;
        sheetCount++;
      }

      return {
        text: allText.trim(),
        confidence: allText.length > 0 ? 0.95 : 0.1,
        source: 'xlsx',
        processingTime: 0,
        metadata: {
          sheets: sheetCount,
          sheetNames: workbook.SheetNames
        }
      };
    } catch (error) {
      throw new Error(`Excel –ø–∞—Ä—Å–µ—Ä –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª: ${error instanceof Error ? error.message : String(error)}`);
    }
  }

  /**
   * Word –¥–æ–∫—É–º–µ–Ω—Ç –ø–∞—Ä—Å–µ—Ä
   */
  private async tryDocxParser(fileBuffer: Buffer): Promise<ParsingResult> {
    try {
      const mammoth = await import('mammoth');
      const result = await mammoth.extractRawText({ buffer: fileBuffer });
      
      const warnings = result.messages.map((message) => message.message);

      return {
        text: result.value,
        confidence: result.value.length > 0 ? 0.9 : 0.1,
        source: 'docx',
        processingTime: 0,
        metadata: {
          warnings
        },
        warnings
      };
    } catch (error) {
      throw new Error(`Word –ø–∞—Ä—Å–µ—Ä –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª: ${error instanceof Error ? error.message : String(error)}`);
    }
  }

  /**
   * –¢–µ–∫—Å—Ç–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä
   */
  private async tryTextParser(fileBuffer: Buffer, formatInfo: FileFormatInfo): Promise<ParsingResult> {
    try {
      // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
      const encodings = ['utf8', 'win1251', 'cp866'];
      let bestResult: { text: string; confidence: number } = { text: '', confidence: 0 };
      
      for (const encoding of encodings) {
        try {
          const text = fileBuffer.toString(encoding as BufferEncoding);
          const confidence = this.evaluateTextQuality(text);
          
          if (confidence > bestResult.confidence) {
            bestResult = { text, confidence };
          }
        } catch (error) {
          // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
        }
      }

      return {
        text: bestResult.text,
        confidence: bestResult.confidence,
        source: 'text',
        processingTime: 0,
        metadata: {
          detectedEncoding: 'auto',
          fileExtension: formatInfo.extension
        }
      };
    } catch (error) {
      throw new Error(`–¢–µ–∫—Å—Ç–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª: ${error instanceof Error ? error.message : String(error)}`);
    }
  }

  /**
   * –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Ç–µ–∫—Å—Ç–∞ (–¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏)
   */
  private evaluateTextQuality(text: string): number {
    if (!text || text.length === 0) return 0;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ä—É—Å—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    const russianChars = (text.match(/[–∞-—è—ë–ê-–Ø–Å]/g) || []).length;
    const totalChars = text.length;
    const russianRatio = russianChars / totalChars;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ "–º—É—Å–æ—Ä–Ω—ã—Ö" —Å–∏–º–≤–æ–ª–æ–≤
    const garbageChars = (text.match(/[^\x20-\x7E\u0400-\u04FF\n\r\t]/g) || []).length;
    const garbageRatio = garbageChars / totalChars;
    
    // –ë–∞–∑–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–ª–∏–Ω—ã
    let confidence = Math.min(text.length / 100, 1.0);
    
    // –ë–æ–Ω—É—Å –∑–∞ —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç
    confidence += russianRatio * 0.3;
    
    // –®—Ç—Ä–∞—Ñ –∑–∞ –º—É—Å–æ—Ä–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    confidence -= garbageRatio * 0.5;
    
    return Math.max(0, Math.min(1, confidence));
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
   */
  private ensureLogDirectory(): void {
    if (!fs.existsSync(this.config.logDirectory)) {
      fs.mkdirSync(this.config.logDirectory, { recursive: true });
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏
   */
  private async saveProcessingLog(log: ProcessingLog): Promise<void> {
    try {
      const timestamp = log.timestamp.toISOString().replace(/[:.]/g, '-');
      const logFile = path.join(this.config.logDirectory, `${timestamp}_${log.filename}.json`);
      
      fs.writeFileSync(logFile, JSON.stringify(log, null, 2), 'utf8');
      
      // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
      const summaryFile = path.join(this.config.logDirectory, 'processing_summary.json');
      let summary: any[] = [];
      
      if (fs.existsSync(summaryFile)) {
        try {
          summary = JSON.parse(fs.readFileSync(summaryFile, 'utf8'));
        } catch (error) {
          summary = [];
        }
      }
      
      summary.push({
        filename: log.filename,
        timestamp: log.timestamp,
        success: log.finalResult.confidence >= this.config.minConfidence,
        confidence: log.finalResult.confidence,
        processingTime: log.totalProcessingTime,
        attempts: log.attempts.length,
        finalParser: log.finalResult.source
      });
      
      // –•—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 –∑–∞–ø–∏—Å–µ–π
      if (summary.length > 1000) {
        summary = summary.slice(-1000);
      }
      
      fs.writeFileSync(summaryFile, JSON.stringify(summary, null, 2), 'utf8');
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ª–æ–≥–∞:', error);
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏
   */
  getProcessingStats() {
    const total = this.processingLogs.length;
    if (total === 0) return null;

    const successful = this.processingLogs.filter(log => 
      log.finalResult.confidence >= this.config.minConfidence).length;
    
    const avgProcessingTime = this.processingLogs.reduce((sum, log) => 
      sum + log.totalProcessingTime, 0) / total;
    
    const parserStats: Record<string, number> = {};
    this.processingLogs.forEach(log => {
      const parser = log.finalResult.source;
      parserStats[parser] = (parserStats[parser] || 0) + 1;
    });

    return {
      totalFiles: total,
      successfulFiles: successful,
      successRate: (successful / total * 100).toFixed(1) + '%',
      avgProcessingTime: Math.round(avgProcessingTime),
      parserUsage: parserStats
    };
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
export { IntelligentFileProcessor, type ParsingResult, type ProcessingConfig, type ProcessingLog };

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ —Å —É–º–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–µ–π
 */
export async function processFileIntelligently(
  filePath: string, 
  config?: Partial<ProcessingConfig>
): Promise<ParsingResult> {
  const processor = new IntelligentFileProcessor(config);
  return await processor.processFile(filePath);
}

/**
 * –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
 */
export async function processBatch(
  filePaths: string[], 
  config?: Partial<ProcessingConfig>
): Promise<ParsingResult[]> {
  const processor = new IntelligentFileProcessor(config);
  const results: ParsingResult[] = [];
  
  console.log(`üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞–∫–µ—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É ${filePaths.length} —Ñ–∞–π–ª–æ–≤`);
  
  for (let i = 0; i < filePaths.length; i++) {
    const filePath = filePaths[i];
    console.log(`\nüìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª ${i + 1}/${filePaths.length}: ${path.basename(filePath)}`);
    
    try {
      const result = await processor.processFile(filePath);
      results.push(result);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${filePath}:`, error);
      results.push({
        text: '',
        confidence: 0,
        source: 'error',
        processingTime: 0,
        errors: [error instanceof Error ? error.message : String(error)]
      });
    }
  }
  
  // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  const stats = processor.getProcessingStats();
  if (stats) {
    console.log(`\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏:`);
    console.log(`   –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${stats.successfulFiles}/${stats.totalFiles} (${stats.successRate})`);
    console.log(`   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${stats.avgProcessingTime}–º—Å`);
    console.log(`   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–æ–≤:`, stats.parserUsage);
  }
  
  return results;
}