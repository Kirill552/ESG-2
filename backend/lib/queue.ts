/**
 * Queue Manager –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –æ—á–µ—Ä–µ–¥–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ pg-boss
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π —Ç–∞—Ä–∏—Ñ–æ–≤ (–±–µ–∑ –∫—Ä–µ–¥–∏—Ç–æ–≤)
 * –ó–∞–¥–∞—á–∞ 2.2: –û–±–Ω–æ–≤–∏—Ç—å Queue Manager –ø–æ–¥ –Ω–æ–≤—É—é –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—é
 */

const PgBoss = require('pg-boss');
// –î–ª—è ts-node: —è–≤–Ω–æ —É–∫–∞–∂–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .ts –ø—Ä–∏ require –∏–∑ CJS-–æ–±–ª–∞—Å—Ç–∏
const PgBossCfg = require('./pg-boss-config.ts');
const createPgBoss = PgBossCfg.createPgBoss;
const QUEUE_NAMES = PgBossCfg.QUEUE_NAMES;
const JOB_PRIORITIES = PgBossCfg.JOB_PRIORITIES;
 type OcrJobData = any;
 type OcrJobResult = any;
 // –ò—Å–ø–æ–ª—å–∑—É–µ–º CJS require —Å —è–≤–Ω—ã–º–∏ .ts —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å ts-node
 const { metricsCollector } = require('./metrics.ts');
 const { queueLogger } = require('./structured-logger.ts');
 const { surgePricingService } = require('./surge-pricing.ts');

export interface QueueStats {
  waiting: number;
  active: number;
  completed: number;
  failed: number;
  total: number;
}

export interface DetailedQueueStats extends QueueStats {
  byStatus: Record<string, number>;
}

export interface ActiveJob {
  id: string;
  data: OcrJobData;
  createdAt: Date;
  startedAt?: Date;
  priority: number;
}

export interface FailedJob {
  id: string;
  data: OcrJobData;
  error: string;
  failedAt: Date;
  retryCount: number;
}

export interface PerformanceMetrics {
  averageProcessingTime: number;
  throughputPerHour: number;
  errorRate: number;
  queueHealth: 'healthy' | 'warning' | 'critical';
}

export interface JobStatus {
  id: string;
  status: 'waiting' | 'active' | 'completed' | 'failed';
  progress?: number;
  result?: OcrJobResult;
  error?: string;
  createdAt: Date;
  processedAt?: Date;
  priority: number;
}

export interface AddJobOptions {
  priority?: 'normal' | 'high' | 'urgent';
  retryLimit?: number;
  expireInHours?: number;
}

// –ó–∞–≥–ª—É—à–∫–∏ —É–¥–∞–ª–µ–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Queue Manager
 */
export class QueueManager {
  private boss: any | null = null;
  private schema: string = process.env.QUEUE_TABLE_PREFIX || 'pgboss';

  constructor() {}

  /**
   * –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –æ—á–µ—Ä–µ–¥—å—é
   */
  private async ensureInitialized(): Promise<void> {
    if (!this.boss) {
      await this.initialize();
    }
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è pg-boss
   */
  async initialize(): Promise<void> {
    if (this.boss) {
      console.log('‚ö†Ô∏è Queue Manager —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      return;
    }

    try {
      this.boss = await createPgBoss();
      
      // –°–æ–∑–¥–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–µ–π –≤ —Ç–µ—Å—Ç–∞—Ö –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è: pg-boss –º–æ–∫–∏ —á–∞—Å—Ç–æ –±–µ–∑ createQueue
      if (typeof this.boss.createQueue === 'function') {
        try { await this.boss.createQueue(QUEUE_NAMES.OCR, { retryLimit: 3, retryDelay: 2000, expireInHours: 1 }); } catch {}
        try { await this.boss.createQueue(QUEUE_NAMES.PDF_GENERATION, { retryLimit: 2, retryDelay: 5000, expireInHours: 2 }); } catch {}
        try { await this.boss.createQueue(QUEUE_NAMES.CLEANUP, { retryLimit: 1, retryDelay: 10000, expireInHours: 23 }); } catch {}
        try { await this.boss.createQueue(QUEUE_NAMES.SESSION_CLEANUP, { retryLimit: 1, retryDelay: 30000, expireInHours: 1 }); } catch {}
      }
      
      console.log('‚úÖ Queue Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');
      console.log('‚úÖ –û—á–µ—Ä–µ–¥–∏ —Å–æ–∑–¥–∞–Ω—ã:', Object.values(QUEUE_NAMES));
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Queue Manager:', error);
      throw error;
    }
  }

  /**
   * –ü–∞—É–∑–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á OCR –æ—á–µ—Ä–µ–¥–∏ (–≥–ª–æ–±–∞–ª—å–Ω–æ)
   */
  async pauseAllOcr(): Promise<void> {
    if (!this.boss) throw new Error('Queue Manager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    if (typeof this.boss.pause === 'function') {
      await this.boss.pause(QUEUE_NAMES.OCR);
    } else {
      throw new Error('pause unsupported by boss');
    }
  }

  /**
   * –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ OCR –æ—á–µ—Ä–µ–¥–∏ (–≥–ª–æ–±–∞–ª—å–Ω–æ)
   */
  async resumeAllOcr(): Promise<void> {
    if (!this.boss) throw new Error('Queue Manager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    if (typeof this.boss.resume === 'function') {
      await this.boss.resume(QUEUE_NAMES.OCR);
    } else {
      throw new Error('resume unsupported by boss');
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –ª–∏ OCR –æ—á–µ—Ä–µ–¥—å –Ω–∞ –ø–∞—É–∑—É (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –±—ç–∫–µ–Ω–¥–æ–º)
   */
  async isOcrPaused(): Promise<boolean> {
    if (!this.boss) throw new Error('Queue Manager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    // pg-boss –Ω–∞–ø—Ä—è–º—É—é –Ω–µ –æ—Ç–¥–∞–µ—Ç paused, –Ω–æ –º–Ω–æ–≥–∏–µ –æ–±–µ—Ä—Ç–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ;
    // –ø–æ–ø—ã—Ç–∞–µ–º—Å—è —Å–ø—Ä–æ—Å–∏—Ç—å —É boss, –∏–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º false –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    try {
      if (typeof (this.boss as any).isPaused === 'function') {
        return await (this.boss as any).isPaused(QUEUE_NAMES.OCR);
      }
    } catch {}
    return false;
  }

  /**
   * –ü–∞—É–∑–∞ –∑–∞–¥–∞—á –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞: —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á)
   */
  async pauseOrganization(_organizationId: string): Promise<void> {
    // TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—É—é –æ—á–µ—Ä–µ–¥—å/—Ç–µ–≥/–º–µ—Ç–∫—É –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–¥–∞—á
    return this.pauseAllOcr();
  }

  /**
   * –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)
   */
  async resumeOrganization(_organizationId: string): Promise<void> {
    return this.resumeAllOcr();
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ pg-boss
   */
  async stop(): Promise<void> {
    if (this.boss) {
      await this.boss.stop();
      this.boss = null;
      console.log('üõë Queue Manager –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ OCR –≤ –æ—á–µ—Ä–µ–¥—å (–Ω–æ–≤–∞—è –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—è: –±–µ–∑ –∫—Ä–µ–¥–∏—Ç–æ–≤)
   */
  async addOcrJob(data: OcrJobData, options: AddJobOptions = {}): Promise<string | null> {
    if (!this.boss) {
      throw new Error('Queue Manager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    const organizationId = data.organizationId || data.userId;

    await queueLogger.debug('Starting OCR job addition', {
      documentId: data.documentId,
      organizationId,
      options
    });

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    let priority: number = JOB_PRIORITIES.NORMAL;
    
    if (options.priority === 'urgent') {
      priority = JOB_PRIORITIES.URGENT;
    } else if (options.priority === 'high') {
      priority = JOB_PRIORITIES.HIGH;
    }

    const envRetryLimit = parseInt(process.env.OCR_RETRY_LIMIT || '3');
    const envRetryDelay = parseInt(process.env.OCR_RETRY_DELAY_MS || '2000');
    const envRetryBackoff = (process.env.OCR_RETRY_BACKOFF || 'true').toLowerCase() !== 'false';
    const jobOptions = {
      priority,
      retryLimit: options.retryLimit || envRetryLimit,
      retryDelay: envRetryDelay,
      retryBackoff: envRetryBackoff,
      expireInHours: options.expireInHours || 1,
      // –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥—É–±–ª–∏: –æ–¥–∏–Ω –∞–∫—Ç–∏–≤–Ω—ã–π job per document
      singletonKey: data?.documentId ? `ocr:${data.documentId}` : undefined,
      singletonSeconds: 60 // –≤ —Ç–µ—á–µ–Ω–∏–µ –º–∏–Ω—É—Ç—ã –¥—É–±–ª–∏–∫–∞—Ç—ã –Ω–µ —Å–æ–∑–¥–∞—é—Ç—Å—è
    } as any;

    const enrichedJobData = { ...data };

    await queueLogger.info('Adding OCR job to queue', {
      documentId: data.documentId,
      priority,
      jobOptions
    }, { organizationId });

    try {
  const jobId = await this.boss.send(QUEUE_NAMES.OCR, enrichedJobData, jobOptions);
      
      await queueLogger.info('OCR job created', {
        jobId,
        documentId: data.documentId,
        jobIdType: typeof jobId,
        jobIdLength: jobId ? String(jobId).length : 0
      }, { organizationId });
      
      if (!jobId || typeof jobId !== 'string' || jobId.trim() === '') {
        throw new Error(`Invalid job ID returned: ${JSON.stringify(jobId)}`);
      }
      
      await queueLogger.jobStarted(jobId, 'OCR', {
        documentId: data.documentId,
        priority,
        organizationId
      });
      
      return jobId;
      
    } catch (error) {
      await queueLogger.error('Failed to add OCR job to queue', error instanceof Error ? error : new Error(String(error)), {
        documentId: data.documentId,
        options: jobOptions
      }, { organizationId });
      
      throw error;
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–π
   */
  async scheduleSessionCleanup(): Promise<string | null> {
    if (!this.boss) {
      throw new Error('Queue Manager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    try {
      const jobId = await this.boss.send(QUEUE_NAMES.SESSION_CLEANUP, {
        timestamp: new Date().toISOString()
      }, {
        priority: JOB_PRIORITIES.LOW,
        retryLimit: 1,
        expireInHours: 1
      });

      console.log('üßπ Session cleanup job scheduled:', jobId);
      return jobId;
    } catch (error) {
      console.error('‚ùå Failed to schedule session cleanup job:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
   */
  async getJobStatus(jobId: string): Promise<JobStatus | null> {
  await this.ensureInitialized();

    try {
      const job = await this.boss.getJobById(QUEUE_NAMES.OCR, jobId);
      
      if (!job) {
        return null;
      }

      // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–∏–ø—ã –∏ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–ª–µ–π —Å–æ–≥–ª–∞—Å–Ω–æ pg-boss API
      return {
        id: job.id,
        status: this.mapJobState(job.state),
        progress: (job.data as any)?.progress,
        result: job.output as OcrJobResult | undefined,
        error: (job.output as any)?.error,
        createdAt: job.createdOn,
        processedAt: job.completedOn || (job as any).failedOn,
        priority: job.priority || JOB_PRIORITIES.NORMAL
      };
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ ${jobId}:`, error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—á–µ—Ä–µ–¥–µ–π
   */
  async getQueueStats(): Promise<QueueStats> {
  await this.ensureInitialized();

    try {
      // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –ø–æ–ª—É—á–∞–µ–º –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏
      const totalSize = await this.boss.getQueueSize(QUEUE_NAMES.OCR);
      
      // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–≤ –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å)
      const stats = {
        waiting: totalSize,
        active: 0,
        completed: 0,
        failed: 0,
        total: totalSize
      };

      console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–µ—Ä–µ–¥–µ–π:', stats);
      return stats;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—á–µ—Ä–µ–¥–µ–π:', error);
      throw error;
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –≤ PostgreSQL
   */
  async cleanCompletedJobs(olderThanHours: number = 24): Promise<number> {
    if (!this.boss) {
      throw new Error('Queue Manager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    try {
      console.log(`üßπ –ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ –∑–∞–¥–∞—á —Å—Ç–∞—Ä—à–µ ${olderThanHours} —á–∞—Å–æ–≤`);
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ pg-boss
      const db = (this.boss as any).db;
      
      if (!db) {
        console.log('‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ë–î, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫—É pg-boss');
        return 0;
      }

      // –û—á–∏—â–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ —Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
      const cutoffTime = new Date(Date.now() - olderThanHours * 60 * 60 * 1000);
      
      const result = await db.query(`
        DELETE FROM ${this.schema}.job 
        WHERE name = $1 
        AND state IN ('completed', 'failed') 
        AND completedon < $2
      `, [QUEUE_NAMES.OCR, cutoffTime]);
      
      const cleanedCount = result.rowCount || 0;
      console.log(`‚úÖ –û—á–∏—â–µ–Ω–æ ${cleanedCount} –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á`);
      
      return cleanedCount;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á:', error);
      // Fallback: pg-boss –¥–µ–ª–∞–µ—Ç –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫—É
      return 0;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –∑–∞–¥–∞—á
   */
  async getDetailedQueueStats(): Promise<QueueStats & { byStatus: Record<string, number> }> {
    if (!this.boss) {
      throw new Error('Queue Manager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    try {
      const db = (this.boss as any).db;
      
      if (!db) {
        // Fallback –∫ –ø—Ä–æ—Å—Ç–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
        const basicStats = await this.getQueueStats();
        return {
          ...basicStats,
          byStatus: { created: basicStats.waiting }
        };
      }

      // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ë–î
      const result = await db.query(`
        SELECT 
          state,
          COUNT(*) as count
        FROM ${this.schema}.job 
        WHERE name = $1 
        GROUP BY state
      `, [QUEUE_NAMES.OCR]);

      const byStatus: Record<string, number> = {};
      let waiting = 0, active = 0, completed = 0, failed = 0;

      result.rows.forEach((row: any) => {
        const count = parseInt(row.count);
        byStatus[row.state] = count;

        switch (row.state) {
          case 'created':
          case 'retry':
            waiting += count;
            break;
          case 'active':
            active += count;
            break;
          case 'completed':
            completed += count;
            break;
          case 'failed':
          case 'cancelled':
            failed += count;
            break;
        }
      });

      const stats = {
        waiting,
        active,
        completed,
        failed,
        total: waiting + active + completed + failed,
        byStatus
      };

      console.log('üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–µ—Ä–µ–¥–µ–π:', stats);
      return stats;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      // Fallback –∫ –ø—Ä–æ—Å—Ç–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
      const basicStats = await this.getQueueStats();
      return {
        ...basicStats,
        byStatus: { unknown: basicStats.total }
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
   */
  async getActiveJobs(limit: number = 10): Promise<Array<{
    id: string;
    data: OcrJobData;
    createdAt: Date;
    startedAt?: Date;
    priority: number;
  }>> {
    if (!this.boss) {
      throw new Error('Queue Manager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    try {
      const db = (this.boss as any).db;
      
      if (!db) {
        console.log('‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ë–î –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á');
        return [];
      }

      const result = await db.query(`
        SELECT 
          id,
          data,
          createdon,
          startedon,
          priority
        FROM ${this.schema}.job 
        WHERE name = $1 
        AND state = 'active'
        ORDER BY startedon DESC
        LIMIT $2
      `, [QUEUE_NAMES.OCR, limit]);

      return result.rows.map((row: any) => ({
        id: row.id,
        data: row.data,
        createdAt: row.createdon,
        startedAt: row.startedon,
        priority: row.priority || JOB_PRIORITIES.NORMAL
      }));
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á:', error);
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
   */
  async getFailedJobs(limit: number = 10): Promise<Array<{
    id: string;
    data: OcrJobData;
    error: string;
    failedAt: Date;
    retryCount: number;
  }>> {
    if (!this.boss) {
      throw new Error('Queue Manager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    try {
      const db = (this.boss as any).db;
      
      if (!db) {
        console.log('‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ë–î –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–¥–∞—á');
        return [];
      }

      const result = await db.query(`
        SELECT 
          id,
          data,
          output,
          completedon as failed_at,
          retrycount
        FROM ${this.schema}.job 
        WHERE name = $1 
        AND state = 'failed'
        ORDER BY completedon DESC
        LIMIT $2
      `, [QUEUE_NAMES.OCR, limit]);

      return result.rows.map((row: any) => ({
        id: row.id,
        data: row.data,
        error: row.output?.error || 'Unknown error',
        failedAt: row.failed_at,
        retryCount: row.retrycount || 0
      }));
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–¥–∞—á:', error);
      return [];
    }
  }

  /**
   * –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—É–¥–∞—á–Ω–æ–π –∑–∞–¥–∞—á–∏
   */
  async retryFailedJob(jobId: string): Promise<string | null> {
    if (!this.boss) {
      throw new Error('Queue Manager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–µ—É–¥–∞—á–Ω–æ–π –∑–∞–¥–∞—á–∏
      const job = await this.boss.getJobById(QUEUE_NAMES.OCR, jobId);
      
      if (!job || job.state !== 'failed') {
        console.log(`‚ö†Ô∏è –ó–∞–¥–∞—á–∞ ${jobId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –≤ —Å—Ç–∞—Ç—É—Å–µ failed`);
        return null;
      }

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É —Å —Ç–µ–º–∏ –∂–µ –¥–∞–Ω–Ω—ã–º–∏
      const newJobId = await this.addOcrJob(job.data as OcrJobData, {
        priority: 'high' // –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—É—á–∞—é—Ç –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
      });

      console.log(`üîÑ –ó–∞–¥–∞—á–∞ ${jobId} –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞ –∫–∞–∫ ${newJobId}`);
      return newJobId;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏ ${jobId}:`, error);
      throw error;
    }
  }

  /**
   * –û—Ç–º–µ–Ω–∞ –∑–∞–¥–∞—á–∏ (–µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è)
   */
  async cancelJob(jobId: string): Promise<boolean> {
    if (!this.boss) {
      throw new Error('Queue Manager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    try {
      const result = await this.boss.cancel(jobId);
      
      if (result) {
        console.log(`‚ùå –ó–∞–¥–∞—á–∞ ${jobId} –æ—Ç–º–µ–Ω–µ–Ω–∞`);
      } else {
        console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É ${jobId} (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è)`);
      }
      
      return result;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–¥–∞—á–∏ ${jobId}:`, error);
      return false;
    }
  }

  /**
   * –ü–æ–∏—Å–∫ –∑–∞–¥–∞—á –ø–æ documentId –≤ –æ—á–µ—Ä–µ–¥–∏ OCR
   */
  async findJobsByDocumentId(documentId: string): Promise<Array<{ id: string }>> {
    if (!this.boss) throw new Error('Queue Manager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    try {
      const db = (this.boss as any).db;
      if (!db) return [];
      const result = await db.query(
        `SELECT id FROM ${this.schema}.job WHERE name = $1 AND (data->>'documentId') = $2 AND state IN ('created','retry','active')`,
        [QUEUE_NAMES.OCR, documentId]
      );
      return result.rows.map((r: any) => ({ id: r.id }));
    } catch (e) {
      console.error('‚ùå –û—à–∏–±–∫–∞ findJobsByDocumentId:', e);
      return [];
    }
  }

  /**
   * –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á –ø–æ documentId
   */
  async cancelJobsByDocumentId(documentId: string): Promise<number> {
    if (!this.boss) throw new Error('Queue Manager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    try {
      const jobs = await this.findJobsByDocumentId(documentId);
      let cancelled = 0;
      for (const j of jobs) {
        const ok = await this.cancelJob(j.id);
        if (ok) cancelled++;
      }
      return cancelled;
    } catch (e) {
      console.error('‚ùå –û—à–∏–±–∫–∞ cancelJobsByDocumentId:', e);
      return 0;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ—á–µ—Ä–µ–¥–∏
   */
  async getPerformanceMetrics(): Promise<{
    averageProcessingTime: number;
    throughputPerHour: number;
    errorRate: number;
    queueHealth: 'healthy' | 'warning' | 'critical';
  }> {
    if (!this.boss) {
      throw new Error('Queue Manager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π MetricsCollector –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫
      const metrics = await metricsCollector.getPerformanceMetrics(24);
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç, –æ–∂–∏–¥–∞–µ–º—ã–π API
      const throughputPerHour = metrics.throughputPerMinute * 60;
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –æ—á–µ—Ä–µ–¥–∏
      let queueHealth: 'healthy' | 'warning' | 'critical' = 'healthy';
      if (metrics.errorRate > 10) queueHealth = 'warning';
      if (metrics.errorRate > 30) queueHealth = 'critical';

      const result = {
        averageProcessingTime: metrics.averageProcessingTime,
        throughputPerHour,
        errorRate: metrics.errorRate,
        queueHealth
      };

      console.log('üìà –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:', result);
      return result;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:', error);
      return {
        averageProcessingTime: 0,
        throughputPerHour: 0,
        errorRate: 0,
        queueHealth: 'warning' as const
      };
    }
  }

  /**
  * –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
   */
  async onJobCompleted(jobId: string, result: OcrJobResult, processingTimeMs?: number): Promise<void> {
    console.log(`‚úÖ –ó–∞–¥–∞—á–∞ ${jobId} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫—É –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if (processingTimeMs) {
      await metricsCollector.recordProcessingTime(jobId, processingTimeMs);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∑–∞–¥–∞—á–∏ (–¥–ª—è –∑–∞–ø–∏—Å–∏ –º–µ—Ç—Ä–∏–∫)
   */
  async onJobFailed(jobId: string, error: string, errorType: string = 'PROCESSING_ERROR'): Promise<void> {
    console.log(`‚ùå –ó–∞–¥–∞—á–∞ ${jobId} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π: ${error}`);
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫—É –æ—à–∏–±–∫–∏
    await metricsCollector.recordError(jobId, errorType, error);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ surge-pricing
   */
  async getSurgePricingInfo(): Promise<{ isSurge: boolean; multiplier: number }> {
    // –ö—Ä–µ–¥–∏—Ç–Ω–∞—è –º–æ–¥–µ–ª—å –æ—Ç–∫–ª—é—á–µ–Ω–∞ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–∏—Å surge-pricing –Ω–∞–ø—Ä—è–º—É—é
    const isSurge = surgePricingService.isSurgePeriod(new Date());
    const multiplier = surgePricingService.getSurgeMultiplier(new Date());
    return { isSurge, multiplier };
  }

  /**
   * –ú–∞–ø–ø–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏–π pg-boss –≤ –Ω–∞—à–∏ —Å—Ç–∞—Ç—É—Å—ã
   */
  private mapJobState(state: string): 'waiting' | 'active' | 'completed' | 'failed' {
    switch (state) {
      case 'created':
      case 'retry':
        return 'waiting';
      case 'active':
        return 'active';
      case 'completed':
        return 'completed';
      case 'failed':
      case 'cancelled':
        return 'failed';
      default:
        return 'waiting';
    }
  }

  // –£–¥–∞–ª–µ–Ω—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏/—Å–ø–∏—Å–∞–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–æ–≤ ‚Äî –Ω–æ–≤–∞—è –º–æ–¥–µ–ª—å –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫—Ä–µ–¥–∏—Ç—ã
}

// Singleton instance
let queueManagerInstance: QueueManager | null = null;
let queueManagerInitializing: Promise<void> | null = null;

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ singleton —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Queue Manager
 */
export async function getQueueManager(): Promise<QueueManager> {
  // –°–æ–∑–¥–∞—ë–º –∏–Ω—Å—Ç–∞–Ω—Å –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ª–µ–Ω–∏–≤–æ
  if (!queueManagerInstance) {
    queueManagerInstance = new QueueManager();
    queueManagerInitializing = queueManagerInstance.initialize()
      .catch((e: any) => {
        // –ü—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω—Å—Ç–∞–Ω—Å
        queueManagerInstance = null;
        throw e;
      })
      .finally(() => {
        queueManagerInitializing = null;
      });
    await queueManagerInitializing;
    return queueManagerInstance as QueueManager;
  }

  // –ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ —É–∂–µ —Å–æ–∑–¥–∞–ª –∏–Ω—Å—Ç–∞–Ω—Å, –Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –µ—â—ë –∏–¥—ë—Ç ‚Äî –¥–æ–∂–¥—ë–º—Å—è
  if ((queueManagerInstance as any).boss == null) {
    if (queueManagerInitializing) {
      await queueManagerInitializing;
    } else {
      // –°—Ç—Ä–∞—Ö–æ–≤–∫–∞: –µ—Å–ª–∏ boss –ø—É—Å—Ç, –∞ –ø—Ä–æ–º–∏—Å–∞ –Ω–µ—Ç ‚Äî –¥–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
      queueManagerInitializing = queueManagerInstance.initialize()
        .finally(() => {
          queueManagerInitializing = null;
        });
      await queueManagerInitializing;
    }
  }

  return queueManagerInstance;
}

/**
 * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Queue Manager (–¥–ª—è graceful shutdown)
 */
export async function stopQueueManager(): Promise<void> {
  if (queueManagerInstance) {
    await queueManagerInstance.stop();
    queueManagerInstance = null;
  }
}