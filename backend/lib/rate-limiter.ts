/**
 * Rate Limiter - —Å–∏—Å—Ç–µ–º–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç PostgreSQL –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤
 * –ö—Ä–µ–¥–∏—Ç–Ω–∞—è –º–æ–¥–µ–ª—å –æ—Ç–∫–ª—é—á–µ–Ω–∞. –¢–æ–ª—å–∫–æ rate limits –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º
 */

import { prisma } from './prisma';
import { surgePricingService } from './surge-pricing';

export interface RateLimitConfig {
  windowSizeMs: number;      // –†–∞–∑–º–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
  maxRequests: number;       // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –æ–∫–Ω–µ
  cleanupIntervalMs: number; // –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
  subscriptionLimits: {      // –õ–∏–º–∏—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ç–∞—Ä–∏—Ñ–æ–≤
    FREE: number;            // –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω
    LITE?: number;           // –¢–∞—Ä–∏—Ñ ¬´–õ–∞–π—Ç¬ª (–∏–∑ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏)
    STANDARD?: number;       // –¢–∞—Ä–∏—Ñ ¬´–°—Ç–∞–Ω–¥–∞—Ä—Ç¬ª (–∏–∑ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏)
    LARGE?: number;          // –¢–∞—Ä–∏—Ñ ¬´–ö—Ä—É–ø–Ω—ã–π¬ª (–∏–∑ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏)
    ENTERPRISE?: number;     // –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π (–∏–∑ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏)
    // –°—Ç–∞—Ä—ã–µ –∫–ª—é—á–∏ —É–¥–∞–ª–µ–Ω—ã
  };
}

export interface RateLimitResult {
  allowed: boolean;          // –†–∞–∑—Ä–µ—à–µ–Ω –ª–∏ –∑–∞–ø—Ä–æ—Å
  remaining: number;         // –û—Å—Ç–∞–≤—à–µ–µ—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
  resetTime: Date;          // –í—Ä–µ–º—è —Å–±—Ä–æ—Å–∞ —Å—á–µ—Ç—á–∏–∫–∞
  retryAfter?: number;      // –ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –º–æ–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å (–µ—Å–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω)
  reason?: string;          // –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
  subscriptionType?: string; // –¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏
  // –£–±—Ä–∞–Ω–æ: –∫—Ä–µ–¥–∏—Ç—ã
}

export interface RateLimitStats {
  organizationId: string;
  currentCount: number;
  maxRequests: number;
  windowStart: Date;
  windowEnd: Date;
  // –£–±—Ä–∞–Ω–æ: –∫—Ä–µ–¥–∏—Ç—ã
  isSurgePeriod: boolean;
  subscriptionType: string;
  // –£–±—Ä–∞–Ω–æ: –±–∞–ª–∞–Ω—Å –∫—Ä–µ–¥–∏—Ç–æ–≤
}

/**
 * Rate Limiter –∫–ª–∞—Å—Å –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º
 */
export class RateLimiter {
  private config: RateLimitConfig;
  private cleanupTimer: NodeJS.Timeout | null = null;
  // –ö—Ä–µ–¥–∏—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã –≤ –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏

  constructor(config: Partial<RateLimitConfig> = {}) {
    // –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–ø–µ—Ä—å –±–µ—Ä—É—Ç—Å—è –∏–∑ ENV, —á—Ç–æ–±—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–∞—Ä–∏—Ñ–∞–º –∏–∑ monetization-config
    const defaultLimits = {
      FREE: parseInt(process.env.RATE_LIMIT_FREE || '10'),
      LITE: parseInt(process.env.RATE_LIMIT_LITE || '100'),
      STANDARD: parseInt(process.env.RATE_LIMIT_STANDARD || '200'),
      LARGE: parseInt(process.env.RATE_LIMIT_LARGE || '500'),
      ENTERPRISE: parseInt(process.env.RATE_LIMIT_ENTERPRISE || '1000'),
      
    } as RateLimitConfig['subscriptionLimits'];

    this.config = {
      windowSizeMs: config.windowSizeMs || 60 * 60 * 1000, // 1 —á–∞—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      maxRequests: config.maxRequests || 100,               // 100 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —á–∞—Å
      cleanupIntervalMs: config.cleanupIntervalMs || 5 * 60 * 1000, // –û—á–∏—Å—Ç–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
      subscriptionLimits: { ...defaultLimits, ...(config.subscriptionLimits || {}) }
    };

    // –ö—Ä–µ–¥–∏—Ç–æ–≤ –Ω–µ—Ç ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º

    // –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π singleton creditsService (–º–æ–∫–∞–µ—Ç—Å—è –≤ —Ç–µ—Å—Ç–∞—Ö)

    console.log('üîß Rate Limiter –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:', {
      windowSizeMs: this.config.windowSizeMs,
      maxRequests: this.config.maxRequests,
      cleanupIntervalMs: this.config.cleanupIntervalMs,
      subscriptionLimits: this.config.subscriptionLimits
    });

    // –ù–µ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ - —Ç–æ–ª—å–∫–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É
    // this.startCleanupTimer();
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
   */
  async checkLimit(organizationId: string): Promise<RateLimitResult> {
    try {
      console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: ${organizationId}`);

      // 1. –ë–ª–æ–∫ –∫—Ä–µ–¥–∏—Ç–æ–≤ —É–¥–∞–ª—ë–Ω: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ rate limit –∏ —Ç–∞—Ä–∏—Ñ–Ω—ã–µ –ª–∏–º–∏—Ç—ã
      let subscriptionType: string | undefined = 'FREE';

      // 2. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–∏–º–∏—Ç—ã
      const maxRequests = await this.getEffectiveMaxRequests(organizationId, subscriptionType);

      // 3. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ
      const windowStart = this.getCurrentWindowStart();
      const windowEnd = new Date(windowStart.getTime() + this.config.windowSizeMs);

      // 4. –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –ª–∏–º–∏—Ç–∞
      const rateLimitRecord = await this.getOrCreateRateLimit(organizationId, windowStart);
      
      if (rateLimitRecord.requestCount >= maxRequests) {
        console.log(`‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –¥–ª—è ${organizationId}: ${rateLimitRecord.requestCount}/${maxRequests} (–¢–∞—Ä–∏—Ñ: ${subscriptionType})`);
        
        const retryAfter = Math.ceil((windowEnd.getTime() - Date.now()) / 1000);
        
        return {
          allowed: false,
          remaining: 0,
          resetTime: windowEnd,
          retryAfter,
          reason: 'RATE_LIMIT_EXCEEDED',
          subscriptionType
        };
      }

      // 5. –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω
      const remaining = maxRequests - rateLimitRecord.requestCount;

      console.log(`‚úÖ –õ–∏–º–∏—Ç OK –¥–ª—è ${organizationId}: ${rateLimitRecord.requestCount}/${maxRequests} (–æ—Å—Ç–∞–ª–æ—Å—å: ${remaining}, –¢–∞—Ä–∏—Ñ: ${subscriptionType})`);

      return { allowed: true, remaining, resetTime: windowEnd, subscriptionType };

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–∞ –¥–ª—è ${organizationId}:`, error);
      
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å (fail-open)
      return {
        allowed: true,
        remaining: this.config.maxRequests,
        resetTime: new Date(Date.now() + this.config.windowSizeMs),
        reason: 'ERROR_FALLBACK'
      };
    }
  }

  /**
   * –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º–∏ —Ç–µ—Å—Ç–∞–º–∏/–∫–æ–¥–æ–º: –∞–ª–∏–∞—Å –º–µ—Ç–æ–¥–∞ checkLimit
   * –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –º–æ–∫–∞—é—Ç RateLimiter.prototype.check, –ø–æ—ç—Ç–æ–º—É –æ—Å—Ç–∞–≤–ª—è–µ–º
   * —Ç–æ–Ω–∫—É—é –æ–±–µ—Ä—Ç–∫—É, –¥–µ–ª–µ–≥–∏—Ä—É—é—â—É—é –≤ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π checkLimit.
   */
  async check(organizationId: string): Promise<RateLimitResult> {
    return this.checkLimit(organizationId);
  }

  /**
   * –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
   */
  async incrementCounter(organizationId: string): Promise<void> {
    try {
      console.log(`üìà –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –¥–ª—è ${organizationId}`);

      const windowStart = this.getCurrentWindowStart();
      
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      await prisma.rateLimit.upsert({
        where: {
          organizationId_windowStart: {
            organizationId,
            windowStart
          }
        },
        update: {
          requestCount: {
            increment: 1
          },
          updatedAt: new Date()
        },
        create: {
          organizationId,
          requestCount: 1,
          windowStart,
          updatedAt: new Date()
        }
      });

      console.log(`‚úÖ –°—á–µ—Ç—á–∏–∫ —É–≤–µ–ª–∏—á–µ–Ω –¥–ª—è ${organizationId}`);

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –¥–ª—è ${organizationId}:`, error);
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
   */
  async getStats(organizationId: string): Promise<RateLimitStats> {
    try {
      const windowStart = this.getCurrentWindowStart();
      const windowEnd = new Date(windowStart.getTime() + this.config.windowSizeMs);

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–ø–∏—Å—å –ª–∏–º–∏—Ç–∞
      const rateLimitRecord = await prisma.rateLimit.findUnique({
        where: {
          organizationId_windowStart: {
            organizationId,
            windowStart
          }
        }
      });

      // –ö—Ä–µ–¥–∏—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π —Ç–∏–ø –∏ surge –æ—Ç —Å–µ—Ä–≤–∏—Å–∞
      const subscriptionType = 'FREE';
      const maxRequests = await this.getEffectiveMaxRequests(organizationId, subscriptionType);
      
      const currentCount = rateLimitRecord?.requestCount || 0;
      const isSurgePeriod = surgePricingService.isSurgePeriod(new Date());

      return {
        organizationId,
        currentCount,
        maxRequests,
        windowStart,
        windowEnd,
        isSurgePeriod,
        subscriptionType,
        
      };

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è ${organizationId}:`, error);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const windowStart = this.getCurrentWindowStart();
      return {
        organizationId,
        currentCount: 0,
        maxRequests: this.config.maxRequests,
        windowStart,
        windowEnd: new Date(windowStart.getTime() + this.config.windowSizeMs),
        isSurgePeriod: false,
        subscriptionType: 'FREE',
        
      };
    }
  }

  /**
   * –°–±—Ä–æ—Å –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
   */
  async resetLimits(organizationId: string): Promise<void> {
    try {
      console.log(`üîÑ –°–±—Ä–æ—Å –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è ${organizationId}`);

      await prisma.rateLimit.deleteMany({
        where: {
          organizationId
        }
      });

      console.log(`‚úÖ –õ–∏–º–∏—Ç—ã —Å–±—Ä–æ—à–µ–Ω—ã –¥–ª—è ${organizationId}`);

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è ${organizationId}:`, error);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º –∫—Ä–µ–¥–∏—Ç–æ–≤ –∏ –ª–∏–º–∏—Ç–æ–≤
   */
  async canPerformOperation(organizationId: string, operationType: 'ocr' | 'report_generation' | 'api_call' = 'ocr'): Promise<{
    allowed: boolean;
    reason?: string;
    rateLimitResult?: RateLimitResult;
  }> {
    try {
      // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit
      const rateLimitResult = await this.checkLimit(organizationId);
      
      if (!rateLimitResult.allowed) {
        return {
          allowed: false,
          reason: rateLimitResult.reason,
          rateLimitResult
        };
      }

      // 2. –ö—Ä–µ–¥–∏—Ç—ã —É–±—Ä–∞–Ω—ã ‚Äî –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–≥–æ rate limit
      return { allowed: true, rateLimitResult };

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è ${organizationId}:`, error);
      return {
        allowed: false,
        reason: 'ERROR_CHECKING_OPERATION'
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ surge-pricing
   */
  private async getEffectiveMaxRequests(organizationId: string, subscriptionType?: string): Promise<number> {
    // –ë–∞–∑–æ–≤—ã–π –ª–∏–º–∏—Ç: –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞–Ω–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º this.config.maxRequests (–∫–∞–∫ –≤ —Å—Ç–∞—Ä—ã—Ö —Ç–µ—Å—Ç–∞—Ö)
    let baseLimit: number;
    if (!subscriptionType) {
      baseLimit = this.config.maxRequests;
    } else {
      const subType = (subscriptionType || 'FREE').toUpperCase();
      const keysInOrder: Array<keyof RateLimitConfig['subscriptionLimits']> = [
        subType as any,
        (subType + '_ANNUAL') as any,
        'FREE'
      ];
      baseLimit = this.config.subscriptionLimits.FREE;
      for (const key of keysInOrder) {
        const v = (this.config.subscriptionLimits as any)[key];
        if (typeof v === 'number' && !Number.isNaN(v)) {
          baseLimit = v;
          break;
        }
      }
    }

    // Surge: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Å–µ—Ä–≤–∏—Å surgePricing (ENV)
    try {
      if (surgePricingService.isSurgePeriod(new Date())) {
        return Math.floor(baseLimit * 0.5);
      }
    } catch {
      // ignore, –≤–µ—Ä–Ω–µ–º baseLimit
    }
    return baseLimit;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ª–∏–º–∏—Ç–∞
   */
  private async getOrCreateRateLimit(organizationId: string, windowStart: Date) {
    return await prisma.rateLimit.upsert({
      where: {
        organizationId_windowStart: {
          organizationId,
          windowStart
        }
      },
      update: {},
      create: {
        organizationId,
        requestCount: 0,
        windowStart
      }
    });
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—á–∞–ª–∞ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞
   */
  private getCurrentWindowStart(): Date {
    const now = Date.now();
    const windowStart = Math.floor(now / this.config.windowSizeMs) * this.config.windowSizeMs;
    return new Date(windowStart);
  }

  /**
   * –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
   */
  private startCleanupTimer(): void {
    this.cleanupTimer = setInterval(async () => {
      await this.cleanupOldRecords();
    }, this.config.cleanupIntervalMs);

    console.log(`üßπ –¢–∞–π–º–µ—Ä –æ—á–∏—Å—Ç–∫–∏ –∑–∞–ø—É—â–µ–Ω (–∏–Ω—Ç–µ—Ä–≤–∞–ª: ${this.config.cleanupIntervalMs}ms)`);
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –ª–∏–º–∏—Ç–æ–≤
   */
  private async cleanupOldRecords(): Promise<void> {
    try {
      const cutoffTime = new Date(Date.now() - this.config.windowSizeMs * 2); // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ä—à–µ 2 –æ–∫–æ–Ω
      
      const result = await prisma.rateLimit.deleteMany({
        where: {
          windowStart: {
            lt: cutoffTime
          }
        }
      });

      if (result.count > 0) {
        console.log(`üßπ –û—á–∏—â–µ–Ω–æ ${result.count} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –ª–∏–º–∏—Ç–æ–≤`);
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π:', error);
    }
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Rate Limiter –∏ –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
   */
  async stop(): Promise<void> {
    if (this.cleanupTimer) {
      clearInterval(this.cleanupTimer);
      this.cleanupTimer = null;
      console.log('üõë –¢–∞–π–º–µ—Ä –æ—á–∏—Å—Ç–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }

    // –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
    await this.cleanupOldRecords();
    console.log('‚úÖ Rate Limiter –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }
}

/**
 * Singleton instance –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
 */
let rateLimiterInstance: RateLimiter | null = null;

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ singleton —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Rate Limiter
 */
export function getRateLimiter(config?: Partial<RateLimitConfig>): RateLimiter {
  if (!rateLimiterInstance) {
    rateLimiterInstance = new RateLimiter(config);
  }
  return rateLimiterInstance;
}

/**
 * –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è - –ª–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
 */
export const rateLimiter = {
  get instance() {
    return getRateLimiter();
  }
};