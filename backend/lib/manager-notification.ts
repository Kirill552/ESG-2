/**
 * –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–∫–∞—Ö –Ω–∞ –¥–æ—Å—Ç—É–ø
 */

import { Logger } from "./logger";

const logger = new Logger("manager-notification");

interface TrialRequestNotificationData {
  requestId: string;
  userId: string;
  userEmail: string;
  userName: string;
  companyName: string;
  position: string;
  phone?: string;
  message: string;
  requestType: string;
  createdAt: Date;
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ
 */
export async function sendManagerNotification(requestData: TrialRequestNotificationData): Promise<boolean> {
  try {
    // –í –¥–µ–º–æ-–≤–µ—Ä—Å–∏–∏ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    logger.info("New trial request notification", {
      requestId: requestData.requestId,
      userEmail: requestData.userEmail,
      companyName: requestData.companyName,
      requestType: requestData.requestType
    });

    // TODO: –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:
    // 1. Email –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    // 2. Slack/Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    // 3. Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ admin-–ø–∞–Ω–µ–ª—å
    // 4. SMS —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞—è–≤–∫–∏)

    // –ò–º–∏—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
    await new Promise(resolve => setTimeout(resolve, 100));

    return true;

  } catch (error) {
    logger.error(
      "Failed to send manager notification",
      error instanceof Error ? error : undefined,
      {
        requestId: requestData.requestId,
        userEmail: requestData.userEmail
      }
    );

    return false;
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
 */
export async function sendEmailNotification(requestData: TrialRequestNotificationData): Promise<boolean> {
  try {
    // TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Email –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, SendGrid, Mailgun)

    const emailContent = {
      to: process.env.MANAGER_EMAIL || "manager@esg-lite.ru",
      subject: `üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø: ${requestData.companyName}`,
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h2 style="color: #1dc962;">–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ ESG-–õ–∞–π—Ç</h2>

          <div style="background: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0;">
            <h3>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—è–≤–∫–µ</h3>
            <p><strong>ID –∑–∞—è–≤–∫–∏:</strong> ${requestData.requestId}</p>
            <p><strong>–î–∞—Ç–∞:</strong> ${requestData.createdAt.toLocaleString('ru-RU')}</p>
            <p><strong>–¢–∏–ø:</strong> ${requestData.requestType}</p>
          </div>

          <div style="background: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0;">
            <h3>–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</h3>
            <p><strong>–ò–º—è:</strong> ${requestData.userName}</p>
            <p><strong>Email:</strong> ${requestData.userEmail}</p>
            <p><strong>–ö–æ–º–ø–∞–Ω–∏—è:</strong> ${requestData.companyName}</p>
            <p><strong>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</strong> ${requestData.position}</p>
            ${requestData.phone ? `<p><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> ${requestData.phone}</p>` : ''}
          </div>

          <div style="background: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0;">
            <h3>–°–æ–æ–±—â–µ–Ω–∏–µ</h3>
            <p>${requestData.message}</p>
          </div>

          <div style="text-align: center; margin: 30px 0;">
            <a href="${process.env.NEXTAUTH_URL}/admin/trial-requests/${requestData.requestId}"
               style="background: #1dc962; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; display: inline-block;">
              –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞—è–≤–∫—É
            </a>
          </div>

          <p style="color: #666; font-size: 12px; text-align: center;">
            –≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç —Å–∏—Å—Ç–µ–º—ã ESG-–õ–∞–π—Ç
          </p>
        </div>
      `
    };

    logger.info("Email notification prepared", {
      requestId: requestData.requestId,
      to: emailContent.to
    });

    // –í –ø—Ä–æ–¥–∞–∫—à–Ω–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ email
    return true;

  } catch (error) {
    logger.error(
      "Failed to send email notification",
      error instanceof Error ? error : undefined,
      {
        requestId: requestData.requestId
      }
    );

    return false;
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç Slack —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
 */
export async function sendSlackNotification(requestData: TrialRequestNotificationData): Promise<boolean> {
  try {
    // TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–æ Slack Webhook

    const slackMessage = {
      text: `üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ ESG-–õ–∞–π—Ç`,
      blocks: [
        {
          type: "header",
          text: {
            type: "plain_text",
            text: "üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø"
          }
        },
        {
          type: "section",
          fields: [
            {
              type: "mrkdwn",
              text: `*–ö–æ–º–ø–∞–Ω–∏—è:*\n${requestData.companyName}`
            },
            {
              type: "mrkdwn",
              text: `*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:*\n${requestData.userName} (${requestData.userEmail})`
            },
            {
              type: "mrkdwn",
              text: `*–¢–∏–ø –∑–∞—è–≤–∫–∏:*\n${requestData.requestType}`
            },
            {
              type: "mrkdwn",
              text: `*–î–∞—Ç–∞:*\n${requestData.createdAt.toLocaleString('ru-RU')}`
            }
          ]
        },
        {
          type: "section",
          text: {
            type: "mrkdwn",
            text: `*–°–æ–æ–±—â–µ–Ω–∏–µ:*\n${requestData.message}`
          }
        },
        {
          type: "actions",
          elements: [
            {
              type: "button",
              text: {
                type: "plain_text",
                text: "–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞—è–≤–∫—É"
              },
              url: `${process.env.NEXTAUTH_URL}/admin/trial-requests/${requestData.requestId}`,
              style: "primary"
            }
          ]
        }
      ]
    };

    logger.info("Slack notification prepared", {
      requestId: requestData.requestId,
      webhook: process.env.SLACK_WEBHOOK_URL ? "configured" : "not_configured"
    });

    // –í –ø—Ä–æ–¥–∞–∫—à–Ω–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Slack
    return true;

  } catch (error) {
    logger.error(
      "Failed to send Slack notification",
      error instanceof Error ? error : undefined,
      {
        requestId: requestData.requestId
      }
    );

    return false;
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 */
export async function notifyManagerAboutTrialRequest(requestData: TrialRequestNotificationData): Promise<void> {
  logger.info("Sending manager notifications for new trial request", {
    requestId: requestData.requestId,
    userEmail: requestData.userEmail,
    companyName: requestData.companyName
  });

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –≤–∏–¥—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
  const notifications = await Promise.allSettled([
    sendEmailNotification(requestData),
    sendSlackNotification(requestData),
    sendManagerNotification(requestData)
  ]);

  // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  notifications.forEach((result, index) => {
    const notificationType = ['email', 'slack', 'general'][index];

    if (result.status === 'fulfilled' && result.value) {
      logger.info(`${notificationType} notification sent successfully`, {
        requestId: requestData.requestId
      });
    } else {
      logger.warn(`${notificationType} notification failed`, {
        requestId: requestData.requestId,
        error: result.status === 'rejected' ? result.reason : 'unknown'
      });
    }
  });
}