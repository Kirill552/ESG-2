/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Telegram Bot API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
 */

import { prisma } from './prisma';

interface TelegramMessage {
  text: string;
  parse_mode?: 'Markdown' | 'HTML';
  disable_web_page_preview?: boolean;
}

interface TelegramNotificationOptions {
  type: 'trial_request' | 'user_error' | 'document_error' | 'system_alert' | 'security_incident';
  title: string;
  message: string;
  metadata?: Record<string, any>;
  priority?: 'low' | 'medium' | 'high' | 'urgent';
}

/**
 * Telegram Bot Service –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
 */
class TelegramBotService {
  private readonly baseUrl = 'https://api.telegram.org';

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –±–æ—Ç–∞ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
   */
  private async getAdminTelegramSettings() {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞ —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º Telegram
      const admin = await prisma.admin.findFirst({
        where: {
          role: 'SUPER_ADMIN',
          telegramBotToken: { not: null },
          telegramChatId: { not: null },
        },
        select: {
          telegramBotToken: true,
          telegramChatId: true,
          notifyTrialRequests: true,
          notifyUserErrors: true,
          notifyDocumentErrors: true,
          notifySystemAlerts: true,
        },
      });

      return admin;
    } catch (error) {
      console.error('‚ùå [Telegram] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–¥–º–∏–Ω–∞:', error);
      return null;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
   */
  private shouldSendNotification(
    adminSettings: any,
    type: TelegramNotificationOptions['type']
  ): boolean {
    if (!adminSettings) return false;

    switch (type) {
      case 'trial_request':
        return adminSettings.notifyTrialRequests ?? true;
      case 'user_error':
        return adminSettings.notifyUserErrors ?? true;
      case 'document_error':
        return adminSettings.notifyDocumentErrors ?? true;
      case 'system_alert':
      case 'security_incident':
        return adminSettings.notifySystemAlerts ?? true;
      default:
        return false;
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram (Markdown)
   */
  private formatMessage(options: TelegramNotificationOptions): string {
    const { title, message, metadata, priority } = options;

    // –≠–º–æ–¥–∑–∏ –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    const priorityEmoji = {
      low: '‚ÑπÔ∏è',
      medium: '‚ö†Ô∏è',
      high: 'üî•',
      urgent: 'üö®',
    }[priority || 'medium'];

    let formatted = `${priorityEmoji} *${title}*\n\n${message}\n`;

    // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    if (metadata && Object.keys(metadata).length > 0) {
      formatted += '\nüìã *–î–µ—Ç–∞–ª–∏:*\n';

      for (const [key, value] of Object.entries(metadata)) {
        if (value !== undefined && value !== null) {
          // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–ª—é—á (camelCase -> Readable)
          const readableKey = key
            .replace(/([A-Z])/g, ' $1')
            .replace(/^./, (str) => str.toUpperCase());

          formatted += `‚Ä¢ ${readableKey}: ${value}\n`;
        }
      }
    }

    formatted += `\nüïê ${new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })}`;

    return formatted;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
   */
  private async sendTelegramMessage(
    botToken: string,
    chatId: string,
    message: TelegramMessage
  ): Promise<boolean> {
    try {
      const url = `${this.baseUrl}/bot${botToken}/sendMessage`;

      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: chatId,
          text: message.text,
          parse_mode: message.parse_mode || 'Markdown',
          disable_web_page_preview: message.disable_web_page_preview ?? true,
        }),
      });

      const result = await response.json();

      if (!response.ok || !result.ok) {
        console.error('‚ùå [Telegram] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', result);
        return false;
      }

      console.log('‚úÖ [Telegram] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
      return true;
    } catch (error) {
      console.error('‚ùå [Telegram] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      return false;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
   */
  async sendAdminNotification(options: TelegramNotificationOptions): Promise<boolean> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∞
      const adminSettings = await this.getAdminTelegramSettings();

      if (!adminSettings) {
        console.log('‚è≠Ô∏è  [Telegram] –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É');
        return false;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      if (!this.shouldSendNotification(adminSettings, options.type)) {
        console.log(`‚è≠Ô∏è  [Telegram] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–∏–ø–∞ "${options.type}" –æ—Ç–∫–ª—é—á–µ–Ω—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö`);
        return false;
      }

      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      const formattedMessage = this.formatMessage(options);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
      const success = await this.sendTelegramMessage(
        adminSettings.telegramBotToken!,
        adminSettings.telegramChatId!,
        {
          text: formattedMessage,
          parse_mode: 'Markdown',
          disable_web_page_preview: true,
        }
      );

      return success;
    } catch (error) {
      console.error('‚ùå [Telegram] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
      return false;
    }
  }

  /**
   * –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫)
   */
  async sendTestMessage(botToken: string, chatId: string): Promise<boolean> {
    try {
      const testMessage = `‚úÖ *–¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ESG-–õ–∞–π—Ç*\n\n–í–∞—à Telegram –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!\n\n–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ:\n‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞—è–≤–∫–∞—Ö –Ω–∞ –¥–æ—Å—Ç—É–ø\n‚Ä¢ –û—à–∏–±–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∞—Ö —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏\n‚Ä¢ –°–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö\n\nüïê ${new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })}`;

      const success = await this.sendTelegramMessage(botToken, chatId, {
        text: testMessage,
        parse_mode: 'Markdown',
      });

      return success;
    } catch (error) {
      console.error('‚ùå [Telegram] –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏:', error);
      return false;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å bot token
   */
  async validateBotToken(botToken: string): Promise<{ valid: boolean; botInfo?: any }> {
    try {
      const url = `${this.baseUrl}/bot${botToken}/getMe`;

      const response = await fetch(url);
      const result = await response.json();

      if (!response.ok || !result.ok) {
        return { valid: false };
      }

      return {
        valid: true,
        botInfo: result.result,
      };
    } catch (error) {
      console.error('‚ùå [Telegram] –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞:', error);
      return { valid: false };
    }
  }
}

// Singleton —ç–∫–∑–µ–º–ø–ª—è—Ä
export const telegramBotService = new TelegramBotService();

// –≠–∫—Å–ø–æ—Ä—Ç —Ç–∏–ø–æ–≤
export type { TelegramNotificationOptions };
