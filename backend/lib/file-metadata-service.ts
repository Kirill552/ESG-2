import { Logger } from "@/lib/logger";

const logger = new Logger("file-metadata-service");

// –ú–∞–ø–ø–∏–Ω–≥ MIME —Ç–∏–ø–æ–≤ –∫ –∏–∫–æ–Ω–∫–∞–º –∏ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–º –Ω–∞–∑–≤–∞–Ω–∏—è–º
export const FILE_TYPE_METADATA = {
  'application/pdf': {
    icon: 'üìÑ',
    name: 'PDF –¥–æ–∫—É–º–µ–Ω—Ç',
    category: 'document',
    color: '#DC2626', // red-600
    bgColor: '#FEE2E2' // red-100
  },
  'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': {
    icon: 'üìä',
    name: 'Excel —Ç–∞–±–ª–∏—Ü–∞',
    category: 'spreadsheet',
    color: '#16A34A', // green-600
    bgColor: '#DCFCE7' // green-100
  },
  'application/vnd.ms-excel': {
    icon: 'üìä',
    name: 'Excel —Ç–∞–±–ª–∏—Ü–∞ (—Å—Ç–∞—Ä–∞—è)',
    category: 'spreadsheet',
    color: '#16A34A',
    bgColor: '#DCFCE7'
  },
  'text/csv': {
    icon: 'üìà',
    name: 'CSV —Ñ–∞–π–ª',
    category: 'spreadsheet',
    color: '#059669', // emerald-600
    bgColor: '#D1FAE5' // emerald-100
  },
  'application/vnd.openxmlformats-officedocument.wordprocessingml.document': {
    icon: 'üìù',
    name: 'Word –¥–æ–∫—É–º–µ–Ω—Ç',
    category: 'document',
    color: '#2563EB', // blue-600
    bgColor: '#DBEAFE' // blue-100
  },
  'application/msword': {
    icon: 'üìù',
    name: 'Word –¥–æ–∫—É–º–µ–Ω—Ç (—Å—Ç–∞—Ä—ã–π)',
    category: 'document',
    color: '#2563EB',
    bgColor: '#DBEAFE'
  },
  'image/jpeg': {
    icon: 'üñºÔ∏è',
    name: 'JPEG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
    category: 'image',
    color: '#7C3AED', // violet-600
    bgColor: '#EDE9FE' // violet-100
  },
  'image/png': {
    icon: 'üñºÔ∏è',
    name: 'PNG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
    category: 'image',
    color: '#7C3AED',
    bgColor: '#EDE9FE'
  },
  'image/gif': {
    icon: 'üéûÔ∏è',
    name: 'GIF –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
    category: 'image',
    color: '#7C3AED',
    bgColor: '#EDE9FE'
  },
  'text/plain': {
    icon: 'üìÑ',
    name: '–¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª',
    category: 'document',
    color: '#6B7280', // gray-500
    bgColor: '#F3F4F6' // gray-100
  },
  'application/vnd.openxmlformats-officedocument.presentationml.presentation': {
    icon: 'üìä',
    name: 'PowerPoint –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è',
    category: 'presentation',
    color: '#EA580C', // orange-600
    bgColor: '#FED7AA' // orange-100
  }
};

// –°—Ç–∞—Ç—É—Å—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
export const DOCUMENT_STATUS_METADATA = {
  'UPLOADED': {
    label: '–ó–∞–≥—Ä—É–∂–µ–Ω',
    color: '#6B7280', // gray-500
    bgColor: '#F3F4F6', // gray-100
    icon: '‚¨ÜÔ∏è'
  },
  'QUEUED': {
    label: '–í –æ—á–µ—Ä–µ–¥–∏',
    color: '#3B82F6', // blue-500
    bgColor: '#DBEAFE', // blue-100
    icon: 'üîÑ'
  },
  'PROCESSING': {
    label: '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è',
    color: '#F59E0B', // amber-500
    bgColor: '#FEF3C7', // amber-100
    icon: '‚è≥'
  },
  'PROCESSED': {
    label: '–û–±—Ä–∞–±–æ—Ç–∞–Ω',
    color: '#16A34A', // green-600
    bgColor: '#DCFCE7', // green-100
    icon: '‚úÖ'
  },
  'FAILED': {
    label: '–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è',
    color: '#DC2626', // red-600
    bgColor: '#FEE2E2', // red-100
    icon: '‚ùå'
  }
};

// –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
export const DOCUMENT_CATEGORY_METADATA = {
  'PRODUCTION': {
    label: '–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ',
    color: '#0EA5E9', // sky-500
    bgColor: '#E0F2FE', // sky-100
    icon: 'üè≠'
  },
  'SUPPLIERS': {
    label: '–ü–æ—Å—Ç–∞–≤—â–∏–∫–∏',
    color: '#8B5CF6', // violet-500
    bgColor: '#EDE9FE', // violet-100
    icon: 'üöõ'
  },
  'WASTE': {
    label: '–û—Ç—Ö–æ–¥—ã',
    color: '#F59E0B', // amber-500
    bgColor: '#FEF3C7', // amber-100
    icon: 'üóëÔ∏è'
  },
  'TRANSPORT': {
    label: '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç',
    color: '#06B6D4', // cyan-500
    bgColor: '#CFFAFE', // cyan-100
    icon: 'üöö'
  },
  'ENERGY': {
    label: '–≠–Ω–µ—Ä–≥–∏—è',
    color: '#EAB308', // yellow-500
    bgColor: '#FEF9C3', // yellow-100
    icon: '‚ö°'
  },
  'OTHER': {
    label: '–î—Ä—É–≥–æ–µ',
    color: '#6B7280', // gray-500
    bgColor: '#F3F4F6', // gray-100
    icon: 'üìã'
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
export function formatFileSize(bytes: number): string {
  if (bytes === 0) return '0 –ë';

  const k = 1024;
  const sizes = ['–ë', '–ö–ë', '–ú–ë', '–ì–ë'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));

  return `${parseFloat((bytes / Math.pow(k, i)).toFixed(1))} ${sizes[i]}`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
export function getFileTypeMetadata(mimeType: string) {
  return FILE_TYPE_METADATA[mimeType as keyof typeof FILE_TYPE_METADATA] || {
    icon: 'üìÑ',
    name: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∞–π–ª',
    category: 'unknown',
    color: '#6B7280',
    bgColor: '#F3F4F6'
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–∞
export function getStatusMetadata(status: string) {
  return DOCUMENT_STATUS_METADATA[status as keyof typeof DOCUMENT_STATUS_METADATA] || {
    label: status,
    color: '#6B7280',
    bgColor: '#F3F4F6',
    icon: '‚ùì'
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
export function getCategoryMetadata(category: string) {
  return DOCUMENT_CATEGORY_METADATA[category as keyof typeof DOCUMENT_CATEGORY_METADATA] || {
    label: category,
    color: '#6B7280',
    bgColor: '#F3F4F6',
    icon: 'üìã'
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
export function enrichDocumentWithMetadata(document: any) {
  const fileTypeMetadata = getFileTypeMetadata(document.fileType);
  const statusMetadata = getStatusMetadata(document.status);
  const categoryMetadata = getCategoryMetadata(document.category);

  // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ ocrData –µ—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç"
  let transportData = null;
  if (document.category === 'TRANSPORT' && document.ocrData) {
    const ocrData = typeof document.ocrData === 'string'
      ? JSON.parse(document.ocrData)
      : document.ocrData;

    if (ocrData.transportData) {
      transportData = ocrData.transportData;
    }
  }

  return {
    ...document,
    fileSize: typeof document.fileSize === 'number' ? document.fileSize : parseInt(document.fileSize),
    formattedFileSize: formatFileSize(document.fileSize),
    fileTypeMetadata,
    statusMetadata,
    categoryMetadata,
    // –î–æ–±–∞–≤–ª—è–µ–º —É–¥–æ–±–Ω—ã–µ –ø–æ–ª—è –¥–ª—è UI
    displayName: document.originalName || document.fileName,
    isProcessing: document.status === 'PROCESSING',
    hasError: document.status === 'FAILED',
    isCompleted: document.status === 'PROCESSED',
    progressPercent: document.processingProgress || 0,
    // –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ TRANSPORT)
    transportData: transportData
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
export function getAvailableFilters() {
  return {
    statuses: Object.entries(DOCUMENT_STATUS_METADATA).map(([key, value]) => ({
      value: key,
      label: value.label,
      icon: value.icon
    })),
    categories: Object.entries(DOCUMENT_CATEGORY_METADATA).map(([key, value]) => ({
      value: key,
      label: value.label,
      icon: value.icon
    }))
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
export function validateSortField(field: string): boolean {
  const allowedFields = ['fileName', 'originalName', 'fileSize', 'fileType', 'status', 'category', 'createdAt', 'updatedAt', 'processingProgress'];
  return allowedFields.includes(field);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
export function getSortFieldLabel(field: string): string {
  const labels: Record<string, string> = {
    'fileName': '–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞',
    'originalName': '–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ',
    'fileSize': '–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞',
    'fileType': '–¢–∏–ø —Ñ–∞–π–ª–∞',
    'status': '–°—Ç–∞—Ç—É—Å',
    'category': '–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
    'createdAt': '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è',
    'updatedAt': '–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è',
    'processingProgress': '–ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏'
  };

  return labels[field] || field;
}