/**
 * –°–µ—Ä–≤–∏—Å –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –Ω–æ—á–Ω—É—é –∞–≥—Ä–µ–≥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—ã–±—Ä–æ—Å–∞–º, —Ä–∞—Å—á–µ—Ç —Ç—Ä–µ–Ω–¥–æ–≤ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –¥–∞—à–±–æ—Ä–¥–∞
 */

import { prisma } from '@/lib/prisma';
import { DEMO_ANALYTICS, DEMO_STATS } from './demo-data-seeder';
import { getUserMode } from './user-mode-utils';

interface AggregationResult {
  organizationId: string;
  period: string;
  totalEmissions: number;
  scope1Emissions: number;
  scope2Emissions: number;
  scope3Emissions: number;
  documentsCount: number;
  reportsCount: number;
  complianceScore: number;
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
 */
export async function aggregateOrganizationData(
  organizationId: string,
  period: string = new Date().getFullYear().toString()
): Promise<AggregationResult> {

  try {
    // –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
    const reports = await prisma.report.findMany({
      where: {
        organizationId,
        period
      },
      include: {
        organization: {
          include: {
            user: true
          }
        }
      }
    });

    // –ü–æ–ª—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
    const documents = await prisma.document.findMany({
      where: {
        user: {
          organization: {
            id: organizationId
          }
        },
        createdAt: {
          gte: new Date(`${period}-01-01`),
          lte: new Date(`${period}-12-31T23:59:59`)
        }
      }
    });

    const processedDocuments = documents.filter(d => d.status === 'PROCESSED');
    const readyReports = reports.filter(r => r.status === 'READY');

    // –†–∞—Å—á–µ—Ç –≤—ã–±—Ä–æ—Å–æ–≤
    const totalEmissions = readyReports.reduce((sum, r) => sum + (r.totalEmissions || 0), 0);
    const scope1Emissions = Math.round(totalEmissions * 0.4);
    const scope2Emissions = Math.round(totalEmissions * 0.6);
    const scope3Emissions = 0; // –ü–æ–∫–∞ –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ–º

    // –†–∞—Å—á–µ—Ç –∫–æ–º–ø–ª—ñ–∞–Ω—Å–∞
    const complianceScore = calculateComplianceScore(reports, processedDocuments);

    const result: AggregationResult = {
      organizationId,
      period,
      totalEmissions,
      scope1Emissions,
      scope2Emissions,
      scope3Emissions,
      documentsCount: processedDocuments.length,
      reportsCount: readyReports.length,
      complianceScore
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
    await saveReportingSummary(result);

    return result;

  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ ${organizationId}:`, error);
    throw error;
  }
}

/**
 * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ ReportingSummary
 */
async function saveReportingSummary(data: AggregationResult): Promise<void> {

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º –≤—ã–±—Ä–æ—Å–æ–≤
  const emissionSources = {
    energy: Math.round(data.totalEmissions * 0.45),
    transport: Math.round(data.totalEmissions * 0.25),
    production: Math.round(data.totalEmissions * 0.20),
    waste: Math.round(data.totalEmissions * 0.07),
    other: Math.round(data.totalEmissions * 0.03)
  };

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–µ—Å—è—á–Ω—É—é —Ä–∞–∑–±–∏–≤–∫—É
  const monthlyData = generateMonthlyBreakdown(data.totalEmissions, data.period);

  // –†–∞—Å—á–µ—Ç —Ç—Ä–µ–Ω–¥–æ–≤ (—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –ø–µ—Ä–∏–æ–¥–æ–º)
  const trends = await calculateTrends(data.organizationId, data.period);

  await prisma.reportingSummary.upsert({
    where: {
      organizationId_period_periodType: {
        organizationId: data.organizationId,
        period: data.period,
        periodType: 'year'
      }
    },
    create: {
      organizationId: data.organizationId,
      period: data.period,
      periodType: 'year',
      totalEmissions: data.totalEmissions,
      scope1Emissions: data.scope1Emissions,
      scope2Emissions: data.scope2Emissions,
      scope3Emissions: data.scope3Emissions,
      documentsCount: data.documentsCount,
      reportsCount: data.reportsCount,
      processedCount: data.documentsCount,
      complianceScore: data.complianceScore,
      dataQuality: calculateDataQuality(data),
      emissionsSources: emissionSources,
      trends: trends
    },
    update: {
      totalEmissions: data.totalEmissions,
      scope1Emissions: data.scope1Emissions,
      scope2Emissions: data.scope2Emissions,
      scope3Emissions: data.scope3Emissions,
      documentsCount: data.documentsCount,
      reportsCount: data.reportsCount,
      processedCount: data.documentsCount,
      complianceScore: data.complianceScore,
      dataQuality: calculateDataQuality(data),
      emissionsSources: emissionSources,
      trends: trends,
      calculatedAt: new Date(),
      updatedAt: new Date()
    }
  });
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –¥–∞—à–±–æ—Ä–¥–∞
 */
export async function updateDashboardCache(
  organizationId: string,
  cacheExpiration: number = 1 // —á–∞—Å—ã
): Promise<void> {

  try {
    // –ü–æ–ª—É—á–∞–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const summary = await prisma.reportingSummary.findFirst({
      where: {
        organizationId,
        periodType: 'year'
      },
      orderBy: { calculatedAt: 'desc' }
    });

    if (!summary) {
      console.log(`–ù–µ—Ç –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ ${organizationId}`);
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
    const recentDocuments = await prisma.document.findMany({
      where: {
        user: {
          organization: {
            id: organizationId
          }
        }
      },
      orderBy: { uploadedAt: 'desc' },
      take: 4,
      select: {
        id: true,
        filename: true,
        uploadedAt: true,
        status: true,
        fileSize: true,
        mimeType: true
      }
    });

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç—á–µ—Ç—ã
    const recentReports = await prisma.report.findMany({
      where: { organizationId },
      orderBy: { createdAt: 'desc' },
      take: 3,
      select: {
        id: true,
        name: true,
        status: true,
        createdAt: true,
        period: true
      }
    });

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º KPI –¥–∞–Ω–Ω—ã–µ
    const kpiData = [
      {
        title: '–û–±—â–∏–µ –≤—ã–±—Ä–æ—Å—ã',
        value: summary.totalEmissions,
        unit: '—Ç CO‚ÇÇ-—ç–∫–≤',
        change: summary.trends?.yearOverYear || 0,
        period: '–∫ –ø—Ä–æ—à–ª–æ–º—É –≥–æ–¥—É',
        icon: 'Leaf',
        color: 'green'
      },
      {
        title: '–î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ',
        value: summary.documentsCount,
        unit: '—Ñ–∞–π–ª–æ–≤',
        change: summary.trends?.documentsGrowth || 0,
        period: '–∑–∞ –≥–æ–¥',
        icon: 'FileText',
        color: 'blue'
      },
      {
        title: '–ì–æ—Ç–æ–≤—ã—Ö –æ—Ç—á–µ—Ç–æ–≤',
        value: summary.reportsCount,
        unit: '–æ—Ç—á–µ—Ç–∞',
        change: summary.trends?.reportsGrowth || 0,
        period: '–∑–∞ –≥–æ–¥',
        icon: 'FileCheck',
        color: 'purple'
      },
      {
        title: '–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ 296-–§–ó',
        value: Math.round(summary.complianceScore),
        unit: '%',
        change: 0,
        period: '—Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å',
        icon: 'Shield',
        color: 'orange'
      }
    ];

    // –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    const progressData = {
      dataCollection: {
        label: '–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö',
        percentage: Math.min(95, summary.documentsCount * 5),
        color: summary.documentsCount > 10 ? 'green' : 'blue'
      },
      documentProcessing: {
        label: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤',
        percentage: Math.min(95, summary.processedCount * 6),
        color: summary.processedCount > 8 ? 'green' : 'blue'
      },
      reportGeneration: {
        label: '–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤',
        percentage: Math.min(95, summary.reportsCount * 20),
        color: summary.reportsCount > 2 ? 'green' : 'orange'
      }
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
    const expiresAt = new Date();
    expiresAt.setHours(expiresAt.getHours() + cacheExpiration);

    await prisma.dashboardCache.upsert({
      where: { organizationId },
      create: {
        organizationId,
        kpiData,
        recentData: {
          documents: recentDocuments,
          reports: recentReports
        },
        progressData,
        complianceData: {
          score: summary.complianceScore,
          status: summary.complianceScore > 80 ? '–ü–æ–ª–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ' : '–ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ'
        },
        analyticsData: {
          emissionsSources: summary.emissionsSources,
          trends: summary.trends
        },
        expiresAt
      },
      update: {
        kpiData,
        recentData: {
          documents: recentDocuments,
          reports: recentReports
        },
        progressData,
        complianceData: {
          score: summary.complianceScore,
          status: summary.complianceScore > 80 ? '–ü–æ–ª–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ' : '–ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ'
        },
        analyticsData: {
          emissionsSources: summary.emissionsSources,
          trends: summary.trends
        },
        cachedAt: new Date(),
        expiresAt,
        updatedAt: new Date()
      }
    });

  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –¥–∞—à–±–æ—Ä–¥–∞ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ ${organizationId}:`, error);
    throw error;
  }
}

/**
 * –ù–æ—á–Ω–∞—è –∑–∞–¥–∞—á–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
 */
export async function runNightlyAggregation(): Promise<void> {
  console.log('üåô –ó–∞–ø—É—Å–∫ –Ω–æ—á–Ω–æ–π –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö...');

  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    const organizations = await prisma.organization.findMany({
      where: {
        isBlocked: false
      },
      select: { id: true, name: true }
    });

    const currentYear = new Date().getFullYear().toString();
    let successCount = 0;
    let errorCount = 0;

    for (const org of organizations) {
      try {
        await aggregateOrganizationData(org.id, currentYear);
        await updateDashboardCache(org.id, 24); // –∫—ç—à –Ω–∞ 24 —á–∞—Å–∞
        successCount++;
        console.log(`‚úÖ –ê–≥—Ä–µ–≥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è ${org.name}`);
      } catch (error) {
        errorCount++;
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –¥–ª—è ${org.name}:`, error);
      }
    }

    console.log(`üéØ –ù–æ—á–Ω–∞—è –∞–≥—Ä–µ–≥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —É—Å–ø–µ—à–Ω–æ ${successCount}, –æ—à–∏–±–æ–∫ ${errorCount}`);

  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –Ω–æ—á–Ω–æ–π –∞–≥—Ä–µ–≥–∞—Ü–∏–∏:', error);
    throw error;
  }
}

// === –£–¢–ò–õ–ò–¢–´ ===

function calculateComplianceScore(reports: any[], documents: any[]): number {
  let score = 0;

  // –ë–∞–∑–æ–≤—ã–µ –±–∞–ª–ª—ã –∑–∞ –æ—Ç—á–µ—Ç—ã
  const readyReports = reports.filter(r => r.status === 'READY').length;
  if (readyReports > 0) score += 40;

  // –ë–∞–ª–ª—ã –∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ã
  score += Math.min(30, documents.length * 3);

  // –ë–∞–ª–ª—ã –∑–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å
  const currentYear = new Date().getFullYear().toString();
  const currentYearReports = reports.filter(r => r.period === currentYear && r.status === 'READY');
  if (currentYearReports.length > 0) score += 30;

  return Math.min(100, score);
}

function calculateDataQuality(data: AggregationResult): number {
  let quality = 50; // –±–∞–∑–æ–≤–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ

  if (data.documentsCount >= 5) quality += 20;
  if (data.reportsCount >= 1) quality += 20;
  if (data.totalEmissions > 0) quality += 10;

  return Math.min(100, quality);
}

function generateMonthlyBreakdown(totalEmissions: number, year: string) {
  const months = ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12'];

  return months.map(month => ({
    period: `${year}-${month}`,
    value: Math.round(totalEmissions / 12 * (0.8 + Math.random() * 0.4)),
    scope1: Math.round(totalEmissions / 12 * 0.4 * (0.8 + Math.random() * 0.4)),
    scope2: Math.round(totalEmissions / 12 * 0.6 * (0.8 + Math.random() * 0.4)),
    scope3: 0
  }));
}

async function calculateTrends(organizationId: string, currentPeriod: string) {
  const previousPeriod = (parseInt(currentPeriod) - 1).toString();

  const previousSummary = await prisma.reportingSummary.findFirst({
    where: {
      organizationId,
      period: previousPeriod,
      periodType: 'year'
    }
  });

  if (!previousSummary) {
    return {
      yearOverYear: 0,
      documentsGrowth: 0,
      reportsGrowth: 0
    };
  }

  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
  const currentSummary = await prisma.reportingSummary.findFirst({
    where: {
      organizationId,
      period: currentPeriod,
      periodType: 'year'
    }
  });

  if (!currentSummary) {
    return {
      yearOverYear: 0,
      documentsGrowth: 0,
      reportsGrowth: 0
    };
  }

  return {
    yearOverYear: calculatePercentageChange(previousSummary.totalEmissions, currentSummary.totalEmissions),
    documentsGrowth: calculatePercentageChange(previousSummary.documentsCount, currentSummary.documentsCount),
    reportsGrowth: calculatePercentageChange(previousSummary.reportsCount, currentSummary.reportsCount)
  };
}

function calculatePercentageChange(previous: number, current: number): number {
  if (previous === 0) return current > 0 ? 100 : 0;
  return Number(((current - previous) / previous * 100).toFixed(1));
}