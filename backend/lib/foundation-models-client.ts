/**
 * Foundation Models API –∫–ª–∏–µ–Ω—Ç —á–µ—Ä–µ–∑ OpenAI SDK
 * –°–æ–≤–º–µ—Å—Ç–∏–º—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∏ OCR –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
 */

import 'dotenv/config';
import OpenAI from 'openai';

export interface FoundationModelsConfig {
  apiKey?: string;
  baseUrl?: string;
  defaultModel?: string;
}

export interface ExtractionResult {
  extractedData: any;
  confidence: number;
}

export interface ClassificationResult {
  documentType: string;
  confidence: number;
}

export class FoundationModelsClient {
  private client: OpenAI;
  private defaultModel: string;

  constructor(config?: Partial<FoundationModelsConfig>) {
    // –ß–∏—Ç–∞–µ–º –∏–∑ ENV —Å fallback –Ω–∞ –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    const apiKey = config?.apiKey || process.env.FOUNDATION_MODELS_API_KEY;
    const baseUrl = config?.baseUrl || process.env.FOUNDATION_MODELS_BASE_URL || 'https://foundation-models.api.cloud.ru/v1';
    const defaultModel = config?.defaultModel || process.env.FOUNDATION_MODELS_DEFAULT_MODEL || 'GigaChat/GigaChat-2-Max';

    if (!apiKey) {
      throw new Error('FOUNDATION_MODELS_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }

    this.client = new OpenAI({
      apiKey,
      baseURL: baseUrl
    });
    this.defaultModel = defaultModel;
  }

  /**
   * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ—à–∏–±–∫–∏ OCR –≤ —Ç–µ–∫—Å—Ç–µ
   */
  async fixOcrErrors(ocrText: string): Promise<string> {
    console.log('üîß Foundation Models: –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ OCR...');
    
    try {
      const response = await this.client.chat.completions.create({
        model: this.defaultModel,
        messages: [
          {
            role: 'system',
            content: '–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é –æ—à–∏–±–æ–∫ OCR –≤ —Ä—É—Å—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö. –ò—Å–ø—Ä–∞–≤—å –æ—à–∏–±–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è—è —á–∏—Å–ª–∞ –∏ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è —Ç–æ—á–Ω–æ.'
          },
          {
            role: 'user',
            content: `–ò—Å–ø—Ä–∞–≤—å –æ—à–∏–±–∫–∏ OCR –≤ —ç—Ç–æ–º —Ç–µ–∫—Å—Ç–µ, —Å–æ—Ö—Ä–∞–Ω–∏ –≤—Å–µ —á–∏—Å–ª–∞ –∏ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è (–∫–í—Ç¬∑—á, –ì–∫–∞–ª, –º¬≥, –ª, –∫–º, —Ç):\n\n${ocrText}`
          }
        ],
        max_tokens: Math.min(ocrText.length * 2, 2000),
        temperature: 0.1 // –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
      });

      const fixedText = response.choices[0]?.message?.content || ocrText;
      console.log('‚úÖ Foundation Models: OCR –æ—à–∏–±–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã');
      return fixedText;
    } catch (error) {
      console.error('‚ùå Foundation Models: –æ—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è OCR:', error);
      return ocrText;
    }
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞
   */
  async extractEnergyData(text: string): Promise<ExtractionResult> {
    console.log('üìä Foundation Models: –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...');
    
    try {
      const response = await this.client.chat.completions.create({
        model: this.defaultModel,
        messages: [
          {
            role: 'system',
            content: `–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—é —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. 
            –ò–∑–≤–ª–µ–∫–∞–π –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
            {
              "electricity": [{"value": —á–∏—Å–ª–æ, "unit": "–∫–í—Ç¬∑—á", "period": "–ø–µ—Ä–∏–æ–¥"}],
              "gas": [{"value": —á–∏—Å–ª–æ, "unit": "–º¬≥", "period": "–ø–µ—Ä–∏–æ–¥"}],
              "fuel": [{"value": —á–∏—Å–ª–æ, "unit": "–ª", "type": "—Ç–∏–ø —Ç–æ–ø–ª–∏–≤–∞"}],
              "transport": [{"value": —á–∏—Å–ª–æ, "unit": "–∫–º", "type": "—Ç–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞"}],
              "heat": [{"value": —á–∏—Å–ª–æ, "unit": "–ì–∫–∞–ª", "period": "–ø–µ—Ä–∏–æ–¥"}]
            }`
          },
          {
            role: 'user',
            content: `–ò–∑–≤–ª–µ–∫–∏ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —ç—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:\n\n${text}`
          }
        ],
        max_tokens: 1500,
        temperature: 0.2
      });

      const content = response.choices[0]?.message?.content || '{}';
      
      // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
      const jsonMatch = content.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        const extractedData = JSON.parse(jsonMatch[0]);
        
        // –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        const totalItems = Object.values(extractedData).reduce((sum: number, arr: any) => 
          sum + (Array.isArray(arr) ? arr.length : 0), 0);
        const confidence = Math.min(totalItems * 0.2 + 0.3, 0.9);
        
        console.log('‚úÖ Foundation Models: –¥–∞–Ω–Ω—ã–µ –∏–∑–≤–ª–µ—á–µ–Ω—ã');
        return { extractedData, confidence };
      }
      
      return { extractedData: {}, confidence: 0.1 };
    } catch (error) {
      console.error('‚ùå Foundation Models: –æ—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
      return { extractedData: {}, confidence: 0 };
    }
  }

  /**
   * –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞
   */
  async classifyDocument(text: string): Promise<ClassificationResult> {
    console.log('üè∑Ô∏è Foundation Models: –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞...');
    
    try {
      const response = await this.client.chat.completions.create({
        model: this.defaultModel,
        messages: [
          {
            role: 'system',
            content: '–û–ø—Ä–µ–¥–µ–ª–∏ —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞. –û—Ç–≤–µ—á–∞–π –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: —Å—á–µ—Ç, –Ω–∞–∫–ª–∞–¥–Ω–∞—è, –∞–∫—Ç, —Å–ø—Ä–∞–≤–∫–∞, –¥–æ–≥–æ–≤–æ—Ä, –æ—Ç—á–µ—Ç, –∏–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ.'
          },
          {
            role: 'user',
            content: `–û–ø—Ä–µ–¥–µ–ª–∏ —Ç–∏–ø —ç—Ç–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞:\n\n${text.substring(0, 500)}...`
          }
        ],
        max_tokens: 50,
        temperature: 0.1
      });

      const content = response.choices[0]?.message?.content?.toLowerCase().trim() || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –∫–∞–∫ —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞
      const documentType = content.split(/\s+/)[0];
      
      // –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
      const knownTypes = ['—Å—á–µ—Ç', '–Ω–∞–∫–ª–∞–¥–Ω–∞—è', '–∞–∫—Ç', '—Å–ø—Ä–∞–≤–∫–∞', '–¥–æ–≥–æ–≤–æ—Ä', '–æ—Ç—á–µ—Ç'];
      const confidence = knownTypes.includes(documentType) ? 0.8 : 0.3;
      
      console.log('‚úÖ Foundation Models: –¥–æ–∫—É–º–µ–Ω—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω');
      return { documentType, confidence };
    } catch (error) {
      console.error('‚ùå Foundation Models: –æ—à–∏–±–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
      return { documentType: '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', confidence: 0 };
    }
  }

  /**
   * –°–ª–æ–∂–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
   */
  async complexAnalysis(text: string, task: string): Promise<string> {
    console.log('üß† Foundation Models: —Å–ª–æ–∂–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞...');
    
    try {
      const response = await this.client.chat.completions.create({
        model: this.defaultModel,
        messages: [
          {
            role: 'system',
            content: '–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏—Ö –∏ —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –ü—Ä–æ–≤–æ–¥–∏ –≥–ª—É–±–æ–∫–∏–π —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑.'
          },
          {
            role: 'user',
            content: `${task}\n\n–¢–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞:\n${text}`
          }
        ],
        max_tokens: 2000,
        temperature: 0.3
      });

      const result = response.choices[0]?.message?.content || '';
      console.log('‚úÖ Foundation Models: —Å–ª–æ–∂–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω');
      return result;
    } catch (error) {
      console.error('‚ùå Foundation Models: –æ—à–∏–±–∫–∞ —Å–ª–æ–∂–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:', error);
      return '';
    }
  }

  /**
   * –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ chat completion
   */
  async chatCompletion(messages: OpenAI.Chat.Completions.ChatCompletionMessageParam[], options?: {
    model?: string;
    max_tokens?: number;
    temperature?: number;
  }): Promise<OpenAI.Chat.Completions.ChatCompletion> {
    return await this.client.chat.completions.create({
      model: options?.model || this.defaultModel,
      messages,
      max_tokens: options?.max_tokens || 1000,
      temperature: options?.temperature || 0.7
    });
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ –∫–ª–∏–µ–Ω—Ç–∞
   */
  getStatus(): {
    apiKey: string;
    baseUrl: string;
    defaultModel: string;
  } {
    return {
      apiKey: this.client.apiKey ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
      baseUrl: this.client.baseURL || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
      defaultModel: this.defaultModel
    };
  }
}