/**
 * Foundation Models API –∫–ª–∏–µ–Ω—Ç —á–µ—Ä–µ–∑ OpenAI SDK
 * –°–æ–≤–º–µ—Å—Ç–∏–º—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∏ OCR –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
 */

import 'dotenv/config';
import OpenAI from 'openai';

export interface FoundationModelsConfig {
  apiKey?: string;
  baseUrl?: string;
  defaultModel?: string;
}

export interface ExtractionResult {
  extractedData: any;
  confidence: number;
}

export interface ClassificationResult {
  documentType: string;
  confidence: number;
}

export class FoundationModelsClient {
  private client: OpenAI;
  private defaultModel: string;

  constructor(config?: Partial<FoundationModelsConfig>) {
    // –ß–∏—Ç–∞–µ–º –∏–∑ ENV —Å fallback –Ω–∞ –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    const apiKey = config?.apiKey || process.env.FOUNDATION_MODELS_API_KEY;
    const baseUrl = config?.baseUrl || process.env.FOUNDATION_MODELS_BASE_URL || 'https://foundation-models.api.cloud.ru/v1';
    const defaultModel = config?.defaultModel || process.env.FOUNDATION_MODELS_DEFAULT_MODEL || 'GigaChat/GigaChat-2-Max';

    if (!apiKey) {
      throw new Error('FOUNDATION_MODELS_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }

    this.client = new OpenAI({
      apiKey,
      baseURL: baseUrl
    });
    this.defaultModel = defaultModel;
  }

  /**
   * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ—à–∏–±–∫–∏ OCR –≤ —Ç–µ–∫—Å—Ç–µ
   */
  async fixOcrErrors(ocrText: string): Promise<string> {
    console.log('üîß Foundation Models: –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ OCR...');
    
    try {
      const response = await this.client.chat.completions.create({
        model: this.defaultModel,
        messages: [
          {
            role: 'system',
            content: '–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é –æ—à–∏–±–æ–∫ OCR –≤ —Ä—É—Å—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö. –ò—Å–ø—Ä–∞–≤—å –æ—à–∏–±–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è—è —á–∏—Å–ª–∞ –∏ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è —Ç–æ—á–Ω–æ.'
          },
          {
            role: 'user',
            content: `–ò—Å–ø—Ä–∞–≤—å –æ—à–∏–±–∫–∏ OCR –≤ —ç—Ç–æ–º —Ç–µ–∫—Å—Ç–µ, —Å–æ—Ö—Ä–∞–Ω–∏ –≤—Å–µ —á–∏—Å–ª–∞ –∏ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è (–∫–í—Ç¬∑—á, –ì–∫–∞–ª, –º¬≥, –ª, –∫–º, —Ç):\n\n${ocrText}`
          }
        ],
        max_tokens: Math.min(ocrText.length * 2, 2000),
        temperature: 0.1 // –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
      });

      const fixedText = response.choices[0]?.message?.content || ocrText;
      console.log('‚úÖ Foundation Models: OCR –æ—à–∏–±–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã');
      return fixedText;
    } catch (error) {
      console.error('‚ùå Foundation Models: –æ—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è OCR:', error);
      return ocrText;
    }
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –ü—Ä–∏–∫–∞–∑—É 371
   */
  async extractEnergyData(text: string): Promise<ExtractionResult> {
    console.log('üìä Foundation Models: –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –ü—Ä–∏–∫–∞–∑—É –ú–∏–Ω–ø—Ä–∏—Ä–æ–¥—ã 371...');

    try {
      const response = await this.client.chat.completions.create({
        model: this.defaultModel,
        messages: [
          {
            role: 'system',
            content: `–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—é –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –≤—ã–±—Ä–æ—Å–æ–≤ –ø–∞—Ä–Ω–∏–∫–æ–≤—ã—Ö –≥–∞–∑–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ –ü—Ä–∏–∫–∞–∑—É –ú–∏–Ω–ø—Ä–∏—Ä–æ–¥—ã –†–§ –æ—Ç 27.05.2022 N 371.

–ò–∑–≤–ª–µ–∫–∞–π –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
{
  "fuel": [
    {"type": "–±–µ–Ω–∑–∏–Ω"|"–¥–∏–∑–µ–ª—å"|"–ø—Ä–∏—Ä–æ–¥–Ω—ã–π –≥–∞–∑"|"–º–∞–∑—É—Ç"|"—É–≥–æ–ª—å"|"–∫–µ—Ä–æ—Å–∏–Ω"|"–∫–æ–∫—Å", "value": —á–∏—Å–ª–æ, "unit": "–ª"|"—Ç"|"–º¬≥"|"—Ç—ã—Å. –º¬≥"}
  ],
  "electricity": [
    {"value": —á–∏—Å–ª–æ, "unit": "–∫–í—Ç¬∑—á"|"–ú–í—Ç¬∑—á", "period": "–ø–µ—Ä–∏–æ–¥ –µ—Å–ª–∏ –µ—Å—Ç—å"}
  ],
  "heat": [
    {"value": —á–∏—Å–ª–æ, "unit": "–ì–∫–∞–ª", "period": "–ø–µ—Ä–∏–æ–¥ –µ—Å–ª–∏ –µ—Å—Ç—å"}
  ]
}

–í–ê–ñ–ù–û:
- –¢–æ—á–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–π –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è: –ª (–ª–∏—Ç—Ä—ã), —Ç (—Ç–æ–Ω–Ω—ã), –º¬≥ (–∫—É–±–æ–º–µ—Ç—Ä—ã), –∫–í—Ç¬∑—á (–∫–∏–ª–æ–≤–∞—Ç—Ç-—á–∞—Å—ã), –ì–∫–∞–ª (–≥–∏–≥–∞–∫–∞–ª–æ—Ä–∏–∏)
- –†–∞–∑–ª–∏—á–∞–π –≤–∏–¥—ã —Ç–æ–ø–ª–∏–≤–∞: –±–µ–Ω–∑–∏–Ω, –¥–∏–∑–µ–ª—å, –ø—Ä–∏—Ä–æ–¥–Ω—ã–π –≥–∞–∑, —É–≥–æ–ª—å, –º–∞–∑—É—Ç
- –ò–∑–≤–ª–µ–∫–∞–π –¢–û–õ–¨–ö–û —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –µ–¥–∏–Ω–∏—Ü–∞–º–∏`
          },
          {
            role: 'user',
            content: `–ò–∑–≤–ª–µ–∫–∏ –ò–°–•–û–î–ù–´–ï –î–ê–ù–ù–´–ï –û –†–ê–°–•–û–î–ï –†–ï–°–£–†–°–û–í (–ù–ï –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —ç–º–∏—Å—Å–∏–∏!):

–ò–©–ï–ú:
- –†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –µ–¥–∏–Ω–∏—Ü—ã (–ª, —Ç, –º¬≥, —Ç—ã—Å. –º¬≥)
- –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –µ–¥–∏–Ω–∏—Ü—ã (–∫–í—Ç¬∑—á, –ú–í—Ç¬∑—á, –ì–∫–∞–ª)
- –ü–µ—Ä–∏–æ–¥ –æ—Ç—á–µ—Ç–∞ (–≥–æ–¥, –∫–≤–∞—Ä—Ç–∞–ª, –º–µ—Å—è—Ü)
- –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞/—Ñ–∏–ª–∏–∞–ª–∞ (–∫–æ—Ç–µ–ª—å–Ω–∞—è, —Ü–µ—Ö, –∏ —Ç.–¥.)

–ù–ï –∏–∑–≤–ª–µ–∫–∞–π:
- EF, OF, k, NCV - –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã (–æ–Ω–∏ —É–∂–µ –µ—Å—Ç—å –≤ —Å–∏—Å—Ç–µ–º–µ!)
- –í—ã–±—Ä–æ—Å—ã CO‚ÇÇ, CO‚ÇÇ-—ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç - —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–æ–≤
- –ò–ù–ù, –û–ì–†–ù, –ö–ü–ü - —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏

–ü–†–ò–ú–ï–†–´ –ü–†–ê–í–ò–õ–¨–ù–´–• –î–ê–ù–ù–´–•:
"–†–∞—Å—Ö–æ–¥ –ø—Ä–∏—Ä–æ–¥–Ω–æ–≥–æ –≥–∞–∑–∞: 27855 —Ç—ã—Å. –º¬≥"
"–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –¥–∏–∑—Ç–æ–ø–ª–∏–≤–∞: 5000 –ª"
"–ò–∑—Ä–∞—Å—Ö–æ–¥–æ–≤–∞–Ω–æ –º–∞–∑—É—Ç–∞ –ú40: 150 —Ç"
"–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è: 50000 –∫–í—Ç¬∑—á"
"–¢–µ–ø–ª–æ–≤–∞—è —ç–Ω–µ—Ä–≥–∏—è: 1200 –ì–∫–∞–ª"

–¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:\n\n${text}`
          }
        ],
        max_tokens: 1500,
        temperature: 0.2
      });

      const content = response.choices[0]?.message?.content || '{}';

      // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
      const jsonMatch = content.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        const extractedData = JSON.parse(jsonMatch[0]);

        // –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        const totalItems = Object.values(extractedData).reduce((sum: number, arr: any) =>
          sum + (Array.isArray(arr) ? arr.length : 0), 0);
        const confidence = Math.min(totalItems * 0.2 + 0.3, 0.9);

        console.log('‚úÖ Foundation Models: –¥–∞–Ω–Ω—ã–µ –∏–∑–≤–ª–µ—á–µ–Ω—ã –ø–æ –ü—Ä–∏–∫–∞–∑—É 371');
        return { extractedData, confidence };
      }

      return { extractedData: {}, confidence: 0.1 };
    } catch (error) {
      console.error('‚ùå Foundation Models: –æ—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
      return { extractedData: {}, confidence: 0 };
    }
  }

  /**
   * –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞
   */
  async classifyDocument(text: string): Promise<ClassificationResult> {
    console.log('üè∑Ô∏è Foundation Models: –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞...');
    
    try {
      const response = await this.client.chat.completions.create({
        model: this.defaultModel,
        messages: [
          {
            role: 'system',
            content: '–û–ø—Ä–µ–¥–µ–ª–∏ —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞. –û—Ç–≤–µ—á–∞–π –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: —Å—á–µ—Ç, –Ω–∞–∫–ª–∞–¥–Ω–∞—è, –∞–∫—Ç, —Å–ø—Ä–∞–≤–∫–∞, –¥–æ–≥–æ–≤–æ—Ä, –æ—Ç—á–µ—Ç, –∏–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ.'
          },
          {
            role: 'user',
            content: `–û–ø—Ä–µ–¥–µ–ª–∏ —Ç–∏–ø —ç—Ç–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞:\n\n${text.substring(0, 500)}...`
          }
        ],
        max_tokens: 50,
        temperature: 0.1
      });

      const content = response.choices[0]?.message?.content?.toLowerCase().trim() || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –∫–∞–∫ —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞
      const documentType = content.split(/\s+/)[0];
      
      // –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
      const knownTypes = ['—Å—á–µ—Ç', '–Ω–∞–∫–ª–∞–¥–Ω–∞—è', '–∞–∫—Ç', '—Å–ø—Ä–∞–≤–∫–∞', '–¥–æ–≥–æ–≤–æ—Ä', '–æ—Ç—á–µ—Ç'];
      const confidence = knownTypes.includes(documentType) ? 0.8 : 0.3;
      
      console.log('‚úÖ Foundation Models: –¥–æ–∫—É–º–µ–Ω—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω');
      return { documentType, confidence };
    } catch (error) {
      console.error('‚ùå Foundation Models: –æ—à–∏–±–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
      return { documentType: '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', confidence: 0 };
    }
  }

  /**
   * –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è ESG –æ—Ç—á—ë—Ç–Ω–æ—Å—Ç–∏
   */
  async classifyDocumentCategory(text: string): Promise<{
    category: '–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ' | '–ü–æ—Å—Ç–∞–≤—â–∏–∫–∏' | '–û—Ç—Ö–æ–¥—ã' | '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç' | '–≠–Ω–µ—Ä–≥–∏—è' | '–ü—Ä–æ—á–µ–µ';
    confidence: number;
  }> {
    console.log('üè∑Ô∏è Foundation Models: –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ESG –¥–æ–∫—É–º–µ–Ω—Ç–∞...');

    try {
      const response = await this.client.chat.completions.create({
        model: this.defaultModel,
        messages: [
          {
            role: 'system',
            content: `–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è ESG –æ—Ç—á—ë—Ç–Ω–æ—Å—Ç–∏.
            –û–ø—Ä–µ–¥–µ–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è:
            - –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ: –¥–æ–∫—É–º–µ–Ω—Ç—ã –æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö, –≤—ã–±—Ä–æ—Å–∞—Ö, –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö
            - –ü–æ—Å—Ç–∞–≤—â–∏–∫–∏: —Å—á–µ—Ç–∞, –Ω–∞–∫–ª–∞–¥–Ω—ã–µ, –¥–æ–≥–æ–≤–æ—Ä—ã —Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º–∏ —Å—ã—Ä—å—è, –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, —Ç–æ–ø–ª–∏–≤–∞
            - –û—Ç—Ö–æ–¥—ã: –¥–æ–∫—É–º–µ–Ω—Ç—ã –æ–± —É—Ç–∏–ª–∏–∑–∞—Ü–∏–∏, –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–µ, –≤—ã–≤–æ–∑–µ –æ—Ç—Ö–æ–¥–æ–≤
            - –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: –ø—É—Ç–µ–≤—ã–µ –ª–∏—Å—Ç—ã, –¥–∞–Ω–Ω—ã–µ –æ –ø–µ—Ä–µ–≤–æ–∑–∫–∞—Ö, —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
            - –≠–Ω–µ—Ä–≥–∏—è: —Å—á–µ—Ç–∞ –∑–∞ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ, –≥–∞–∑, —Ç–µ–ø–ª–æ, –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–∏ —ç–Ω–µ—Ä–≥–æ—Ä–µ—Å—É—Ä—Å–æ–≤
            - –ü—Ä–æ—á–µ–µ: –µ—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –¥—Ä—É–≥–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

            –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º.`
          },
          {
            role: 'user',
            content: `–û–ø—Ä–µ–¥–µ–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —ç—Ç–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞:\n\n${text.substring(0, 800)}...`
          }
        ],
        max_tokens: 20,
        temperature: 0.1
      });

      const content = response.choices[0]?.message?.content?.trim() || '–ü—Ä–æ—á–µ–µ';

      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ—Ç–≤–µ—Ç –∫ –æ–¥–Ω–æ–π –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
      const categoryMap: Record<string, '–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ' | '–ü–æ—Å—Ç–∞–≤—â–∏–∫–∏' | '–û—Ç—Ö–æ–¥—ã' | '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç' | '–≠–Ω–µ—Ä–≥–∏—è' | '–ü—Ä–æ—á–µ–µ'> = {
        '–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ': '–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ',
        '–ø–æ—Å—Ç–∞–≤—â–∏–∫–∏': '–ü–æ—Å—Ç–∞–≤—â–∏–∫–∏',
        '–æ—Ç—Ö–æ–¥—ã': '–û—Ç—Ö–æ–¥—ã',
        '—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç': '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç',
        '—ç–Ω–µ—Ä–≥–∏—è': '–≠–Ω–µ—Ä–≥–∏—è',
        '–ø—Ä–æ—á–µ–µ': '–ü—Ä–æ—á–µ–µ'
      };

      const normalizedContent = content.toLowerCase();
      const category = categoryMap[normalizedContent] || '–ü—Ä–æ—á–µ–µ';

      // –û—Ü–µ–Ω–∫–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
      const confidence = category !== '–ü—Ä–æ—á–µ–µ' ? 0.85 : 0.4;

      console.log(`‚úÖ Foundation Models: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ - ${category} (${confidence})`);
      return { category, confidence };
    } catch (error) {
      console.error('‚ùå Foundation Models: –æ—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
      return { category: '–ü—Ä–æ—á–µ–µ', confidence: 0 };
    }
  }

  /**
   * –°–ª–æ–∂–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
   */
  async complexAnalysis(text: string, task: string): Promise<string> {
    console.log('üß† Foundation Models: —Å–ª–æ–∂–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞...');

    try {
      const response = await this.client.chat.completions.create({
        model: this.defaultModel,
        messages: [
          {
            role: 'system',
            content: '–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏—Ö –∏ —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –ü—Ä–æ–≤–æ–¥–∏ –≥–ª—É–±–æ–∫–∏–π —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑.'
          },
          {
            role: 'user',
            content: `${task}\n\n–¢–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞:\n${text}`
          }
        ],
        max_tokens: 2000,
        temperature: 0.3
      });

      const result = response.choices[0]?.message?.content || '';
      console.log('‚úÖ Foundation Models: —Å–ª–æ–∂–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω');
      return result;
    } catch (error) {
      console.error('‚ùå Foundation Models: –æ—à–∏–±–∫–∞ —Å–ª–æ–∂–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:', error);
      return '';
    }
  }

  /**
   * –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ chat completion
   */
  async chatCompletion(messages: OpenAI.Chat.Completions.ChatCompletionMessageParam[], options?: {
    model?: string;
    max_tokens?: number;
    temperature?: number;
  }): Promise<OpenAI.Chat.Completions.ChatCompletion> {
    return await this.client.chat.completions.create({
      model: options?.model || this.defaultModel,
      messages,
      max_tokens: options?.max_tokens || 1000,
      temperature: options?.temperature || 0.7
    });
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ –∫–ª–∏–µ–Ω—Ç–∞
   */
  getStatus(): {
    apiKey: string;
    baseUrl: string;
    defaultModel: string;
  } {
    return {
      apiKey: this.client.apiKey ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
      baseUrl: this.client.baseURL || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
      defaultModel: this.defaultModel
    };
  }
}