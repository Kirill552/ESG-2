import { prisma } from './prisma';
import { notificationService, NotificationType, NotificationPriority } from './notification-service';

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è batch —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
 */
class BatchNotificationService {
  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å batch –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
   */
  async updateBatchProgress(
    documentId: string,
    success: boolean
  ): Promise<void> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç —Å batch –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
      const document = await prisma.document.findUnique({
        where: { id: documentId },
        select: {
          id: true,
          batchId: true,
          fileName: true,
          userId: true
        }
      });

      if (!document || !document.batchId) {
        // –≠—Ç–æ –æ–¥–∏–Ω–æ—á–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –±–µ–∑ batch - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        return;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –≤ batch
      const batch = await prisma.documentBatch.update({
        where: { id: document.batchId },
        data: {
          processedCount: success ? { increment: 1 } : undefined,
          failedCount: !success ? { increment: 1 } : undefined,
          pendingCount: { decrement: 1 }
        },
        include: {
          user: {
            select: {
              id: true,
              email: true,
              name: true
            }
          }
        }
      });

      console.log(`üìä Batch ${batch.id} –ø—Ä–æ–≥—Ä–µ—Å—Å: ${batch.processedCount + batch.failedCount}/${batch.totalCount}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
      const isCompleted = batch.pendingCount === 0;

      if (isCompleted && !batch.notificationSent) {
        await this.sendBatchCompletionNotification(batch);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è batch –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error);
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Ç–æ–≥–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ batch
   */
  private async sendBatchCompletionNotification(batch: any): Promise<void> {
    try {
      const totalProcessed = batch.processedCount + batch.failedCount;
      const hasErrors = batch.failedCount > 0;

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      let title: string;
      let message: string;
      let priority: NotificationPriority;

      if (batch.failedCount === 0) {
        // –í—Å–µ —É—Å–ø–µ—à–Ω–æ
        title = '–í—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã';
        message = `–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${batch.processedCount} ${this.getPluralForm(batch.processedCount, '–¥–æ–∫—É–º–µ–Ω—Ç', '–¥–æ–∫—É–º–µ–Ω—Ç–∞', '–¥–æ–∫—É–º–µ–Ω—Ç–æ–≤')}`;
        priority = NotificationPriority.LOW;
      } else if (batch.processedCount === 0) {
        // –í—Å–µ —Å –æ—à–∏–±–∫–∞–º–∏
        title = '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤';
        message = `–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å ${batch.failedCount} ${this.getPluralForm(batch.failedCount, '–¥–æ–∫—É–º–µ–Ω—Ç', '–¥–æ–∫—É–º–µ–Ω—Ç–∞', '–¥–æ–∫—É–º–µ–Ω—Ç–æ–≤')}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ñ–∞–π–ª–æ–≤.`;
        priority = NotificationPriority.HIGH;
      } else {
        // –ß–∞—Å—Ç–∏—á–Ω–æ —É—Å–ø–µ—à–Ω–æ
        title = '–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞';
        message = `–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${batch.processedCount} –∏–∑ ${batch.totalCount} ${this.getPluralForm(batch.totalCount, '–¥–æ–∫—É–º–µ–Ω—Ç–∞', '–¥–æ–∫—É–º–µ–Ω—Ç–æ–≤', '–¥–æ–∫—É–º–µ–Ω—Ç–æ–≤')}. ${batch.failedCount} —Å –æ—à–∏–±–∫–∞–º–∏.`;
        priority = NotificationPriority.MEDIUM;
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      await notificationService.sendNotification({
        userId: batch.userId,
        type: hasErrors ? NotificationType.DOCUMENT_ERROR : NotificationType.DOCUMENT_PROCESSED,
        title,
        message,
        metadata: {
          batchId: batch.id,
          totalCount: batch.totalCount,
          processedCount: batch.processedCount,
          failedCount: batch.failedCount,
          link: hasErrors ? '/documents?status=error' : '/documents',
          priority
        }
      });

      // –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
      await prisma.documentBatch.update({
        where: { id: batch.id },
        data: {
          notificationSent: true,
          completedAt: new Date()
        }
      });

      console.log(`üìß Batch —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è batch ${batch.id}`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ batch —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ–ª–∂–Ω–æ –ª–∏ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç true –µ—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –æ–¥–∏–Ω–æ—á–Ω—ã–π (–Ω–µ –≤ batch) –∏–ª–∏ batch –º–∞–ª–µ–Ω—å–∫–∏–π (1-2 –¥–æ–∫—É–º–µ–Ω—Ç–∞)
   */
  async shouldSendIndividualNotification(documentId: string): Promise<boolean> {
    try {
      const document = await prisma.document.findUnique({
        where: { id: documentId },
        select: {
          batchId: true,
          batch: {
            select: {
              totalCount: true
            }
          }
        }
      });

      // –ï—Å–ª–∏ –Ω–µ—Ç batch - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      if (!document || !document.batchId || !document.batch) {
        return true;
      }

      // –ï—Å–ª–∏ batch –º–∞–ª–µ–Ω—å–∫–∏–π (1-2 –¥–æ–∫—É–º–µ–Ω—Ç–∞) - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      if (document.batch.totalCount <= 2) {
        return true;
      }

      // –î–ª—è –±–æ–ª—å—à–∏—Ö batch (3+) - –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      return false;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–±–µ–∑–æ–ø–∞—Å–Ω—ã–π fallback)
      return true;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ–æ—Ä–º—É –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
   */
  private getPluralForm(count: number, form1: string, form2: string, form3: string): string {
    const n = Math.abs(count) % 100;
    const n1 = n % 10;

    if (n > 10 && n < 20) return form3;
    if (n1 > 1 && n1 < 5) return form2;
    if (n1 === 1) return form1;

    return form3;
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π batch –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
   */
  async createBatch(userId: string, documentCount: number): Promise<string | null> {
    try {
      // –ù–µ —Å–æ–∑–¥–∞–µ–º batch –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω—ã—Ö/–ø–∞—Ä–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫
      if (documentCount <= 2) {
        return null;
      }

      const batch = await prisma.documentBatch.create({
        data: {
          userId,
          totalCount: documentCount,
          pendingCount: documentCount,
          processedCount: 0,
          failedCount: 0
        }
      });

      console.log(`üì¶ –°–æ–∑–¥–∞–Ω batch ${batch.id} –¥–ª—è ${documentCount} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤`);
      return batch.id;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è batch:', error);
      return null;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É batch
   */
  async getBatchStats(batchId: string) {
    try {
      const batch = await prisma.documentBatch.findUnique({
        where: { id: batchId },
        select: {
          id: true,
          totalCount: true,
          processedCount: true,
          failedCount: true,
          pendingCount: true,
          notificationSent: true,
          completedAt: true,
          createdAt: true
        }
      });

      return batch;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ batch:', error);
      return null;
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton instance
export const batchNotificationService = new BatchNotificationService();