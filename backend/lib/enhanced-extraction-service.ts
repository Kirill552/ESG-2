/**
 * –£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
 * –ü–æ–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–∏–ø—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏ –ø–æ 296-–§–ó, CBAM, —É–≥–ª–µ—Ä–æ–¥–Ω–æ–º—É —Å–ª–µ–¥—É
 */

import { 
  RUSSIAN_DOCUMENT_PATTERNS, 
  RUSSIAN_EMISSION_FACTORS_2025, 
  UNIVERSAL_EXTRACTION_FIELDS,
  findDocumentPattern,
  getPriorityFields,
  FUEL_EXTRACTION_PATTERNS,
  ELECTRICITY_EXTRACTION_PATTERNS,
  GAS_HEAT_EXTRACTION_PATTERNS,
  TRANSPORT_EXTRACTION_PATTERNS,
  INDUSTRIAL_EXTRACTION_PATTERNS
} from './russian-document-patterns';

// –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤
import { processImageMultiLevel } from './multi-level-ocr-service';
import { processFileIntelligently, type ParsingResult } from './intelligent-file-processor';
import { findCanonical, getCategory, getSynonyms } from './synonym-dictionary';
import { metricsCollector, type ProcessingMetrics } from './extraction-metrics';
import * as fs from 'fs';
import * as path from 'path';

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–æ–≥ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
 */
function savePatternsLog(filename: string, data: any) {
  try {
    const logsDir = path.join(process.cwd(), 'debug_output', 'patterns_logs');
    if (!fs.existsSync(logsDir)) {
      fs.mkdirSync(logsDir, { recursive: true });
    }
    const logPath = path.join(logsDir, `${Date.now()}_${filename}.json`);
    fs.writeFileSync(logPath, JSON.stringify(data, null, 2), 'utf8');
    console.log(`üíæ –ü–∞—Ç—Ç–µ—Ä–Ω—ã –ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${logPath}`);
  } catch (error) {
    console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ª–æ–≥:', error);
  }
}

export interface ExtractedDocumentData {
  documentId: string;
  documentType: string;
  confidence: number;
  extractedFields: {
    fullText?: string;
    fuel_data?: Array<{ type: string; volume: number; unit: string }>;
    electricity_data?: { consumption_kwh: number; region?: string; tariff_type?: string };
    thermal_data?: { consumption_gcal: number; energy_type?: string };
    transport_data?: { distance_km: number; transport_type?: string; vehicle_class?: string };
    fgas_data?: Array<{ type: string; amount_kg: number; gwp: number; co2_equivalent: number }>;
    industrial_processes?: Array<{ process: string; production_tons: number; emission_factor: number; co2_kg: number }>;
    [key: string]: any; // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
  };
  emissions: {
    co2_kg: number;
    ch4_kg: number;
    n2o_kg: number;
    fgas_co2_equivalent?: number; // F-–≥–∞–∑—ã –≤ CO2-—ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–µ
    industrial_process_co2?: number; // –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
    calculation_method: string;
    confidence: number;
  };
  metadata: {
    classification_confidence: number;
    fields_extracted: number;
    fields_expected: number;
    data_quality: 'high' | 'medium' | 'low';
  };
}

/**
 * –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –∏ –ø–∞—Ä—Å–∏—Ç —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ OCR —Ç–µ–∫—Å—Ç–∞
 * –ò–°–ü–†–ê–í–õ–ï–ù–û: —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –ò–ù–ù, –ö–ü–ü –∏ –¥—Ä—É–≥–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
 */
function parseNumericValue(value: any): number {
  if (typeof value === 'number') return value;
  if (!value) return 0;
  
  let str = String(value);
  
  // –§–ò–õ–¨–¢–†: –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Ö–æ–∂–∏ –Ω–∞ –ò–ù–ù, –ö–ü–ü, —Ç–µ–ª–µ—Ñ–æ–Ω—ã –∏ –¥—Ä—É–≥–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
  if (str.length >= 10) {
    // –ò–ù–ù (10-12 —Ü–∏—Ñ—Ä), –ö–ü–ü (9 —Ü–∏—Ñ—Ä), —Ç–µ–ª–µ—Ñ–æ–Ω—ã –∏ —Ç.–¥.
    if (/^\d{9,12}$/.test(str.replace(/\D/g, ''))) {
      return 0; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–∞–∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
    }
  }
  
  // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä, —Ç–æ—á–µ–∫, –∑–∞–ø—è—Ç—ã—Ö –∏ –∑–Ω–∞–∫–æ–≤
  str = str.replace(/[^\d.,\-+]/g, '');
  
  // –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É (—Ä—É—Å—Å–∫–∞—è –ª–æ–∫–∞–ª—å)
  str = str.replace(',', '.');
  
  const num = parseFloat(str);
  
  // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô –§–ò–õ–¨–¢–†: —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è —Ç–æ–ø–ª–∏–≤–∞
  if (isFinite(num)) {
    // –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è (–±–æ–ª—å—à–µ 100,000) —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –æ—à–∏–±–∫–∞
    if (num > 100000) {
      return 0;
    }
    return num;
  }
  
  return 0;
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞
 */
function extractUnit(text: string): string {
  const units = {
    // –û—Å–Ω–æ–≤–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã
    '–ª–∏—Ç—Ä': 'l',
    '–ª': 'l', 
    '–ª.': 'l',
    '–∫–í—Ç*—á': 'kwh',
    '–∫–í—Ç¬∑—á': 'kwh',
    '–∫–≤—Ç*—á': 'kwh',
    '–º¬≥': 'm3',
    '–º3': 'm3',
    '–∫—É–±': 'm3',
    '–≥–∫–∞–ª': 'gcal',
    '–∫–º': 'km',
    '–∫–∏–ª–æ–º–µ—Ç—Ä': 'km',
    '—Ç–æ–Ω–Ω': 't',
    '–∫–≥': 'kg',
    '—Ä—É–±': 'rub',
    
    // –†–ê–°–®–ò–†–ï–ù–ù–´–ï –≠–ù–ï–†–ì–ï–¢–ò–ß–ï–°–ö–ò–ï –ï–î–ò–ù–ò–¶–´
    '–º–¥–∂': 'mj',          // –º–µ–≥–∞–¥–∂–æ—É–ª–∏
    '–ú–î–∂': 'mj',
    'mj': 'mj',
    '–∫–∫–∞–ª': 'kcal',        // –∫–∏–ª–æ–∫–∞–ª–æ—Ä–∏–∏
    '–∫–ö–∞–ª': 'kcal',
    'kcal': 'kcal',
    '–º–∫–∞–ª': 'mcal',        // –º–µ–≥–∞–∫–∞–ª–æ—Ä–∏–∏
    '–ú–∫–∞–ª': 'mcal',
    'mcal': 'mcal',
    '–≥–∫–∞–ª/—á': 'gcal_h',    // –≥–∏–≥–∞–∫–∞–ª–æ—Ä–∏–π –≤ —á–∞—Å
    '—Ç—É—Ç': 'toe',          // —Ç–æ–Ω–Ω—ã —É—Å–ª–æ–≤–Ω–æ–≥–æ —Ç–æ–ø–ª–∏–≤–∞
    '–¢–£–¢': 'toe',
    'toe': 'toe',
    
    // –≠–õ–ï–ö–¢–†–û–≠–ù–ï–†–ì–ò–Ø –†–ê–°–®–ò–†–ï–ù–ù–û
    '–º–í—Ç—á': 'mwh',        // –º–µ–≥–∞–≤–∞—Ç—Ç-—á–∞—Å
    '–ú–í—Ç—á': 'mwh',
    '–ú–í—Ç¬∑—á': 'mwh',
    'mwh': 'mwh',
    '–≥–í—Ç—á': 'gwh',        // –≥–∏–≥–∞–≤–∞—Ç—Ç-—á–∞—Å
    '–ì–í—Ç—á': 'gwh',
    'gwh': 'gwh',
    '–∫–í–ê—Ä': 'kvar',       // –∫–∏–ª–æ–≤–∞—Ä
    '–ú–í–ê—Ä': 'mvar',       // –º–µ–≥–∞–≤–∞—Ä
    
    // –ì–ê–ó –†–ê–°–®–ò–†–ï–ù–ù–Æ–ï –ï–î–ò–ù–ò–¶–´
    '–Ω–º¬≥': 'nm3',         // –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ –∫—É–±–æ–º–µ—Ç—Ä—ã
    '–ù–º¬≥': 'nm3',
    'nm3': 'nm3',
    '–º¬≥/—á': 'm3_h',        // –∫—É–±–æ–º–µ—Ç—Ä–æ–≤ –≤ —á–∞—Å
    '–º¬≥/—Å': 'm3_s',        // –∫—É–±–æ–º–µ—Ç—Ä–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É
    '—Ç—ã—Å. –º¬≥': 'tm3',     // —Ç—ã—Å—è—á –∫—É–±–æ–º–µ—Ç—Ä–æ–≤
    '–º–ª–Ω –º¬≥': 'mm3',     // –º–∏–ª–ª–∏–æ–Ω –∫—É–±–æ–º–µ—Ç—Ä–æ–≤
    
    // –ú–ê–°–°–ê –†–ê–°–®–ò–†–ï–ù–ù–û
    '–≥': 'g',              // –≥—Ä–∞–º–º—ã
    '–º–≥': 'mg',            // –º–∏–ª–ª–∏–≥—Ä–∞–º–º—ã
    '—Ç': 't',              // —Ç–æ–Ω–Ω—ã
    '–∫—Ç': 'kt',            // –∫–∏–ª–æ—Ç–æ–Ω–Ω—ã
    '–ú—Ç': 'mt',            // –º–µ–≥–∞—Ç–æ–Ω–Ω—ã
    '—Ü': 'c',              // —Ü–µ–Ω—Ç–Ω–µ—Ä—ã
    '–ø—É–¥': 'pud',          // –ø—É–¥ (—Å—Ç–∞—Ä–∞—è —Ä—É—Å—Å–∫–∞—è –µ–¥–∏–Ω–∏—Ü–∞)
    
    // –ö–û–ù–¶–ï–ù–¢–†–ê–¶–ò–Ø –ò –ü–õ–û–¢–ù–û–°–¢–¨
    '–º–≥/–º¬≥': 'mg_m3',      // –º–∏–ª–ª–∏–≥—Ä–∞–º–º –Ω–∞ –∫—É–±–æ–º–µ—Ç—Ä
    '–≥/–º¬≥': 'g_m3',        // –≥—Ä–∞–º–º –Ω–∞ –∫—É–±–æ–º–µ—Ç—Ä
    '–∫–≥/–º¬≥': 'kg_m3',      // –∫–∏–ª–æ–≥—Ä–∞–º–º –Ω–∞ –∫—É–±–æ–º–µ—Ç—Ä
    'ppm': 'ppm',           // –º–∏–ª–ª–∏–æ–Ω–Ω—ã–µ –¥–æ–ª–∏
    'ppb': 'ppb',           // –º–∏–ª–ª–∏–∞—Ä–¥–Ω—ã–µ –¥–æ–ª–∏
    '%': 'percent',         // –ø—Ä–æ—Ü–µ–Ω—Ç—ã
    '–æ–±.–ø—Ä–æ—Ü': 'vol_percent', // –æ–±—ä–µ–º–Ω—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
    
    // –î–ê–í–õ–ï–ù–ò–ï –ò –¢–ï–ú–ü–ï–†–ê–¢–£–†–ê
    '–ø–∞': 'pa',            // –ø–∞—Å–∫–∞–ª–∏
    '–ú–ø–∞': 'mpa',          // –º–µ–≥–∞–ø–∞—Å–∫–∞–ª–∏
    '–±–∞—Ä': 'bar',          // –±–∞—Ä—ã
    '–∞—Ç–º': 'atm',          // –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã
    '¬∞—Å': 'celsius',      // –≥—Ä–∞–¥—É—Å—ã –¶–µ–ª—å—Å–∏—è
    '‚ÑÉ': 'celsius',
    'k': 'kelvin',          // –ö–µ–ª—å–≤–∏–Ω
    
    // –ü–õ–û–©–ê–î–¨ –ò –û–ë–™–ï–ú
    '–º¬≤': 'm2',            // –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ –º–µ—Ç—Ä—ã
    '–∫–º¬≤': 'km2',          // –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ –∫–∏–ª–æ–º–µ—Ç—Ä—ã
    '–≥–∞': 'ha',            // –≥–µ–∫—Ç–∞—Ä—ã
    '—Å–æ—Ç–∫–∞': 'are',       // —Å–æ—Ç–∫–∏ (–∞—Ä—ã)
    '–¥–º¬≥': 'dm3',         // –¥–µ—Ü–∏–º–µ—Ç—Ä—ã –∫—É–±–∏—á–µ—Å–∫–∏–µ
    '–º–ª': 'ml',            // –º–∏–ª–ª–∏–ª–∏—Ç—Ä—ã
    
    // –°–ö–û–†–û–°–¢–¨ –ò –ü–û–¢–û–ö
    '–º/—Å': 'm_s',          // –º–µ—Ç—Ä–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É
    '–∫–º/—á': 'km_h',        // –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤ –≤ —á–∞—Å
    '—É–∑–ª–æ–≤': 'knots',       // –º–æ—Ä—Å–∫–∏–µ —É–∑–ª—ã
    '–æ–±/–º–∏–Ω': 'rpm',       // –æ–±–æ—Ä–æ—Ç—ã –≤ –º–∏–Ω—É—Ç—É
    '–º¬≥/—Å—É—Ç': 'm3_day',     // –∫—É–±–æ–º–µ—Ç—Ä–æ–≤ –≤ —Å—É—Ç–∫–∏
    
    // –≠–ú–ò–°–°–ò–ò –ò –í–´–ë–†–û–°–´ 
    '—Ç co2': 't_co2',       // —Ç–æ–Ω–Ω CO2
    '—Çco2': 't_co2',
    '–∫–≥ co2': 'kg_co2',     // –∫–∏–ª–æ–≥—Ä–∞–º–º CO2
    '–≥ co2': 'g_co2',       // –≥—Ä–∞–º–º CO2
    '—Ç co2—ç': 't_co2e',     // —Ç–æ–Ω–Ω CO2-—ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–∞
    '—Çco2—ç': 't_co2e'
  };
  
  const textLower = text.toLowerCase();
  for (const [unit, code] of Object.entries(units)) {
    if (textLower.includes(unit)) return code;
  }
  return '';
}

/**
 * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ F-–≥–∞–∑–æ–≤ –∏ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ (–∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è 296-–§–ó)
 */
function extractIndustrialProcessData(fields: Record<string, any>): {
  fgases: Array<{ type: string; amount_kg: number; gwp: number; co2_equivalent: number }>;
  industrial_processes: Array<{ process: string; production_tons: number; emission_factor: number; co2_kg: number }>;
} {
  const fgases = [];
  const industrial_processes = [];
  
  // F-–ì–ê–ó–´ (—Ö–ª–∞–¥–∞–≥–µ–Ω—Ç—ã, SF6 –∏ –¥—Ä.)
  const fgasPatterns = {
    // –•–ª–∞–¥–∞–≥–µ–Ω—Ç—ã
    'r-404a': { gwp: 3922, pattern: /(r[\-\s]?404a|r404a|—Ö–ª–∞–¥–∞–≥–µ–Ω—Ç.*404)/gi },
    'r-134a': { gwp: 1430, pattern: /(r[\-\s]?134a|r134a|—Ö–ª–∞–¥–∞–≥–µ–Ω—Ç.*134)/gi },
    'r-410a': { gwp: 2088, pattern: /(r[\-\s]?410a|r410a|—Ö–ª–∞–¥–∞–≥–µ–Ω—Ç.*410)/gi },
    'r-407c': { gwp: 1774, pattern: /(r[\-\s]?407c|r407c|—Ö–ª–∞–¥–∞–≥–µ–Ω—Ç.*407)/gi },
    'r-22': { gwp: 1810, pattern: /(r[\-\s]?22|r22|—Ö–ª–∞–¥–∞–≥–µ–Ω—Ç.*22)/gi },
    'r-507a': { gwp: 3985, pattern: /(r[\-\s]?507a|r507a|—Ö–ª–∞–¥–∞–≥–µ–Ω—Ç.*507)/gi },
    'r-32': { gwp: 675, pattern: /(r[\-\s]?32|r32|—Ö–ª–∞–¥–∞–≥–µ–Ω—Ç.*32)/gi },
    
    // SF6 –∏ –¥—Ä—É–≥–∏–µ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –≥–∞–∑—ã
    'sf6': { gwp: 22800, pattern: /(sf6|—ç–ª–µ–≥–∞–∑|–≥–µ–∫—Å–∞—Ñ—Ç–æ—Ä–∏–¥.*—Å–µ—Ä—ã)/gi },
    'nf3': { gwp: 17200, pattern: /(nf3|—Ç—Ä–∏—Ñ—Ç–æ—Ä–∏–¥.*–∞–∑–æ—Ç–∞)/gi },
    'cf4': { gwp: 7390, pattern: /(cf4|—Ç–µ—Ç—Ä–∞—Ñ—Ç–æ—Ä–º–µ—Ç–∞–Ω)/gi },
    'c2f6': { gwp: 12200, pattern: /(c2f6|–≥–µ–∫—Å–∞—Ñ—Ç–æ—Ä—ç—Ç–∞–Ω)/gi }
  };
  
  for (const [key, value] of Object.entries(fields)) {
    const keyText = `${key} ${value}`.toLowerCase();
    
    // –ü–æ–∏—Å–∫ F-–≥–∞–∑–æ–≤
    for (const [gasType, gasInfo] of Object.entries(fgasPatterns)) {
      if (gasInfo.pattern.test(keyText)) {
        const amount = parseNumericValue(value);
        if (amount > 0) {
          const co2_equivalent = amount * gasInfo.gwp;
          fgases.push({
            type: gasType.toUpperCase(),
            amount_kg: amount,
            gwp: gasInfo.gwp,
            co2_equivalent
          });
        }
      }
    }
  }
  
  // –ü–†–û–ú–´–®–õ–ï–ù–ù–´–ï –ü–†–û–¶–ï–°–°–´ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–∑ russian-document-patterns.ts
  for (const patternGroup of INDUSTRIAL_EXTRACTION_PATTERNS) {
    for (const regex of patternGroup.patterns) {
      for (const [key, value] of Object.entries(fields)) {
        const fieldText = `${key} ${value}`.toLowerCase();
        const match = regex.exec(fieldText);
        
        if (match) {
          const production = parseNumericValue(match[1]);
          if (production > 0) {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤—ã–±—Ä–æ—Å–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            let emissionFactor = 1000; // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            let processType = patternGroup.subcategory;
            
            if (patternGroup.subcategory.includes('steel')) {
              emissionFactor = 1850;
              processType = '–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ —Å—Ç–∞–ª–∏';
            } else if (patternGroup.subcategory.includes('cement')) {
              emissionFactor = 870;
              processType = '–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ —Ü–µ–º–µ–Ω—Ç–∞';
            } else if (patternGroup.subcategory.includes('aluminum')) {
              emissionFactor = 11500;
              processType = '–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –∞–ª—é–º–∏–Ω–∏—è';
            } else if (patternGroup.subcategory.includes('chemical')) {
              emissionFactor = 1900;
              processType = '–•–∏–º–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ';
            }
            
            const co2_kg = production * emissionFactor;
            industrial_processes.push({
              process: processType,
              production_tons: production,
              emission_factor: emissionFactor,
              co2_kg
            });
          }
        }
      }
    }
  }
  
  return { fgases, industrial_processes };
}

/**
 * –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–æ–ø–ª–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */
function extractFuelData(fields: Record<string, any>): Array<{
  type: string;
  volume: number;
  unit: string;
  confidence: number;
}> {
  const fuels = [];
  
  // –†–æ—Å—Å–∏–π—Å–∫–∏–µ –≤–∏–¥—ã —Ç–æ–ø–ª–∏–≤–∞ (–†–ê–°–®–ò–†–ï–ù–ù–´–ï)
  const fuelMappings = {
    // –ë–µ–Ω–∑–∏–Ω—ã
    '–∞–∏-80': '–ê–ò-80',
    '–∞–∏-92': '–ê–ò-92', 
    '–∞–∏-95': '–ê–ò-95',
    '–∞–∏-98': '–ê–ò-98',
    '–∞–∏-100': '–ê–ò-100',
    '–±–µ–Ω–∑–∏–Ω': '–ê–ò-92', // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    'gasoline': '–ê–ò-95',
    '–≥–∞–∑–æ–ª–∏–Ω': '–ê–ò-95',
    '–º–æ—Ç–æ—Ä–Ω–æ–µ —Ç–æ–ø–ª–∏–≤–æ': '–ê–ò-92',
    
    // –î–∏–∑–µ–ª—å–Ω–æ–µ —Ç–æ–ø–ª–∏–≤–æ
    '–¥—Ç': '–î–¢ –ª–µ—Ç–Ω–µ–µ',
    '–¥–∏–∑–µ–ª—å': '–î–¢ –ª–µ—Ç–Ω–µ–µ',
    'diesel': '–î–¢ –ª–µ—Ç–Ω–µ–µ',
    '–¥–∏–∑—Ç–æ–ø–ª–∏–≤–æ': '–î–¢ –ª–µ—Ç–Ω–µ–µ',
    '–¥—Ç –ª–µ—Ç–Ω–µ–µ': '–î–¢ –ª–µ—Ç–Ω–µ–µ',
    '–¥—Ç –∑–∏–º–Ω–µ–µ': '–î–¢ –∑–∏–º–Ω–µ–µ',
    '–¥—Ç –∞—Ä–∫—Ç–∏—á–µ—Å–∫–æ–µ': '–î–¢ –∞—Ä–∫—Ç–∏—á–µ—Å–∫–æ–µ',
    
    // –ì–∞–∑–æ–æ–±—Ä–∞–∑–Ω—ã–µ —Ç–æ–ø–ª–∏–≤–∞
    '–≥–∞–∑': '–ü—Ä–∏—Ä–æ–¥–Ω—ã–π –≥–∞–∑ –†–§',
    '–ø—Ä–∏—Ä–æ–¥–Ω—ã–π –≥–∞–∑': '–ü—Ä–∏—Ä–æ–¥–Ω—ã–π –≥–∞–∑ –†–§',
    '–º–µ—Ç–∞–Ω': '–ü—Ä–∏—Ä–æ–¥–Ω—ã–π –≥–∞–∑ –†–§',
    'cng': '–ü—Ä–∏—Ä–æ–¥–Ω—ã–π –≥–∞–∑ –†–§',
    '–ø—Ä–æ–ø–∞–Ω': '–°–∂–∏–∂–µ–Ω–Ω—ã–π –≥–∞–∑',
    '–±—É—Ç–∞–Ω': '–°–∂–∏–∂–µ–Ω–Ω—ã–π –≥–∞–∑',
    'lpg': '–°–∂–∏–∂–µ–Ω–Ω—ã–π –≥–∞–∑',
    '—Å–ø–±—Ç': '–°–∂–∏–∂–µ–Ω–Ω—ã–π –≥–∞–∑',
    '—Å–∂–∏–∂–µ–Ω–Ω—ã–π –≥–∞–∑': '–°–∂–∏–∂–µ–Ω–Ω—ã–π –≥–∞–∑',
    '–±–∏–æ–º–µ—Ç–∞–Ω': '–ë–∏–æ–º–µ—Ç–∞–Ω',
    '–±–∏–æ–≥–∞–∑': '–ë–∏–æ–º–µ—Ç–∞–Ω',
    
    // –ê–≤–∏–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–æ–ø–ª–∏–≤–æ
    '–∫–µ—Ä–æ—Å–∏–Ω': '–ö–µ—Ä–æ—Å–∏–Ω –∞–≤–∏–∞—Ü–∏–æ–Ω–Ω—ã–π',
    '–∞–≤–∏–∞–∫–µ—Ä–æ—Å–∏–Ω': '–ö–µ—Ä–æ—Å–∏–Ω –∞–≤–∏–∞—Ü–∏–æ–Ω–Ω—ã–π',
    'jet fuel': '–ö–µ—Ä–æ—Å–∏–Ω –∞–≤–∏–∞—Ü–∏–æ–Ω–Ω—ã–π',
    'jet a-1': '–ö–µ—Ä–æ—Å–∏–Ω –∞–≤–∏–∞—Ü–∏–æ–Ω–Ω—ã–π',
    '—Ä—Ç': '–ö–µ—Ä–æ—Å–∏–Ω –∞–≤–∏–∞—Ü–∏–æ–Ω–Ω—ã–π', // —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ–µ —Ç–æ–ø–ª–∏–≤–æ
    '—Ç—Å-1': '–ö–µ—Ä–æ—Å–∏–Ω –∞–≤–∏–∞—Ü–∏–æ–Ω–Ω—ã–π',
    
    // –ú–∞–∑—É—Ç –∏ –º–æ—Ä—Å–∫–æ–µ —Ç–æ–ø–ª–∏–≤–æ
    '–º–∞–∑—É—Ç': '–ú–∞–∑—É—Ç —Ç–æ–ø–æ—á–Ω—ã–π –ú100',
    '–º100': '–ú–∞–∑—É—Ç —Ç–æ–ø–æ—á–Ω—ã–π –ú100',
    'fuel oil': '–ú–∞–∑—É—Ç —Ç–æ–ø–æ—á–Ω—ã–π –ú100',
    '–≥–∞–∑–æ–π–ª—å': '–ì–∞–∑–æ–π–ª—å',
    '–º–æ—Ä—Å–∫–æ–µ —Ç–æ–ø–ª–∏–≤–æ': '–ú–∞–∑—É—Ç —Ñ–ª–æ—Ç—Å–∫–∏–π –§5',
    
    // –¢–≤–µ—Ä–¥—ã–µ —Ç–æ–ø–ª–∏–≤–∞
    '—É–≥–æ–ª—å': '–ö–∞–º–µ–Ω–Ω—ã–π —É–≥–æ–ª—å',
    '–∫–∞–º–µ–Ω–Ω—ã–π —É–≥–æ–ª—å': '–ö–∞–º–µ–Ω–Ω—ã–π —É–≥–æ–ª—å',
    '–±—É—Ä—ã–π —É–≥–æ–ª—å': '–ë—É—Ä—ã–π —É–≥–æ–ª—å',
    '–∞–Ω—Ç—Ä–∞—Ü–∏—Ç': '–ê–Ω—Ç—Ä–∞—Ü–∏—Ç',
    '–∫–æ–∫—Å': '–ö–æ–∫—Å',
    '—Ç–æ—Ä—Ñ': '–¢–æ—Ä—Ñ',
    '–¥—Ä–æ–≤–∞': '–©–µ–ø–∞ –¥—Ä–µ–≤–µ—Å–Ω–∞—è',
    '—â–µ–ø–∞': '–©–µ–ø–∞ –¥—Ä–µ–≤–µ—Å–Ω–∞—è',
    '–ø–µ–ª–ª–µ—Ç—ã': '–ü–µ–ª–ª–µ—Ç—ã –¥—Ä–µ–≤–µ—Å–Ω—ã–µ',
    '–±—Ä–∏–∫–µ—Ç—ã': '–¢–æ–ø–ª–∏–≤–Ω—ã–µ –±—Ä–∏–∫–µ—Ç—ã',
    
    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∏–¥—ã —Ç–æ–ø–ª–∏–≤–∞
    '–≤–æ–¥–æ—Ä–æ–¥': '–í–æ–¥–æ—Ä–æ–¥',
    'hydrogen': '–í–æ–¥–æ—Ä–æ–¥',
    '–±–∏–æ–¥–∏–∑–µ–ª—å': '–ë–∏–æ–¥–∏–∑–µ–ª—å',
    '–±–∏–æ—ç—Ç–∞–Ω–æ–ª': '–ë–∏–æ—ç—Ç–∞–Ω–æ–ª',
    'biodiesel': '–ë–∏–æ–¥–∏–∑–µ–ª—å',
    'bioethanol': '–ë–∏–æ—ç—Ç–∞–Ω–æ–ª',
    'e85': '–ë–∏–æ—ç—Ç–∞–Ω–æ–ª'
  };
  
  for (const [key, value] of Object.entries(fields)) {
    const keyText = `${key} ${value}`.toLowerCase();
    let fuelType = '';
    let confidence = 0;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç–æ–ø–ª–∏–≤–∞
    for (const [pattern, fuel] of Object.entries(fuelMappings)) {
      if (keyText.includes(pattern)) {
        fuelType = fuel;
        confidence = pattern.length > 2 ? 0.9 : 0.7;
        break;
      }
    }
    
    // –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –µ—Å–ª–∏ –ø–æ–ª–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Ç–æ–ø–ª–∏–≤–∞
    if (!fuelType && (key.includes('fuel') || key.includes('—Ç–æ–ø–ª–∏–≤') || key.includes('–±–µ–Ω–∑–∏–Ω'))) {
      fuelType = '–ê–ò-95'; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      confidence = 0.6;
    }
    
    if (fuelType) {
      const volume = parseNumericValue(value);
      const unit = extractUnit(keyText) || 'l';
      
      if (volume > 0) {
        fuels.push({ type: fuelType, volume, unit, confidence });
      }
    }
  }
  
  // FALLBACK: –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –Ω–æ –µ—Å—Ç—å –ø–æ–ª–µ —Å –æ–±—ä–µ–º–æ–º
  if (fuels.length === 0) {
    for (const [key, value] of Object.entries(fields)) {
      if (key.includes('volume') || key.includes('–æ–±—ä–µ–º')) {
        const volume = parseNumericValue(value);
        if (volume > 0 && volume < 10000) {
          fuels.push({
            type: '–ê–ò-95', // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            volume,
            unit: 'l',
            confidence: 0.4
          });
          break;
        }
      }
    }
  }
  
  return fuels;
}

/**
 * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ —Å —É—á–µ—Ç–æ–º —Ä–µ–≥–∏–æ–Ω–∞ (–†–ê–°–®–ò–†–ï–ù–ù–û–ï)
 */
function extractElectricityData(fields: Record<string, any>): {
  consumption_kwh: number;
  consumption_mwh: number;
  region: string;
  tariff_type: string;
  peak_consumption?: number;
  off_peak_consumption?: number;
} {
  let consumption = 0;
  let consumption_mwh = 0;
  let region = '—Å—Ä–µ–¥–Ω—è—è –†–§';
  let tariff_type = 'standard';
  let peak_consumption = 0;
  let off_peak_consumption = 0;
  
  // –ü–æ–∏—Å–∫ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ (–†–ê–°–®–ò–†–ï–ù–ù–û–ï)
  for (const [key, value] of Object.entries(fields)) {
    const keyLower = key.toLowerCase();
    const keyText = `${key} ${value}`.toLowerCase();
    
    // –û—Å–Ω–æ–≤–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤ –∫–í—Ç¬∑—á
    if (keyLower.includes('–∫–≤—Ç') || keyLower.includes('—ç–ª–µ–∫—Ç—Ä') || keyLower.includes('kwh')) {
      const val = parseNumericValue(value);
      if (keyText.includes('–º–≤—Ç') || keyText.includes('mwh')) {
        consumption_mwh += val;
        consumption += val * 1000; // –ú–í—Ç¬∑—á –≤ –∫–í—Ç¬∑—á
      } else if (keyText.includes('–≥–≤—Ç') || keyText.includes('gwh')) {
        consumption += val * 1000000; // –ì–í—Ç¬∑—á –≤ –∫–í—Ç¬∑—á
      } else {
        consumption += val;
      }
    }
    
    // –ü–∏–∫–æ–≤–æ–µ –∏ –ø–æ–ª—É–ø–∏–∫–æ–≤–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ
    if (keyLower.includes('–ø–∏–∫') || keyLower.includes('peak')) {
      peak_consumption += parseNumericValue(value);
    }
    if (keyLower.includes('–ø–æ–ª—É–ø–∏–∫') || keyLower.includes('off-peak') || keyLower.includes('night')) {
      off_peak_consumption += parseNumericValue(value);
    }
    
    // –¢–∞—Ä–∏—Ñ
    if (keyLower.includes('—Ç–∞—Ä–∏—Ñ')) {
      if (keyText.includes('–¥–≤—É—Ö–∑–æ–Ω') || keyText.includes('–ø–∏–∫')) tariff_type = 'two_zone';
      else if (keyText.includes('–æ–¥–Ω–æ–∑–æ–Ω')) tariff_type = 'single_zone';
      else if (keyText.includes('—Ç—Ä–µ—Ö–∑–æ–Ω')) tariff_type = 'three_zone';
    }
    
    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞
    const valueStr = String(value).toLowerCase();
    if (valueStr.includes('–º–æ—Å–∫–≤–∞') || valueStr.includes('–ø–æ–¥–º–æ—Å–∫–æ–≤')) region = '–¶–§–û';
    else if (valueStr.includes('—Å–ø–±') || valueStr.includes('–ª–µ–Ω–∏–Ω–≥—Ä–∞–¥')) region = '–°–ó–§–û';
    else if (valueStr.includes('–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥') || valueStr.includes('—á–µ–ª—è–±–∏–Ω—Å–∫')) region = '–£–§–û';
    else if (valueStr.includes('–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫') || valueStr.includes('–∫—Ä–∞—Å–Ω–æ—è—Ä—Å–∫')) region = '–°–§–û';
    else if (valueStr.includes('–≤–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫') || valueStr.includes('—Ö–∞–±–∞—Ä–æ–≤—Å–∫')) region = '–î–§–û';
  }
  
  return { 
    consumption_kwh: consumption, 
    consumption_mwh: consumption_mwh,
    region, 
    tariff_type, 
    peak_consumption: peak_consumption > 0 ? peak_consumption : undefined,
    off_peak_consumption: off_peak_consumption > 0 ? off_peak_consumption : undefined
  };
}

/**
 * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */
function extractTransportData(fields: Record<string, any>): {
  distance_km: number;
  transport_type: string;
  vehicle_class: string;
  cargo_weight: number;
} {
  let distance = 0;
  let transport_type = 'unknown';
  let vehicle_class = 'unknown';
  let cargo_weight = 0;
  
  for (const [key, value] of Object.entries(fields)) {
    const keyText = `${key} ${value}`.toLowerCase();
    
    // –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ
    if (keyText.includes('–∫–º') || keyText.includes('—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ')) {
      distance += parseNumericValue(value);
    }
    
    // –¢–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
    if (keyText.includes('—Å–∞–º–æ–ª–µ—Ç') || keyText.includes('–∞–≤–∏–∞')) transport_type = 'aviation';
    else if (keyText.includes('–ø–æ–µ–∑–¥') || keyText.includes('–∂–¥')) transport_type = 'railway';
    else if (keyText.includes('–∞–≤—Ç–æ–º–æ–±–∏–ª—å') || keyText.includes('–≥—Ä—É–∑–æ–≤')) transport_type = 'road';
    else if (keyText.includes('–∫–æ—Ä–∞–±–ª—å') || keyText.includes('–º–æ—Ä—Å–∫')) transport_type = 'marine';
    
    // –ö–ª–∞—Å—Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è
    if (keyText.includes('–µ–≤—Ä–æ-2')) vehicle_class = '–ï–≤—Ä–æ-2';
    else if (keyText.includes('–µ–≤—Ä–æ-3')) vehicle_class = '–ï–≤—Ä–æ-3';
    else if (keyText.includes('–µ–≤—Ä–æ-4')) vehicle_class = '–ï–≤—Ä–æ-4';
    else if (keyText.includes('–µ–≤—Ä–æ-5')) vehicle_class = '–ï–≤—Ä–æ-5';
    else if (keyText.includes('–µ–≤—Ä–æ-6')) vehicle_class = '–ï–≤—Ä–æ-6';
    
    // –í–µ—Å –≥—Ä—É–∑–∞
    if (keyText.includes('–≤–µ—Å') || keyText.includes('—Ç–æ–Ω–Ω')) {
      cargo_weight += parseNumericValue(value);
    }
  }
  
  return { distance_km: distance, transport_type, vehicle_class, cargo_weight };
}

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤—ã–±—Ä–æ—Å—ã –ø–æ —Ä–æ—Å—Å–∏–π—Å–∫–∏–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º
 */
function calculateRussianEmissions(
  fuelData: Array<{ type: string; volume: number; unit: string }>,
  electricityData: { consumption_kwh: number; region: string },
  thermalData?: { consumption_gcal: number; energy_type: string },
  transportData?: { distance_km: number; transport_type: string; vehicle_class: string }
): { co2_kg: number; ch4_kg: number; n2o_kg: number; details: string[] } {
  
  let co2_total = 0;
  let ch4_total = 0; 
  let n2o_total = 0;
  const details = [];
  
  // –†–∞—Å—á–µ—Ç –ø–æ —Ç–æ–ø–ª–∏–≤—É
  console.log(`üî• –†–∞—Å—á–µ—Ç –≤—ã–±—Ä–æ—Å–æ–≤ –¥–ª—è ${fuelData.length} –≤–∏–¥–æ–≤ —Ç–æ–ø–ª–∏–≤–∞`);
  for (const fuel of fuelData) {
    console.log(`üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ø–ª–∏–≤–æ: ${fuel.type} (${fuel.volume} ${fuel.unit})`);
    const mappedFuelType = mapFuelTypeToEmissionFactor(fuel.type, fuel.unit);
    console.log(`üóÇÔ∏è  Mapped type: ${mappedFuelType}`);
    const factor = mappedFuelType ? RUSSIAN_EMISSION_FACTORS_2025[mappedFuelType as keyof typeof RUSSIAN_EMISSION_FACTORS_2025] : null;
    console.log(`‚öóÔ∏è  –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —ç–º–∏—Å—Å–∏–∏: ${factor}`);
    
    if (factor && fuel.volume > 0) {
      const co2 = fuel.volume * factor;
      co2_total += co2;
      console.log(`üí® –†–∞—Å—Å—á–∏—Ç–∞–Ω CO2: ${fuel.volume} √ó ${factor} = ${co2.toFixed(2)} –∫–≥`);
      
      // –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç CH4 –∏ N2O –¥–ª—è —Ç–æ–ø–ª–∏–≤–∞
      ch4_total += co2 * 0.0002; // ~0.02%
      n2o_total += co2 * 0.00005; // ~0.005%
      
      details.push(`${fuel.type} (${mappedFuelType}): ${fuel.volume} ${fuel.unit} ‚Üí ${co2.toFixed(2)} –∫–≥ CO2`);
    } else {
      console.log(`‚ùå –ü—Ä–æ–ø—É—Å–∫–∞–µ–º: factor=${factor}, volume=${fuel.volume}`);
      details.push(`${fuel.type}: –Ω–µ –Ω–∞–π–¥–µ–Ω –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç (mapped: ${mappedFuelType})`);
    }
  }
  
  console.log(`üéØ –ò—Ç–æ–≥–æ CO2 –æ—Ç —Ç–æ–ø–ª–∏–≤–∞: ${co2_total.toFixed(2)} –∫–≥`);
  
  // –†–∞—Å—á–µ—Ç –ø–æ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏
  if (electricityData.consumption_kwh > 0) {
    const factorKey = `–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è ${electricityData.region}` as keyof typeof RUSSIAN_EMISSION_FACTORS_2025;
    const factor = RUSSIAN_EMISSION_FACTORS_2025[factorKey] || RUSSIAN_EMISSION_FACTORS_2025['–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è —Å—Ä–µ–¥–Ω—è—è –†–§'];
    const co2 = electricityData.consumption_kwh * factor;
    co2_total += co2;
    
    details.push(`–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è (${electricityData.region}): ${electricityData.consumption_kwh} –∫–í—Ç¬∑—á ‚Üí ${co2.toFixed(2)} –∫–≥ CO2`);
  }

  // –†–∞—Å—á–µ—Ç –ø–æ —Ç–µ–ø–ª–æ–≤–æ–π —ç–Ω–µ—Ä–≥–∏–∏
  if (thermalData && thermalData.consumption_gcal > 0) {
    // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è —Ç–µ–ø–ª–æ–≤–æ–π —ç–Ω–µ—Ä–≥–∏–∏: 0.184 –∫–≥ CO2/–∫–í—Ç¬∑—á –¥–ª—è —Å—Ä–µ–¥–Ω–µ–π —Ç–µ–ø–ª–æ–≤–æ–π —ç–Ω–µ—Ä–≥–∏–∏ –†–§
    // 1 –ì–∫–∞–ª = 1163 –∫–í—Ç¬∑—á
    const thermalFactor = 0.184; // –∫–≥ CO2/–∫–í—Ç¬∑—á –¥–ª—è —Ç–µ–ø–ª–æ—Å–µ—Ç–µ–π –†–§
    const kwh_equivalent = thermalData.consumption_gcal * 1163; // –ü–µ—Ä–µ–≤–æ–¥–∏–º –ì–∫–∞–ª –≤ –∫–í—Ç¬∑—á
    const co2 = kwh_equivalent * thermalFactor;
    co2_total += co2;
    
    // –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è CH4 –∏ N2O –æ—Ç —Ç–µ–ø–ª–æ–≤–æ–π —ç–Ω–µ—Ä–≥–∏–∏
    ch4_total += co2 * 0.0001; // ~0.01%
    n2o_total += co2 * 0.00003; // ~0.003%
    
    details.push(`–¢–µ–ø–ª–æ–≤–∞—è —ç–Ω–µ—Ä–≥–∏—è (${thermalData.energy_type}): ${thermalData.consumption_gcal} –ì–∫–∞–ª ‚Üí ${co2.toFixed(2)} –∫–≥ CO2`);
  }
  
  // –†–∞—Å—á–µ—Ç –ø–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É
  if (transportData && transportData.distance_km > 0 && transportData.transport_type !== 'unknown') {
    let factor = 0;
    
    if (transportData.transport_type === 'aviation') {
      factor = RUSSIAN_EMISSION_FACTORS_2025['–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Ä–µ–π—Å—ã'];
    } else if (transportData.transport_type === 'railway') {
      factor = RUSSIAN_EMISSION_FACTORS_2025['–ñ–î –≥—Ä—É–∑–æ–≤—ã–µ'];
    } else if (transportData.transport_type === 'road' && transportData.vehicle_class !== 'unknown') {
      const vehicleKey = `–õ–µ–≥–∫–æ–≤–æ–π ${transportData.vehicle_class}` as keyof typeof RUSSIAN_EMISSION_FACTORS_2025;
      factor = RUSSIAN_EMISSION_FACTORS_2025[vehicleKey] || 0.15;
    }
    
    if (factor > 0) {
      const co2 = transportData.distance_km * factor;
      co2_total += co2;
      details.push(`–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç (${transportData.transport_type}): ${transportData.distance_km} –∫–º ‚Üí ${co2.toFixed(2)} –∫–≥ CO2`);
    }
  }
  
  return { co2_kg: co2_total, ch4_kg: ch4_total, n2o_kg: n2o_total, details };
}

/**
 * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ CSV –¥–∞–Ω–Ω—ã—Ö
 */
function parseCSVFuelData(fullText: string): {
  fuelData: Array<{ type: string; volume: number; unit: string }>;
  electricityData: { consumption_kwh: number };
  transportData: { distance_km: number };
} {
  const result = {
    fuelData: [] as Array<{ type: string; volume: number; unit: string }>,
    electricityData: { consumption_kwh: 0 },
    transportData: { distance_km: 0 }
  };
  
  savePatternsLog('csv_parsing_attempt', {
    fullText: fullText.substring(0, 500),
    timestamp: new Date().toISOString()
  });
  
  // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏
  const lines = fullText.split(/[\r\n]+/).filter(line => line.trim());
  
  for (const line of lines) {
    // –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Ç–æ—á–∫–µ —Å –∑–∞–ø—è—Ç–æ–π (—Ä—É—Å—Å–∫–∏–π CSV)
    const fields = line.split(';');
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–∫—Ç –≥–∞–∑–∞
    if (line.includes('–ê–∫—Ç –≥–∞–∑–∞') || line.includes('–≥–∞–∑')) {
      for (let i = 0; i < fields.length; i++) {
        const field = fields[i];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≥–∞–∑–∞
        const cleanField = field.replace(/[^0-9.,]/g, '');
        const number = parseFloat(cleanField.replace(',', '.'));
        
        if (!isNaN(number) && number > 100 && number < 100000) { // –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –≥–∞–∑–∞
          console.log(`üí® CSV: –ù–∞–π–¥–µ–Ω –æ–±—ä–µ–º –≥–∞–∑–∞: ${number} –º¬≥`);
          result.fuelData.push({
            type: '–ü—Ä–∏—Ä–æ–¥–Ω—ã–π –≥–∞–∑ –†–§',
            volume: number,
            unit: '–º3'
          });
          break;
        }
      }
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—É—Ç–µ–≤–æ–π –ª–∏—Å—Ç (—Ç–æ–ø–ª–∏–≤–æ)
    if (line.includes('–ü—É—Ç–µ–≤–æ–π –ª–∏—Å—Ç') || line.includes('–î–¢') || line.includes('–±–µ–Ω–∑–∏–Ω')) {
      for (let i = 0; i < fields.length; i++) {
        const field = fields[i];
        const cleanField = field.replace(/[^0-9.,]/g, '');
        const number = parseFloat(cleanField.replace(',', '.'));
        
        if (!isNaN(number) && number > 10 && number < 10000) { // –î–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è —Ç–æ–ø–ª–∏–≤–∞
          console.log(`‚õΩ CSV: –ù–∞–π–¥–µ–Ω —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞: ${number} –ª–∏—Ç—Ä–æ–≤`);
          
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç–æ–ø–ª–∏–≤–∞
          let fuelType = '–î–¢ –ª–µ—Ç–Ω–µ–µ'; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–∏–∑–µ–ª—å
          if (line.includes('–±–µ–Ω–∑–∏–Ω') || line.includes('–ê–ò')) {
            fuelType = '–ê–ò-95';
          }
          
          result.fuelData.push({
            type: fuelType,
            volume: number,
            unit: '–ª'
          });
          break;
        }
      }
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—é
    if (line.includes('—ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è') || line.includes('–∫–í—Ç') || line.includes('–∫–≤—Ç')) {
      for (let i = 0; i < fields.length; i++) {
        const field = fields[i];
        const cleanField = field.replace(/[^0-9.,]/g, '');
        const number = parseFloat(cleanField.replace(',', '.'));
        
        if (!isNaN(number) && number > 100) { // –∫–í—Ç¬∑—á
          console.log(`‚ö° CSV: –ù–∞–π–¥–µ–Ω–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏: ${number} –∫–í—Ç¬∑—á`);
          result.electricityData.consumption_kwh = number;
          break;
        }
      }
    }
  }
  
  savePatternsLog('csv_parsing_result', {
    result,
    extractedCount: result.fuelData.length,
    timestamp: new Date().toISOString()
  });
  
  return result;
}

/**
 * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ø–æ–ª–µ–π OCR
 */
function extractDataFromFields(fields: Record<string, any>): {
  fuelData: Array<{ type: string; volume: number; unit: string }>;
  electricityData: { consumption_kwh: number };
  transportData: { distance_km: number };
} {
  const result = {
    fuelData: [] as Array<{ type: string; volume: number; unit: string }>,
    electricityData: { consumption_kwh: 0 },
    transportData: { distance_km: 0 }
  };

  for (const [key, value] of Object.entries(fields)) {
    const keyLower = key.toLowerCase();
    const valueNum = parseNumericValue(value);
    
    if (valueNum <= 0) continue;

    // –≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è
    if (keyLower.includes('consumption_kwh') || 
        keyLower.includes('–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ') && keyLower.includes('–∫–≤—Ç')) {
      result.electricityData.consumption_kwh = valueNum;
    }
    
    // –ì–∞–∑
    if (keyLower.includes('volume_m3') || 
        keyLower.includes('–≥–∞–∑') || 
        (keyLower.includes('consumption') && keyLower.includes('–º3'))) {
      result.fuelData.push({
        type: '–ü—Ä–∏—Ä–æ–¥–Ω—ã–π –≥–∞–∑ –†–§',
        volume: valueNum,
        unit: '–º¬≥'
      });
    }
    
    // –î–∏–∑–µ–ª—å
    if (keyLower.includes('fuel_volume') && keyLower.includes('–¥–∏–∑–µ–ª—å') ||
        keyLower.includes('–¥—Ç') ||
        keyLower.includes('diesel')) {
      result.fuelData.push({
        type: '–î–¢ –ª–µ—Ç–Ω–µ–µ',
        volume: valueNum,
        unit: '–ª'
      });
    }
    
    // –ë–µ–Ω–∑–∏–Ω
    if (keyLower.includes('–±–µ–Ω–∑–∏–Ω') || keyLower.includes('gasoline')) {
      result.fuelData.push({
        type: '–ê–ò-95',
        volume: valueNum,
        unit: '–ª'
      });
    }
    
    // –£–≥–æ–ª—å
    if (keyLower.includes('coal') || keyLower.includes('—É–≥–æ–ª—å')) {
      result.fuelData.push({
        type: '–ö–∞–º–µ–Ω–Ω—ã–π —É–≥–æ–ª—å',
        volume: valueNum,
        unit: '—Ç'
      });
    }
    
    // –¢–µ–ø–ª–æ–≤–∞—è —ç–Ω–µ—Ä–≥–∏—è
    if (keyLower.includes('heat') || keyLower.includes('—Ç–µ–ø–ª–æ') || keyLower.includes('–≥–∫–∞–ª')) {
      result.fuelData.push({
        type: '–¢–µ–ø–ª–æ—ç–Ω–µ—Ä–≥–∏—è –≥–∞–∑–æ–≤–∞—è', // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á –∏–∑ RUSSIAN_EMISSION_FACTORS_2025
        volume: valueNum,
        unit: '–ì–∫–∞–ª'
      });
    }
    
    // –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ
    if (keyLower.includes('distance') || keyLower.includes('–∫–º')) {
      result.transportData.distance_km = valueNum;
    }
  }

  return result;
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—É—é OCR —Å–∏—Å—Ç–µ–º—É: Yandex Vision ‚Üí Tesseract fallback
 */
export async function extractDocumentDataEnhanced(
  documentId: string,
  ocrData: any,
  filePath?: string
): Promise<ExtractedDocumentData> {
  // –ù–û–í–ê–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø: –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤
  if (filePath && fs.existsSync(filePath)) {
    try {
      console.log('üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤');
      return await extractWithIntelligentProcessor(documentId, filePath);
    } catch (processingError) {
      console.warn('‚ö†Ô∏è –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: fallback –∫ —Å—Ç–∞—Ä–æ–º—É –º–µ—Ç–æ–¥—É:', processingError instanceof Error ? processingError.message : String(processingError));
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ —Å—Ç–∞—Ä—ã–º –º–µ—Ç–æ–¥–æ–º –∫–∞–∫ fallback
    }
  }
  
  // LEGACY: –ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–∞—è OCR —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  const useMultiLevelOCR = process.env.PRIMARY_OCR_METHOD === 'yandex' || process.env.ENABLE_OCR_FALLBACK !== 'false';
  
  if (useMultiLevelOCR && filePath) {
    try {
      return await extractWithMultiLevelOCR(documentId, filePath);
    } catch (ocrError) {
      console.warn('‚ö†Ô∏è Multi-level OCR fallback to pattern extraction:', ocrError instanceof Error ? ocrError.message : String(ocrError));
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º –∫–∞–∫ fallback
    }
  }
  
  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –æ–±–æ–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ - fullText –∏ fields
  const fullText = ocrData?.fullText || '';
  const fields = ocrData?.fields || {};
  
  // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
  let allText = fullText.toLowerCase();
  if (!allText && fields) {
    // Fallback: —Å–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –ø–æ–ª–µ–π –µ—Å–ª–∏ fullText –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    allText = Object.entries(fields)
      .map(([key, value]) => `${key} ${value}`)
      .join(' ')
      .toLowerCase();
  }
  
  // –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
  const pattern = findDocumentPattern(allText);
  const documentType = pattern?.type || 'unknown';
  const classificationConfidence = pattern ? 0.8 : 0.3;
  
  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–µ–∫—Å—Ç–∞ –ò –ø–æ–ª–µ–π
  let fuelData = extractFuelDataFromText(allText);
  let electricityData = extractElectricityDataFromText(allText);
  let thermalData = extractThermalEnergyDataFromText(allText);
  let transportData = extractTransportDataFromText(allText);
  
  // –ù–û–í–û–ï: –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ CSV –¥–∞–Ω–Ω—ã—Ö
  if (fullText && (fullText.includes(';') || fullText.includes('csv'))) {
    console.log('üóÇÔ∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω CSV —Ñ–æ—Ä–º–∞—Ç, –ø—Ä–∏–º–µ–Ω—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä...');
    const csvData = parseCSVFuelData(fullText);
    
    // –ó–∞–º–µ–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV –µ—Å–ª–∏ CSV –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if (csvData.fuelData.length > 0) {
      console.log(`üî• CSV –ø–∞—Ä—Å–µ—Ä –∏–∑–≤–ª–µ–∫ ${csvData.fuelData.length} —Ç–æ–ø–ª–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π, –∑–∞–º–µ–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞`);
      fuelData = csvData.fuelData;
    }
    if (csvData.electricityData.consumption_kwh > 0) {
      electricityData.consumption_kwh = csvData.electricityData.consumption_kwh;
    }
    if (csvData.transportData.distance_km > 0) {
      transportData.distance_km = csvData.transportData.distance_km;
    }
  }
  
  // –ù–û–í–û–ï: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ fields (–ë–ï–ó –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)  
  let industrialProcessData: {
    fgases: Array<{ type: string; amount_kg: number; gwp: number; co2_equivalent: number }>;
    industrial_processes: Array<{ process: string; production_tons: number; emission_factor: number; co2_kg: number }>;
  } = { fgases: [], industrial_processes: [] };
  if (fields && Object.keys(fields).length > 0) {
    const fieldsExtraction = extractDataFromFields(fields);
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∏ F-–≥–∞–∑—ã
    industrialProcessData = extractIndustrialProcessData(fields);
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –ó–ê–ú–ï–ù–Ø–ï–ú –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –µ—Å–ª–∏ fields —Å–æ–¥–µ—Ä–∂–∞—Ç –±–æ–ª—å—à–µ
    if (fieldsExtraction.fuelData.length > 0) {
      // –ï—Å–ª–∏ –∏–∑ –ø–æ–ª–µ–π –ø–æ–ª—É—á–∏–ª–∏ –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö –≤–º–µ—Å—Ç–æ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–µ–∫—Å—Ç–∞
      if (fieldsExtraction.fuelData.length >= fuelData.length) {
        fuelData = fieldsExtraction.fuelData;
      }
    }
    if (fieldsExtraction.electricityData.consumption_kwh > 0) {
      electricityData.consumption_kwh = fieldsExtraction.electricityData.consumption_kwh;
    }
    if (fieldsExtraction.transportData.distance_km > 0) {
      transportData.distance_km = fieldsExtraction.transportData.distance_km;
    }
  }
  
  // –†–∞—Å—á–µ—Ç –≤—ã–±—Ä–æ—Å–æ–≤ (–≤–∫–ª—é—á–∞—è F-–≥–∞–∑—ã –∏ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã)
  const emissions = calculateRussianEmissions(fuelData, electricityData, thermalData, transportData);
  
  // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–æ—Å—ã –æ—Ç F-–≥–∞–∑–æ–≤ (CO2-—ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç)
  let fgasEmissions = 0;
  for (const fgas of industrialProcessData.fgases) {
    fgasEmissions += fgas.co2_equivalent;
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–æ—Å—ã –æ—Ç –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
  let industrialEmissions = 0;
  for (const process of industrialProcessData.industrial_processes) {
    industrialEmissions += process.co2_kg;
  }
  
  // –û–±—â–∏–µ –≤—ã–±—Ä–æ—Å—ã CO2
  const totalCO2 = emissions.co2_kg + fgasEmissions + industrialEmissions;
  
  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const expectedFields = pattern?.required_fields.length || 5;
  const extractedDataCount = (fuelData.length > 0 ? 2 : 0) + 
                            (electricityData.consumption_kwh > 0 ? 2 : 0) +
                            (thermalData && thermalData.consumption_gcal > 0 ? 2 : 0) +
                            (transportData.distance_km > 0 ? 1 : 0);
  const dataQuality = extractedDataCount >= expectedFields ? 'high' : 
                     extractedDataCount >= expectedFields * 0.6 ? 'medium' : 'low';
  
  const emissionConfidence = emissions.co2_kg > 0 ? 0.8 : 0.3;
  
  return {
    documentId,
    documentType,
    confidence: classificationConfidence,
    extractedFields: {
      fullText: fullText.substring(0, 1000), // –ü–µ—Ä–≤—ã–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
      fuel_data: fuelData,
      electricity_data: electricityData,
      thermal_data: thermalData,
      transport_data: transportData,
      fgas_data: industrialProcessData.fgases, // F-–≥–∞–∑—ã (—Ö–ª–∞–¥–∞–≥–µ–Ω—Ç—ã, SF6)
      industrial_processes: industrialProcessData.industrial_processes // –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
    },
    emissions: {
      co2_kg: totalCO2, // –í–∫–ª—é—á–∞–µ—Ç –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≤—ã–±—Ä–æ—Å–æ–≤
      ch4_kg: emissions.ch4_kg, 
      n2o_kg: emissions.n2o_kg,
      fgas_co2_equivalent: fgasEmissions, // –û—Ç–¥–µ–ª—å–Ω–æ F-–≥–∞–∑—ã –≤ CO2-—ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–µ
      industrial_process_co2: industrialEmissions, // –û—Ç–¥–µ–ª—å–Ω–æ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
      calculation_method: 'russian_factors_2025_extended',
      confidence: emissionConfidence
    },
    metadata: {
      classification_confidence: classificationConfidence,
      fields_extracted: extractedDataCount,
      fields_expected: expectedFields,
      data_quality: dataQuality
    }
  };
}

/**
 * –ú–∞—Å—Å–æ–≤–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
 */
export async function extractMultipleDocumentsEnhanced(
  documents: Array<{ id: string; ocrData?: any; filePath?: string }>
): Promise<{
  documents: ExtractedDocumentData[];
  summary: {
    total_documents: number;
    high_quality_documents: number;
    total_co2_kg: number;
    total_ch4_kg: number;
    total_n2o_kg: number;
    document_types: Record<string, number>;
    data_quality_distribution: Record<string, number>;
  };
}> {
  console.log(`üöÄ –ù–∞—á–∞–ª–æ –º–∞—Å—Å–æ–≤–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ ${documents.length} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤`);
  
  // –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  savePatternsLog('input_documents', {
    total: documents.length,
    documentIds: documents.map(d => d.id),
    documentsWithOcr: documents.filter(d => d.ocrData).length,
    timestamp: new Date().toISOString()
  });
  
  const results: ExtractedDocumentData[] = [];
  const documentTypes: Record<string, number> = {};
  const qualityDistribution: Record<string, number> = { high: 0, medium: 0, low: 0 };
  let totalCO2 = 0;
  let totalCH4 = 0;
  let totalN2O = 0;
  
  for (const doc of documents) {
    try {
      console.log(`üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç: ${doc.id}`);
      const extracted = await extractDocumentDataEnhanced(doc.id, doc.ocrData, doc.filePath);
      results.push(extracted);
      
      // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–∂–¥–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
      savePatternsLog(`document_${doc.id}_result`, {
        documentId: doc.id,
        documentType: extracted.documentType,
        confidence: extracted.confidence,
        emissions: extracted.emissions,
        extractedFields: extracted.extractedFields,
        metadata: extracted.metadata,
        timestamp: new Date().toISOString()
      });
      
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      documentTypes[extracted.documentType] = (documentTypes[extracted.documentType] || 0) + 1;
      qualityDistribution[extracted.metadata.data_quality]++;
      totalCO2 += extracted.emissions.co2_kg;
      totalCH4 += extracted.emissions.ch4_kg;
      totalN2O += extracted.emissions.n2o_kg;
      
      console.log(`‚úÖ –î–æ–∫—É–º–µ–Ω—Ç ${doc.id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω: CO2=${extracted.emissions.co2_kg}–∫–≥, —Ç–∏–ø=${extracted.documentType}`);
      
    } catch (error) {
      console.warn(`Failed to extract data from document ${doc.id}:`, error);
      
      // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
      savePatternsLog(`document_${doc.id}_error`, {
        documentId: doc.id,
        error: error instanceof Error ? error.message : String(error),
        stack: error instanceof Error ? error.stack : undefined,
        timestamp: new Date().toISOString()
      });
      
      results.push({
        documentId: doc.id,
        documentType: 'error',
        confidence: 0,
        extractedFields: {},
        emissions: { co2_kg: 0, ch4_kg: 0, n2o_kg: 0, calculation_method: 'error', confidence: 0 },
        metadata: { classification_confidence: 0, fields_extracted: 0, fields_expected: 0, data_quality: 'low' }
      });
      qualityDistribution.low++;
    }
  }
  
  // –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ–∑—é–º–µ
  const summary = {
    total_documents: documents.length,
    high_quality_documents: qualityDistribution.high,
    total_co2_kg: totalCO2,
    total_ch4_kg: totalCH4,
    total_n2o_kg: totalN2O,
    document_types: documentTypes,
    data_quality_distribution: qualityDistribution
  };
  
  console.log(`üéâ –ú–∞—Å—Å–æ–≤–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: CO2=${totalCO2.toFixed(2)}–∫–≥, CH4=${totalCH4.toFixed(2)}–∫–≥, N2O=${totalN2O.toFixed(2)}–∫–≥`);
  
  // –õ–æ–≥–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Ä–µ–∑—é–º–µ
  savePatternsLog('final_summary', {
    summary,
    totalDocuments: results.length,
    successfullyProcessed: results.filter(r => r.documentType !== 'error').length,
    timestamp: new Date().toISOString()
  });

  return {
    documents: results,
    summary
  };
}

/**
 * –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° FULLTEXT
 */

/**
 * –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–∏–ø —Ç–æ–ø–ª–∏–≤–∞ —Å –∫–ª—é—á–∞–º–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
 */
function mapFuelTypeToEmissionFactor(extractedFuelType: string, unit?: string): string | null {
  const fuelType = extractedFuelType.toLowerCase();
  
  // –î–∏–∑–µ–ª—å–Ω–æ–µ —Ç–æ–ø–ª–∏–≤–æ
  if (fuelType.includes('–¥–∏–∑–µ–ª—å') || fuelType.includes('–¥—Ç')) {
    if (fuelType.includes('–ª–µ—Ç–Ω')) return '–î–¢ –ª–µ—Ç–Ω–µ–µ';
    if (fuelType.includes('–∑–∏–º')) return '–î–¢ –∑–∏–º–Ω–µ–µ';
    if (fuelType.includes('–∞—Ä–∫—Ç')) return '–î–¢ –∞—Ä–∫—Ç–∏—á–µ—Å–∫–æ–µ';
    return '–î–¢ –ª–µ—Ç–Ω–µ–µ'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ª–µ—Ç–Ω–µ–µ
  }
  
  // –ë–µ–Ω–∑–∏–Ω - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ê–ò- –∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
  if (fuelType.includes('–±–µ–Ω–∑–∏–Ω') || fuelType.includes('–∞–∏-')) {
    if (fuelType.includes('–∞–∏-80') || fuelType.includes('80')) return '–ê–ò-80';
    if (fuelType.includes('–∞–∏-92') || fuelType.includes('92')) return '–ê–ò-92';
    if (fuelType.includes('–∞–∏-95') || fuelType.includes('95')) return '–ê–ò-95';
    if (fuelType.includes('–∞–∏-98') || fuelType.includes('98')) return '–ê–ò-98';
    if (fuelType.includes('–∞–∏-100') || fuelType.includes('100')) return '–ê–ò-100';
    return '–ê–ò-92'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 92
  }
  
  // –ü—Ä–∏—Ä–æ–¥–Ω—ã–π –≥–∞–∑
  if (fuelType.includes('–ø—Ä–∏—Ä–æ–¥–Ω—ã–π –≥–∞–∑') || fuelType.includes('–≥–∞–∑ –ø—Ä–∏—Ä–æ–¥–Ω') || fuelType.includes('–º–µ—Ç–∞–Ω')) {
    return '–ü—Ä–∏—Ä–æ–¥–Ω—ã–π –≥–∞–∑ –†–§';
  }
  
  if (fuelType.includes('—Å–∂–∏–∂–µ–Ω–Ω—ã–π –≥–∞–∑') || fuelType.includes('–ø—Ä–æ–ø–∞–Ω')) {
    return '–°–∂–∏–∂–µ–Ω–Ω—ã–π –≥–∞–∑';
  }
  
  // –£–≥–æ–ª—å - –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
  if (fuelType.includes('—É–≥–æ–ª—å') || fuelType.includes('–∫–∞–º–µ–Ω–Ω—ã–π')) {
    return '–ö–∞–º–µ–Ω–Ω—ã–π —É–≥–æ–ª—å';
  }
  
  // –ú–∞–∑—É—Ç
  if (fuelType.includes('–º–∞–∑—É—Ç')) {
    return '–ú–∞–∑—É—Ç —Ç–æ–ø–æ—á–Ω—ã–π';
  }
  
  // –¢–æ–ø–ª–∏–≤–æ –ø—Ä–æ—á–µ–µ - –ø—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
  if (fuelType.includes('—Ç–æ–ø–ª–∏–≤–æ –ø—Ä–æ—á–µ–µ') || fuelType.includes('–ø—Ä–æ—á–µ–µ —Ç–æ–ø–ª–∏–≤–æ')) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è
    if (unit && unit.toLowerCase().includes('—Ç–æ–Ω–Ω')) {
      return '–ö–∞–º–µ–Ω–Ω—ã–π —É–≥–æ–ª—å';
    }
    // –ï—Å–ª–∏ –µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è "–ª–∏—Ç—Ä", —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –¥–∏–∑–µ–ª—å –∏–ª–∏ –º–∞–∑—É—Ç  
    if (unit && unit.toLowerCase().includes('–ª–∏—Ç—Ä')) {
      return '–ú–∞–∑—É—Ç —Ç–æ–ø–æ—á–Ω—ã–π';
    }
    
    // Fallback - –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –µ–¥–∏–Ω–∏—Ü—ã –≤ —Å–∞–º–æ–º –Ω–∞–∑–≤–∞–Ω–∏–∏ —Ç–æ–ø–ª–∏–≤–∞
    if (extractedFuelType.includes('—Ç–æ–Ω–Ω')) {
      return '–ö–∞–º–µ–Ω–Ω—ã–π —É–≥–æ–ª—å';
    }
    if (extractedFuelType.includes('–ª–∏—Ç—Ä')) {
      return '–ú–∞–∑—É—Ç —Ç–æ–ø–æ—á–Ω—ã–π';
    }
  }
  
  return null;
}

/**
 * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–ø–ª–∏–≤–µ –∏–∑ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
 */
function extractFuelDataFromText(text: string): Array<{ type: string; volume: number; unit: string }> {
  const fuels = [];
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ç–æ–ø–ª–∏–≤–∞ –∏–∑ russian-document-patterns.ts
  for (const patternGroup of FUEL_EXTRACTION_PATTERNS) {
    for (const regex of patternGroup.patterns) {
      let match;
      while ((match = regex.exec(text)) !== null) {
        const volume = parseNumericValue(match[1]); // –ü–µ—Ä–≤–∞—è –≥—Ä—É–ø–ø–∞ –∑–∞—Ö–≤–∞—Ç–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —á–∏—Å–ª–æ
        if (volume > 0) {
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç–æ–ø–ª–∏–≤–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
          let fuelType = '–¢–æ–ø–ª–∏–≤–æ –ø—Ä–æ—á–µ–µ';
          const context = match[0].toLowerCase();
          
          // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞
          if (context.includes('–¥–∏–∑–µ–ª—å') || context.includes('–¥—Ç') || context.includes('—Å–æ–ª—è—Ä–∫–∞')) {
            fuelType = '–î–∏–∑–µ–ª—å–Ω–æ–µ —Ç–æ–ø–ª–∏–≤–æ';
          } else if (context.includes('–±–µ–Ω–∑–∏–Ω') || context.includes('–∞–∏-92') || context.includes('–∞–∏-95') || context.includes('–∞–∏-98') || context.match(/–∞–∏[\-\s]?\d+/)) {
            if (context.includes('–∞–∏-95') || context.includes('95')) {
              fuelType = '–ê–ò-95';
            } else if (context.includes('–∞–∏-98') || context.includes('98')) {
              fuelType = '–ê–ò-98';
            } else {
              fuelType = '–ë–µ–Ω–∑–∏–Ω –ê–ò-92';
            }
          } else if (context.includes('–≥–∞–∑') && (context.includes('–º3') || context.includes('–∫—É–±'))) {
            fuelType = '–ì–∞–∑ –ø—Ä–∏—Ä–æ–¥–Ω—ã–π –†–§';
          } else if (context.includes('—É–≥–æ–ª—å') || context.includes('–∫–∞–º–µ–Ω–Ω—ã–π') || context.includes('—É–≥–ª—è')) {
            fuelType = '–£–≥–æ–ª—å –∫–∞–º–µ–Ω–Ω—ã–π';
          } else if (context.includes('–º–∞–∑—É—Ç')) {
            fuelType = '–ú–∞–∑—É—Ç —Ç–æ–ø–æ—á–Ω—ã–π';
          } else if (context.includes('–∫–µ—Ä–æ—Å–∏–Ω')) {
            fuelType = '–ö–µ—Ä–æ—Å–∏–Ω';
          } else if (context.includes('—Å–∂–∏–∂–µ–Ω–Ω—ã–π') || context.includes('–ø—Ä–æ–ø–∞–Ω') || context.includes('lpg')) {
            fuelType = '–ì–∞–∑ —Å–∂–∏–∂–µ–Ω–Ω—ã–π';
          } else if (context.includes('–¥—Ä–æ–≤–∞') || context.includes('–¥—Ä–µ–≤–µ—Å–∏–Ω–∞') || context.includes('–ø–µ–ª–ª–µ—Ç—ã')) {
            fuelType = '–î—Ä–æ–≤–∞';
          }
          
          // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –ø—Ä–æ–±—É–µ–º –ø–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
          else if (patternGroup.subcategory.includes('diesel')) {
            fuelType = '–î–∏–∑–µ–ª—å–Ω–æ–µ —Ç–æ–ø–ª–∏–≤–æ';
          } else if (patternGroup.subcategory.includes('gasoline')) {
            fuelType = '–ë–µ–Ω–∑–∏–Ω –ê–ò-92';
          } else if (patternGroup.subcategory.includes('gas')) {
            fuelType = '–ì–∞–∑ –ø—Ä–∏—Ä–æ–¥–Ω—ã–π –†–§';
          }
          
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –µ–¥–∏–Ω–∏—Ü—ã –∏–∑ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
          let unit = '–ª–∏—Ç—Ä';
          if (patternGroup.subcategory.includes('gas') || match[0].toLowerCase().includes('–º3')) {
            unit = '–º¬≥';
          } else if (match[0].toLowerCase().includes('—Ç–æ–Ω–Ω') || match[0].toLowerCase().includes('—Ç.')) {
            unit = '—Ç–æ–Ω–Ω–∞';
          }
          
          fuels.push({
            type: fuelType,
            volume,
            unit
          });
        }
      }
    }
  }
  
  return fuels;
}

/**
 * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–± —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ –∏–∑ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
 */
function extractElectricityDataFromText(text: string): {
  consumption_kwh: number;
  consumption_mwh: number;
  region: string;
  tariff_type: string;
  peak_consumption?: number;
  off_peak_consumption?: number;
} {
  let consumption_kwh = 0;
  let consumption_mwh = 0;
  let region = '–†–§ —Å—Ä–µ–¥–Ω—è—è';
  let tariff_type = 'single';
  let peak_consumption = 0;
  let off_peak_consumption = 0;
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ –∏–∑ russian-document-patterns.ts
  for (const patternGroup of ELECTRICITY_EXTRACTION_PATTERNS) {
    for (const regex of patternGroup.patterns) {
      let match;
      while ((match = regex.exec(text)) !== null) {
        const value = parseNumericValue(match[1]);
        if (value > 0) {
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –µ–¥–∏–Ω–∏—Ü—ã –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
          const context = match[0].toLowerCase();
          if (context.includes('–º–≤—Ç') || context.includes('mwh')) {
            consumption_mwh += value;
            consumption_kwh += value * 1000;
          } else {
            consumption_kwh += value;
          }
          
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∞—Ä–∏—Ñ–Ω—ã–µ –∑–æ–Ω—ã
          if (patternGroup.subcategory.includes('peak')) {
            peak_consumption += value;
          } else if (patternGroup.subcategory.includes('off_peak')) {
            off_peak_consumption += value;
          }
        }
      }
    }
  }
  
  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞
  const regions = [
    { pattern: /(–º–æ—Å–∫–≤–∞|–º–æ—Å–∫–æ–≤—Å–∫–∞—è|–ø–æ–¥–º–æ—Å–∫–æ–≤)/gi, code: '–¶–§–û' },
    { pattern: /(—Å–ø–±|—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥|–ª–µ–Ω–∏–Ω–≥—Ä–∞–¥)/gi, code: '–°–ó–§–û' },
    { pattern: /(–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥|—Å–≤–µ—Ä–¥–ª–æ–≤|—á–µ–ª—è–±–∏–Ω—Å–∫)/gi, code: '–£–§–û' },
    { pattern: /(–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫|–∫—Ä–∞—Å–Ω–æ—è—Ä—Å–∫|–æ–º—Å–∫)/gi, code: '–°–§–û' },
    { pattern: /(–≤–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫|—Ö–∞–±–∞—Ä–æ–≤—Å–∫|–ø—Ä–∏–º–æ—Ä—Å–∫)/gi, code: '–î–§–û' }
  ];
  
  for (const reg of regions) {
    if (reg.pattern.test(text)) {
      region = reg.code;
      break;
    }
  }
  
  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ç–∞—Ä–∏—Ñ–∞
  if (/–ø–∏–∫–æ–≤–∞—è|–ø–∏–∫/gi.test(text)) tariff_type = 'peak';
  else if (/–¥–≤—É—Ö–∑–æ–Ω|–¥–≤—É—Ö—Å—Ç–∞–≤–æ—á–Ω/gi.test(text)) tariff_type = 'two_zone';
  else if (/—Ç—Ä–µ—Ö–∑–æ–Ω|—Ç—Ä–µ—Ö—Å—Ç–∞–≤–æ—á–Ω/gi.test(text)) tariff_type = 'three_zone';
  
  return {
    consumption_kwh,
    consumption_mwh,
    region,
    tariff_type,
    peak_consumption: peak_consumption > 0 ? peak_consumption : undefined,
    off_peak_consumption: off_peak_consumption > 0 ? off_peak_consumption : undefined
  };
}

/**
 * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ç–µ–ø–ª–æ–≤–æ–π —ç–Ω–µ—Ä–≥–∏–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞
 */
function extractThermalEnergyDataFromText(text: string): {
  consumption_gcal: number;
  consumption_gj: number;
  energy_type: string;
} {
  let consumption_gcal = 0;
  let consumption_gj = 0;
  let energy_type = 'heating';
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≥–∞–∑–∞ –∏ —Ç–µ–ø–ª–∞ –∏–∑ russian-document-patterns.ts
  for (const patternGroup of GAS_HEAT_EXTRACTION_PATTERNS) {
    for (const regex of patternGroup.patterns) {
      let match;
      while ((match = regex.exec(text)) !== null) {
        if (patternGroup.category === 'heat' || patternGroup.category === 'thermal') {
          const value = parseNumericValue(match[1]);
          if (value > 0) {
            const context = match[0].toLowerCase();
            if (context.includes('–≥–∫–∞–ª') || context.includes('gcal')) {
              consumption_gcal += value;
              consumption_gj += value * 4.184; // –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≥–∫–∞–ª –≤ –ì–î–∂
            } else if (context.includes('–≥–¥–∂') || context.includes('gj')) {
              consumption_gj += value;
              consumption_gcal += value / 4.184; // –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ì–î–∂ –≤ –≥–∫–∞–ª
            } else if (context.includes('–º–¥–∂') || context.includes('mj')) {
              consumption_gj += value / 1000; // –ú–î–∂ –≤ –ì–î–∂
              consumption_gcal += value / 4184; // –ú–î–∂ –≤ –≥–∫–∞–ª
            }
          }
        }
      }
    }
  }
  
  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ç–µ–ø–ª–æ–≤–æ–π —ç–Ω–µ—Ä–≥–∏–∏
  if (/(–≥–≤—Å|–≥–æ—Ä—è—á–µ–µ\s*–≤–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ|hot\s*water)/gi.test(text)) {
    energy_type = 'hot_water';
  } else if (/(–æ—Ç–æ–ø–ª–µ–Ω–∏–µ|heating)/gi.test(text)) {
    energy_type = 'heating';
  } else if (/(—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è|–ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è|–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–∞—è)/gi.test(text)) {
    energy_type = 'industrial';
  }
  
  return {
    consumption_gcal,
    consumption_gj,
    energy_type
  };
}

/**
 * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
 */
function extractTransportDataFromText(text: string): {
  distance_km: number;
  transport_type: string;
  vehicle_class: string;
  cargo_weight: number;
} {
  let distance = 0;
  let transport_type = 'unknown';
  let vehicle_class = 'unknown';
  let cargo_weight = 0;
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –∏–∑ russian-document-patterns.ts
  for (const patternGroup of TRANSPORT_EXTRACTION_PATTERNS) {
    for (const regex of patternGroup.patterns) {
      let match;
      while ((match = regex.exec(text)) !== null) {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
        if (patternGroup.category === 'transport' && patternGroup.subcategory.includes('distance')) {
          const value = parseNumericValue(match[1]);
          if (value > 0) {
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∫–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            const context = match[0].toLowerCase();
            if (context.includes('–º') && !context.includes('–∫–º')) {
              distance += value / 1000; // –º–µ—Ç—Ä—ã –≤ –∫–∏–ª–æ–º–µ—Ç—Ä—ã
            } else if (context.includes('–º–∏–ª—è') || context.includes('mil')) {
              distance += value * 1.60934; // –º–∏–ª–∏ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä—ã
            } else {
              distance += value;
            }
          }
        }
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –º–∞—Å—Å—É –≥—Ä—É–∑–∞
        if (patternGroup.subcategory.includes('cargo') || patternGroup.subcategory.includes('weight')) {
          const weight = parseNumericValue(match[1]);
          if (weight > 0) {
            cargo_weight += weight;
          }
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –∏–∑ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if (patternGroup.subcategory.includes('aviation')) {
          transport_type = 'aviation';
        } else if (patternGroup.subcategory.includes('railway')) {
          transport_type = 'railway';
        } else if (patternGroup.subcategory.includes('road')) {
          transport_type = 'road';
        } else if (patternGroup.subcategory.includes('marine')) {
          transport_type = 'marine';
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞—Å—Å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
        if (patternGroup.subcategory.includes('passenger')) {
          vehicle_class = 'passenger';
        } else if (patternGroup.subcategory.includes('freight')) {
          vehicle_class = 'freight';
        } else if (patternGroup.subcategory.includes('cargo')) {
          vehicle_class = 'freight';
        }
      }
    }
  }
  
  // –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ü–û–õ–ù–´–ï –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –≤–µ—Å–∞ –≥—Ä—É–∑–∞
  const weightPatterns = [
    // ========== –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –º–∞—Å—Å—ã ==========
    /(–≤–µ—Å|–º–∞—Å—Å–∞|–≥—Ä—É–∑|–∑–∞–≥—Ä—É–∑–∫–∞|–Ω–∞–≥—Ä—É–∑–∫–∞|weight|load)[_:\s]*(\d+[,.]?\d*)\s*(—Ç|—Ç–æ–Ω–Ω|—Ç–æ–Ω–Ω—ã?|kg|–∫–≥|–∫–∏–ª–æ–≥—Ä–∞–º–º)/gi,
    /(\d+[,.]?\d*)\s*(—Ç|—Ç–æ–Ω–Ω|—Ç–æ–Ω–Ω—ã?|kg|–∫–≥|–∫–∏–ª–æ–≥—Ä–∞–º–º)\s*.*?(–≥—Ä—É–∑|–≤–µ—Å|–º–∞—Å—Å–∞|load)/gi,
    
    // ========== –ì—Ä—É–∑–æ–ø–æ–¥—ä–µ–º–Ω–æ—Å—Ç—å ==========
    /(–≥—Ä—É–∑–æ–ø–æ–¥—ä–µ–º–Ω–æ—Å—Ç—å|carrying\s*capacity|payload)[\s\S]*?(\d+[,.]?\d*)\s*(—Ç|—Ç–æ–Ω–Ω)/gi,
    /(–ø–æ–ª–Ω–∞—è\s*–º–∞—Å—Å–∞|gross\s*weight|–ø–æ–ª–Ω—ã–π\s*–≤–µ—Å)[\s\S]*?(\d+[,.]?\d*)\s*(—Ç|—Ç–æ–Ω–Ω|–∫–≥)/gi,
    /(—Å–Ω–∞—Ä—è–∂–µ–Ω–Ω–∞—è\s*–º–∞—Å—Å–∞|curb\s*weight)[\s\S]*?(\d+[,.]?\d*)\s*(—Ç|—Ç–æ–Ω–Ω|–∫–≥)/gi,
    
    // ========== –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ==========
    /—Ç–æ–≤–∞—Ä[_:\s]*([^\\n]*)[\\s\\S]*?–º–∞—Å—Å–∞[_:\s]*(\d+[,.]?\d*)\s*(—Ç|—Ç–æ–Ω–Ω|–∫–≥)/gi,
    /–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ[_:\s]*([^\\n]*)[\\s\\S]*?–≤–µ—Å[_:\s]*(\d+[,.]?\d*)\s*(—Ç|—Ç–æ–Ω–Ω|–∫–≥)/gi,
    /–≥—Ä—É–∑[_:\s]*([^\\n]*)[\\s\\S]*?(\d+[,.]?\d*)\s*(—Ç|—Ç–æ–Ω–Ω|–∫–≥)/gi,
    
    // ========== –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è ==========
    /(–∫\s*–ø–µ—Ä–µ–≤–æ–∑–∫–µ|–ø–µ—Ä–µ–≤–æ–∑–∏–º—ã–π\s*–≥—Ä—É–∑|cargo\s*weight)[\s\S]*?(\d+[,.]?\d*)\s*(—Ç|—Ç–æ–Ω–Ω|–∫–≥)/gi,
    /(–Ω–∞–∫–ª–∞–¥–Ω–∞—è|waybill)[\s\S]*?(–º–∞—Å—Å–∞|–≤–µ—Å)[\s\S]*?(\d+[,.]?\d*)\s*(—Ç|—Ç–æ–Ω–Ω|–∫–≥)/gi,
    /(–±—Ä—É—Ç—Ç–æ|–Ω–µ—Ç—Ç–æ|gross|net)[\s\S]*?(\d+[,.]?\d*)\s*(—Ç|—Ç–æ–Ω–Ω|–∫–≥)/gi,
    
    // ========== –¢–∞–±–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã ==========
    /(–º–∞—Å—Å–∞|–≤–µ—Å|–≥—Ä—É–∑|—Ç)[^|\\n]*\|[^|]*(\d+[,.]?\d*)/gi,
    /([^;,\\n]*(?:–º–∞—Å—Å–∞|–≤–µ—Å|–≥—Ä—É–∑|—Ç)[^;,\\n]*)[;,][^;,]*(\d+[,.]?\d*)/gi,
    
    // ========== –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ ==========
    /(–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è\s*–∑–∞–≥—Ä—É–∑–∫–∞|max\s*load)[\s\S]*?(\d+[,.]?\d*)\s*(—Ç|—Ç–æ–Ω–Ω)/gi,
    /(—Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–∞—è\s*–º–∞—Å—Å–∞|–¥–æ–ø—É—Å—Ç–∏–º—ã–π\s*–≤–µ—Å)[\s\S]*?(\d+[,.]?\d*)\s*(—Ç|—Ç–æ–Ω–Ω)/gi
  ];
  
  for (const pattern of weightPatterns) {
    let match;
    while ((match = pattern.exec(text)) !== null) {
      const value = parseNumericValue(match[match.length - 2] || match[2] || match[1]);
      if (value > 0) {
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ç–æ–Ω–Ω—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        const unit = (match[match.length - 1] || '').toLowerCase();
        if (unit.includes('–∫–≥') || unit.includes('kg')) {
          cargo_weight += value / 1000; // –∫–∏–ª–æ–≥—Ä–∞–º–º—ã –≤ —Ç–æ–Ω–Ω—ã
        } else {
          cargo_weight += value;
        }
      }
    }
  }
  
  return {
    distance_km: distance,
    transport_type,
    vehicle_class,
    cargo_weight
  };
}

/**
 * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–π OCR —Å–∏—Å—Ç–µ–º—ã
 */
async function extractWithMultiLevelOCR(
  documentId: string,
  filePath: string
): Promise<ExtractedDocumentData> {
  console.log(`üîç Starting multi-level OCR extraction for document: ${documentId}`);
  
  try {
    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –¥–ª—è OCR –æ–±—Ä–∞–±–æ—Ç–∫–∏
    const fs = require('fs');
    const fileBuffer = fs.readFileSync(filePath);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—É—é OCR —Å–∏—Å—Ç–µ–º—É
    const ocrResult = await processImageMultiLevel(fileBuffer, {
      preferredSource: 'auto',
      enableFallback: true,
      minConfidence: 0.5
    });
    
    console.log(`‚úÖ OCR completed via ${ocrResult.source}: ${ocrResult.text.length} chars, confidence: ${ocrResult.confidence}`);
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    const extractedData = await extractDocumentDataFromText(ocrResult.text, documentId);
    
    const confidence = Math.min(ocrResult.confidence * 0.9, 0.95); // –ù–µ–º–Ω–æ–≥–æ —Å–Ω–∏–∂–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
    const dataQuality = confidence > 0.8 ? 'high' : confidence > 0.6 ? 'medium' : 'low';
    
    return {
      documentId,
      documentType: extractedData.documentType || 'ocr_processed',
      confidence,
      extractedFields: {
        ...extractedData.extractedFields,
        ocr_source: ocrResult.source,
        ocr_text: ocrResult.text.slice(0, 1000), // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤—ã–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤
        processing_time_ms: ocrResult.processingTime
      },
      emissions: extractedData.emissions || { co2_kg: 0, ch4_kg: 0, n2o_kg: 0, calculation_method: 'ocr_error', confidence: 0 },
      metadata: {
        classification_confidence: confidence,
        fields_extracted: Object.keys(extractedData.extractedFields || {}).length,
        fields_expected: 5,
        data_quality: dataQuality
      }
    };
    
  } catch (error) {
    console.error('Multi-level OCR extraction failed:', error);
    
    // Fallback: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å –æ—à–∏–±–∫–æ–π
    return {
      documentId,
      documentType: 'ocr_error',
      confidence: 0,
      extractedFields: { 
        error: error instanceof Error ? error.message : String(error),
        fallback_attempted: true
      },
      emissions: { co2_kg: 0, ch4_kg: 0, n2o_kg: 0, calculation_method: 'ocr_error', confidence: 0 },
      metadata: { classification_confidence: 0, fields_extracted: 0, fields_expected: 0, data_quality: 'low' }
    };
  }
}

/**
 * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤
 */
async function extractWithIntelligentProcessor(
  documentId: string,
  filePath: string
): Promise<ExtractedDocumentData> {
  console.log(`ü§ñ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞: ${documentId} (${filePath})`);
  
  const startTime = Date.now();
  const errors: string[] = [];
  const warnings: string[] = [];
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –¥–ª—è –º–µ—Ç—Ä–∏–∫
    const fileStats = fs.statSync(filePath);
    const fileType = path.extname(filePath).toLowerCase();
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤
    const processingResult: ParsingResult = await processFileIntelligently(filePath);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ confidence –∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
    const isSuccess = processingResult.confidence > 0.3 && processingResult.text.length > 0;
    if (!isSuccess) {
      const errorMsg = processingResult.errors?.join(', ') || 'Low confidence or empty result';
      throw new Error(`–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: ${errorMsg}`);
    }
    
    console.log(`‚úÖ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å ${processingResult.confidence}`);
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—è –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
    const extractedFields = {
      fullText: processingResult.text,
      ...(processingResult.metadata || {})
    };
    
    console.log(`üìä –ò–∑–≤–ª–µ—á–µ–Ω–æ –ø–æ–ª–µ–π: ${Object.keys(extractedFields).length}`);
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–ª–æ–≤–∞—Ä—å —Å–∏–Ω–æ–Ω–∏–º–æ–≤ –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏–∏
    const normalizedFields = normalizeFieldsWithSynonyms(extractedFields);
    console.log(`üîÑ –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é —Å–ª–æ–≤–∞—Ä—è —Å–∏–Ω–æ–Ω–∏–º–æ–≤: ${Object.keys(normalizedFields).length} –ø–æ–ª–µ–π`);
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª–µ–π
    const fuelData = extractFuelData(normalizedFields);
    const electricityData = extractElectricityData(normalizedFields);
    const thermalData = extractThermalEnergyDataFromText(processingResult.text || '');
    const transportData = extractTransportData(normalizedFields);
    const industrialProcessData = extractIndustrialProcessData(normalizedFields);
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—ã–±—Ä–æ—Å—ã –ø–æ —Ä–æ—Å—Å–∏–π—Å–∫–∏–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º 2025
    const baseEmissions = calculateRussianEmissions(fuelData, electricityData, thermalData, transportData);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–æ—Å—ã –æ—Ç F-–≥–∞–∑–æ–≤ –∏ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    let fgasEmissions = 0;
    for (const fgas of industrialProcessData.fgases) {
      fgasEmissions += fgas.co2_equivalent;
    }
    
    let industrialEmissions = 0;
    for (const process of industrialProcessData.industrial_processes) {
      industrialEmissions += process.co2_kg;
    }
    
    const totalCO2 = baseEmissions.co2_kg + fgasEmissions + industrialEmissions;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    const documentType = processingResult.source || 'intelligent_processed';
    
    // –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
    const extractedDataCount = (fuelData.length > 0 ? 2 : 0) + 
                              (electricityData.consumption_kwh > 0 ? 2 : 0) +
                              (thermalData && thermalData.consumption_gcal > 0 ? 2 : 0) +
                              (transportData.distance_km > 0 ? 1 : 0) +
                              (industrialProcessData.fgases.length > 0 ? 1 : 0) +
                              (industrialProcessData.industrial_processes.length > 0 ? 1 : 0);
    
    const dataQuality = processingResult.confidence > 0.8 ? 'high' : 
                       processingResult.confidence > 0.6 ? 'medium' : 'low';
    
    const result: ExtractedDocumentData = {
      documentId,
      documentType,
      confidence: processingResult.confidence,
      extractedFields: {
        fullText: (processingResult.text || '').substring(0, 1000),
        fuel_data: fuelData,
        electricity_data: electricityData,
        thermal_data: thermalData,
        transport_data: transportData,
        fgas_data: industrialProcessData.fgases,
        industrial_processes: industrialProcessData.industrial_processes,
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        processing_method: processingResult.source,
        processing_time: processingResult.processingTime,
        normalized_fields: normalizedFields,
        extraction_warnings: processingResult.warnings || []
      },
      emissions: {
        co2_kg: totalCO2,
        ch4_kg: baseEmissions.ch4_kg,
        n2o_kg: baseEmissions.n2o_kg,
        fgas_co2_equivalent: fgasEmissions,
        industrial_process_co2: industrialEmissions,
        calculation_method: 'intelligent_processor_2025_with_synonyms',
        confidence: totalCO2 > 0 ? 0.9 : 0.4
      },
      metadata: {
        classification_confidence: processingResult.confidence,
        fields_extracted: extractedDataCount,
        fields_expected: 8, // –£–≤–µ–ª–∏—á–∏–ª–∏ –æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª–µ–π –∏–∑-–∑–∞ F-–≥–∞–∑–æ–≤ –∏ –ø—Ä–æ–º–ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        data_quality: dataQuality
      }
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    savePatternsLog(`intelligent_extraction_${documentId}`, {
      documentId,
      filePath,
      processingResult: {
        success: processingResult.success,
        parser: processingResult.parser,
        confidence: processingResult.confidence,
        attempts: processingResult.attempts?.length || 1,
        detectedFormat: processingResult.detectedFormat
      },
      extractedData: {
        fuelDataCount: fuelData.length,
        electricityConsumption: electricityData.consumption_kwh,
        thermalConsumption: thermalData?.consumption_gcal || 0,
        transportDistance: transportData.distance_km,
        fgasCount: industrialProcessData.fgases.length,
        industrialProcessCount: industrialProcessData.industrial_processes.length
      },
      emissions: {
        total_co2: totalCO2,
        base_co2: baseEmissions.co2_kg,
        fgas_co2: fgasEmissions,
        industrial_co2: industrialEmissions
      },
      timestamp: new Date().toISOString()
    });
    
    console.log(`üéâ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–∞: CO2=${totalCO2.toFixed(2)}–∫–≥ (–±–∞–∑–∞: ${baseEmissions.co2_kg.toFixed(2)}, F-–≥–∞–∑—ã: ${fgasEmissions.toFixed(2)}, –ø—Ä–æ–º–ø—Ä–æ—Ü–µ—Å—Å—ã: ${industrialEmissions.toFixed(2)})`);
    
    // –°–ë–û–† –ú–ï–¢–†–ò–ö
    const endTime = Date.now();
    const synonymsApplied = Object.keys(normalizedFields).filter(key => 
      key.includes('_synonyms') || key.includes('_category')).length;
    
    const processingMetrics: ProcessingMetrics = {
      documentId,
      filePath,
      fileSize: fileStats.size,
      fileType,
      processingMethod: 'intelligent_processor',
      startTime,
      endTime,
      processingTimeMs: endTime - startTime,
      
      parserUsed: processingResult.source,
      fallbackAttempts: 0, // ParsingResult –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ø—ã—Ç–∫–∞—Ö
      confidence: processingResult.confidence,
      
      fieldsExtracted: extractedDataCount,
      fieldsExpected: 8,
      extractionSuccess: totalCO2 > 0 || extractedDataCount >= 4,
      dataQuality: dataQuality,
      
      fuelDataExtracted: fuelData.length,
      electricityDataExtracted: electricityData.consumption_kwh > 0,
      thermalDataExtracted: (thermalData && thermalData.consumption_gcal > 0) || false,
      transportDataExtracted: transportData.distance_km > 0,
      fgasDataExtracted: industrialProcessData.fgases.length,
      industrialProcessesExtracted: industrialProcessData.industrial_processes.length,
      
      totalCO2Calculated: totalCO2,
      baseEmissions: baseEmissions.co2_kg,
      fgasEmissions,
      industrialEmissions,
      emissionCalculationMethod: 'intelligent_processor_2025_with_synonyms',
      
      synonymsApplied,
      fieldsNormalized: Object.keys(normalizedFields).length,
      categoriesIdentified: Object.keys(normalizedFields).filter(key => key.includes('_category')).length,
      
      errors: processingResult.errors || [],
      warnings: processingResult.warnings || [],
      fallbackReason: undefined, // ParsingResult –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ fallback
      
      timestamp: new Date().toISOString()
    };
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
    metricsCollector.recordProcessingMetrics(processingMetrics);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
    const qualityAnalysis = metricsCollector.analyzeExtractionQuality(processingMetrics);
    console.log(`üìä –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: ${qualityAnalysis.overallScore}/100`);
    if (qualityAnalysis.recommendations.length > 0) {
      console.log(`üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: ${qualityAnalysis.recommendations.join(', ')}`);
    }
    
    return result;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏:', error);
    
    // –°–ë–û–† –ú–ï–¢–†–ò–ö –î–õ–Ø –û–®–ò–ë–û–ö
    const endTime = Date.now();
    const errorMessage = error instanceof Error ? error.message : String(error);
    errors.push(errorMessage);
    
    const processingMetrics: ProcessingMetrics = {
      documentId,
      filePath,
      fileSize: (fileStats && fileStats.size) || 0,
      fileType: path.extname(filePath).toLowerCase(),
      processingMethod: 'intelligent_processor_failed',
      startTime,
      endTime,
      processingTimeMs: endTime - startTime,
      
      parserUsed: 'none',
      fallbackAttempts: 1,
      confidence: 0,
      
      fieldsExtracted: 0,
      fieldsExpected: 8,
      extractionSuccess: false,
      dataQuality: 'low',
      
      fuelDataExtracted: 0,
      electricityDataExtracted: false,
      thermalDataExtracted: false,
      transportDataExtracted: false,
      fgasDataExtracted: 0,
      industrialProcessesExtracted: 0,
      
      totalCO2Calculated: 0,
      baseEmissions: 0,
      fgasEmissions: 0,
      industrialEmissions: 0,
      emissionCalculationMethod: 'failed',
      
      synonymsApplied: 0,
      fieldsNormalized: 0,
      categoriesIdentified: 0,
      
      errors,
      warnings,
      fallbackReason: `Intelligent processor failed: ${errorMessage}`,
      
      timestamp: new Date().toISOString()
    };
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–∞–∂–µ –¥–ª—è –æ—à–∏–±–æ–∫
    metricsCollector.recordProcessingMetrics(processingMetrics);
    
    // Fallback –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ
    throw error; // –ü–æ–∑–≤–æ–ª—è–µ–º fallback –∫ —Å—Ç–∞—Ä–æ–º—É –º–µ—Ç–æ–¥—É
  }
}

/**
 * –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –ø–æ–ª—è —Å –ø–æ–º–æ—â—å—é —Å–ª–æ–≤–∞—Ä—è —Å–∏–Ω–æ–Ω–∏–º–æ–≤
 */
function normalizeFieldsWithSynonyms(fields: Record<string, any>): Record<string, any> {
  const normalizedFields: Record<string, any> = {};
  
  for (const [key, value] of Object.entries(fields)) {
    const keyStr = String(key).toLowerCase();
    const valueStr = String(value).toLowerCase();
    
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–ª—é—á –ø–æ–ª—è
    let normalizedKey = key;
    const canonicalKey = findCanonical(keyStr);
    if (canonicalKey) {
      normalizedKey = canonicalKey;
    }
    
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è
    let normalizedValue = value;
    const canonicalValue = findCanonical(valueStr);
    if (canonicalValue) {
      normalizedValue = canonicalValue;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∏—Å–∫–∞
    const keySynonyms = getSynonyms(keyStr);
    const valueSynonyms = getSynonyms(valueStr);
    
    normalizedFields[normalizedKey] = normalizedValue;
    
    // –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
    if (keySynonyms.length > 0) {
      normalizedFields[`${normalizedKey}_synonyms`] = keySynonyms;
    }
    if (valueSynonyms.length > 0) {
      normalizedFields[`${normalizedKey}_value_synonyms`] = valueSynonyms;
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ–ª—è
    const category = getCategory(keyStr) || getCategory(valueStr);
    if (category) {
      normalizedFields[`${normalizedKey}_category`] = category;
    }
  }
  
  return normalizedFields;
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
 */
async function extractDocumentDataFromText(text: string, documentId: string): Promise<Partial<ExtractedDocumentData>> {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
  const pattern = findDocumentPattern(text);
  const priorityFields = getPriorityFields(text, pattern?.type || 'unknown');
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–∏–ø–∞–º
  const fuelData = extractFuelData({ fullText: text });
  const electricityData = extractElectricityData({ fullText: text });
  const transportData = extractTransportData({ fullText: text });
  
  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—ã–±—Ä–æ—Å—ã
  const emissions = calculateRussianEmissions(fuelData, electricityData, undefined, transportData);
  
  return {
    documentType: pattern?.type || 'unknown_document',
    extractedFields: {
      fuel_data: fuelData,
      electricity_data: electricityData,
      transport_data: transportData,
      priority_fields: priorityFields
    },
    emissions: {
      co2_kg: emissions.co2_kg,
      ch4_kg: emissions.ch4_kg,
      n2o_kg: emissions.n2o_kg,
      calculation_method: 'pattern_extraction_2025',
      confidence: emissions.co2_kg > 0 ? 0.8 : 0.3
    }
  };
}