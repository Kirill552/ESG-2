/**
 * Regex-based fallback –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–≥–¥–∞ GLM –Ω–µ —Å–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö
 */

export interface TransportData {
  vehicle: {
    model: string;
    licensePlate: string;
    modelConfidence: number;
  };
  route: {
    from: string;
    to: string;
    fromCity: string;
    toCity: string;
  };
  cargo?: {
    weight: number;
    unit: string;
  };
  confidence: number;
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–º —Å—Ä–µ–¥—Å—Ç–≤–µ
 */
function extractVehicle(text: string): { model: string; licensePlate: string; confidence: number } {
  // –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –º–∞—Ä–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–ö–ê–ú–ê–ó, –ì–∞–∑–µ–ª—å, –ú–ê–ó, –∏ —Ç.–¥.)
  const vehicleModels = [
    '–ö–ê–ú–ê–ó', '–ö–∞–º–∞–∑', '–∫–∞–º–∞–∑',
    '–ì–∞–∑–µ–ª—å', '–ì–ê–ó–ï–õ–¨', '–≥–∞–∑–µ–ª—å',
    '–ú–ê–ó', '–ú–∞–∑', '–º–∞–∑',
    '–ó–ò–õ', '–ó–∏–ª', '–∑–∏–ª',
    '–ú–µ—Ä—Å–µ–¥–µ—Å', '–ú–ï–†–°–ï–î–ï–°', '–º–µ—Ä—Å–µ–¥–µ—Å', 'Mercedes',
    '–í–æ–ª—å–≤–æ', 'VOLVO', 'Volvo',
    '–°–∫–∞–Ω–∏—è', 'SCANIA', 'Scania',
    '–ú–ê–ù', 'MAN', 'Man',
    '–§—É—Ä–∞', '—Ñ—É—Ä–∞', '–§–£–†–ê',
    '–¢—è–≥–∞—á', '—Ç—è–≥–∞—á', '–¢–Ø–ì–ê–ß'
  ];

  let model = '';
  let modelConfidence = 0;

  // –ò—â–µ–º –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è
  for (const vehicleModel of vehicleModels) {
    const regex = new RegExp(`(${vehicleModel})(?:\\s+|\\,|\\.)`, 'i');
    const match = text.match(regex);
    if (match) {
      model = match[1];
      modelConfidence = 0.9;
      break;
    }
  }

  // –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –≥–æ—Å–Ω–æ–º–µ—Ä–∞ (—Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã)
  // –ü—Ä–∏–º–µ—Ä—ã: "–¢ 223 –ù–ú 196", "–ö123–ê–í77", "–†395–ê–£40", "–ê 123 –í–° 199 RUS"
  const licensePlatePatterns = [
    /([–ê-–Ø–Å]\s?\d{3}\s?[–ê-–Ø–Å]{2}\s?\d{2,3}(?:\s?RUS)?)/gi,  // –¢ 223 –ù–ú 196 RUS
    /([–ê-–Ø–Å]\d{3}[–ê-–Ø–Å]{2}\d{2,3})/gi,                      // –ö123–ê–í77
    /(?:–≥\/–Ω|–≥–æ—Å–Ω–æ–º–µ—Ä|–≥–æ—Å\.–Ω–æ–º–µ—Ä|–Ω–æ–º–µ—Ä)[:\s]+([–ê-–Ø–Å\d\s]{8,15})/gi  // –ü–æ—Å–ª–µ —Å–ª–æ–≤–∞ "–≥–æ—Å–Ω–æ–º–µ—Ä"
  ];

  let licensePlate = '';
  for (const pattern of licensePlatePatterns) {
    const match = text.match(pattern);
    if (match) {
      licensePlate = match[0].trim();
      break;
    }
  }

  return {
    model: model || '',
    licensePlate: licensePlate || '',
    confidence: (model && licensePlate) ? 0.85 : (model || licensePlate) ? 0.5 : 0
  };
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –º–∞—Ä—à—Ä—É—Ç–µ
 */
function extractRoute(text: string): { from: string; to: string; fromCity: string; toCity: string; confidence: number } {
  // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞
  const routePatterns = [
    // "–ú–∞—Ä—à—Ä—É—Ç: –ú–æ—Å–∫–≤–∞ ‚Üí –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"
    /(?:–ú–∞—Ä—à—Ä—É—Ç|–º–∞—Ä—à—Ä—É—Ç)[:\s]+([^‚Üí\-]+)(?:‚Üí|\-|–¥–æ)([^\n\r\.,]+)/i,

    // "–ü—É–Ω–∫—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ... –ü—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: ..."
    /(?:–ü—É–Ω–∫—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è|–û—Ç–∫—É–¥–∞|–û—Ç)[:\s]+([^\n\r]+?)(?=–ü—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è|–ö—É–¥–∞|–î–æ|\\n)/i,

    // "–≥. –ú–æ—Å–∫–≤–∞ - –≥. –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"
    /(?:–≥\.|–≥–æ—Ä–æ–¥|—Å\.|—Å–µ–ª–æ)\s?([–ê-–Ø–Å–∞-—è—ë\-\s]+?)(?:\s?(?:‚Üí|\-|–¥–æ)\s?)(?:–≥\.|–≥–æ—Ä–æ–¥|—Å\.|—Å–µ–ª–æ)\s?([–ê-–Ø–Å–∞-—è—ë\-\s]+)/i
  ];

  let from = '';
  let to = '';
  let confidence = 0;

  // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –º–∞—Ä—à—Ä—É—Ç
  for (const pattern of routePatterns) {
    const match = text.match(pattern);
    if (match && match.length >= 3) {
      from = match[1].trim();
      to = match[2].trim();
      confidence = 0.8;
      break;
    }
  }

  // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–ª–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç, –∏—â–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ "–æ—Ç–∫—É–¥–∞" –∏ "–∫—É–¥–∞"
  if (!from || !to) {
    const fromPattern = /(?:–ü—É–Ω–∫—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è|–û—Ç–∫—É–¥–∞|–û—Ç|–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ)[:\s]+([–ê-–Ø–Å–∞-—è—ë\s\-,\.0-9]+?)(?=–ü—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è|–ö—É–¥–∞|–î–æ|–ü—Ä–∏–±—ã—Ç–∏–µ|\\n)/i;
    const toPattern = /(?:–ü—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è|–ö—É–¥–∞|–î–æ|–ü—Ä–∏–±—ã—Ç–∏–µ)[:\s]+([–ê-–Ø–Å–∞-—è—ë\s\-,\.0-9]+?)(?=\\n|–í–æ–¥–∏—Ç–µ–ª—å|–ì—Ä—É–∑|–ú–∞—Å—Å–∞)/i;

    const fromMatch = text.match(fromPattern);
    const toMatch = text.match(toPattern);

    if (fromMatch) from = fromMatch[1].trim();
    if (toMatch) to = toMatch[1].trim();

    if (from && to) confidence = 0.75;
  }

  // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (–±–µ–∑ "–≥.", –æ–±–ª–∞—Å—Ç–∏, –∏–Ω–¥–µ–∫—Å–∞)
  const extractCityName = (fullAddress: string): string => {
    // –£–±–∏—Ä–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã (6 —Ü–∏—Ñ—Ä –≤ –Ω–∞—á–∞–ª–µ)
    let cleaned = fullAddress.replace(/^\d{6}\s*/, '');

    // –£–±–∏—Ä–∞–µ–º "–≥.", "–≥–æ—Ä–æ–¥", "—Å.", "—Å–µ–ª–æ"
    cleaned = cleaned.replace(/^(?:–≥\.|–≥–æ—Ä–æ–¥|—Å\.|—Å–µ–ª–æ)\s*/i, '');

    // –£–±–∏—Ä–∞–µ–º –æ–±–ª–∞—Å—Ç—å/–∫—Ä–∞–π/—Ä–µ—Å–ø—É–±–ª–∏–∫—É (–≤—Å–µ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π –∏–ª–∏ "–æ–±–ª.", "–∫—Ä–∞–π")
    cleaned = cleaned.replace(/[,;]\s*[–ê-–Ø–Å–∞-—è—ë\s]+?(?:–æ–±–ª\.|–æ–±–ª–∞—Å—Ç—å|–∫—Ä–∞–π|—Ä–µ—Å–ø—É–±–ª–∏–∫–∞).*/i, '');
    cleaned = cleaned.replace(/\s+(?:–æ–±–ª\.|–æ–±–ª–∞—Å—Ç—å|–∫—Ä–∞–π|—Ä–µ—Å–ø—É–±–ª–∏–∫–∞).*/i, '');

    return cleaned.trim();
  };

  const fromCity = from ? extractCityName(from) : '';
  const toCity = to ? extractCityName(to) : '';

  return {
    from,
    to,
    fromCity,
    toCity,
    confidence: (fromCity && toCity) ? confidence : confidence * 0.5
  };
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –≥—Ä—É–∑–µ
 */
function extractCargo(text: string): { weight: number; unit: string } | undefined {
  // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –≥—Ä—É–∑–∞
  const cargoPatterns = [
    /(?:–ú–∞—Å—Å–∞|–í–µ—Å|–ì—Ä—É–∑|–º–∞—Å—Å–∞|–≤–µ—Å|–≥—Ä—É–∑)[:\s]+(\d+(?:[.,]\d+)?)\s*(—Ç|—Ç–æ–Ω–Ω|–∫–≥|–∫–∏–ª–æ–≥—Ä–∞–º–º)/i,
    /(?:–±—Ä—É—Ç—Ç–æ|–Ω–µ—Ç—Ç–æ)[:\s]+(\d+(?:[.,]\d+)?)\s*(—Ç|—Ç–æ–Ω–Ω|–∫–≥|–∫–∏–ª–æ–≥—Ä–∞–º–º)/i
  ];

  for (const pattern of cargoPatterns) {
    const match = text.match(pattern);
    if (match) {
      const weight = parseFloat(match[1].replace(',', '.'));
      const unit = match[2].toLowerCase().startsWith('—Ç') ? '—Ç' : '–∫–≥';
      return { weight, unit };
    }
  }

  return undefined;
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é regex
 */
export function extractTransportDataRegex(text: string): TransportData {
  console.log('üîß Regex fallback: –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞...');

  const vehicle = extractVehicle(text);
  const route = extractRoute(text);
  const cargo = extractCargo(text);

  // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
  const confidence = (vehicle.confidence + route.confidence) / 2;

  console.log('üîç Regex extraction results:', {
    vehicle: vehicle.model || '–ù–ï –ù–ê–ô–î–ï–ù–û',
    licensePlate: vehicle.licensePlate || '–ù–ï –ù–ê–ô–î–ï–ù–û',
    fromCity: route.fromCity || '–ù–ï –ù–ê–ô–î–ï–ù–û',
    toCity: route.toCity || '–ù–ï –ù–ê–ô–î–ï–ù–û',
    cargo: cargo ? `${cargo.weight} ${cargo.unit}` : '–ù–ï –ù–ê–ô–î–ï–ù–û',
    confidence: confidence.toFixed(2)
  });

  return {
    vehicle: {
      model: vehicle.model,
      licensePlate: vehicle.licensePlate,
      modelConfidence: vehicle.confidence
    },
    route: {
      from: route.from,
      to: route.to,
      fromCity: route.fromCity,
      toCity: route.toCity
    },
    cargo,
    confidence
  };
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è—é—Ç—Å—è –ª–∏ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã–º–∏
 */
export function isValidTransportData(data: TransportData): boolean {
  return !!(
    data.vehicle.model &&
    data.vehicle.licensePlate &&
    data.route.fromCity &&
    data.route.toCity
  );
}
