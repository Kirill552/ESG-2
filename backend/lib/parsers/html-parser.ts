/**
 * HTML –ø–∞—Ä—Å–µ—Ä –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç node-html-parser –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ HTML –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
 */

import { parse, HTMLElement } from 'node-html-parser';
import {
  BaseParser,
  ParsedDocumentData,
  ParseOptions,
  ParserResult,
  RussianUnitsHelper
} from './base-parser';

export class HtmlParser extends BaseParser {
  protected readonly supportedFormats = ['html', 'htm'];

  /**
   * –ü–∞—Ä—Å–∏—Ç HTML —Ñ–∞–π–ª –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
   */
  async parse(buffer: Buffer, options: ParseOptions = {}): Promise<ParserResult> {
    const startTime = Date.now();

    try {
      console.log(`üåê HTML Parser: starting parse (${buffer.length} bytes)`);

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É
      const encoding = options.encoding === 'auto' || !options.encoding
        ? this.detectEncoding(buffer)
        : options.encoding;

      console.log(`üî§ HTML Parser: detected encoding ${encoding}`);

      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –±—É—Ñ–µ—Ä –≤ —Ç–µ–∫—Å—Ç
      let htmlContent: string;
      if (encoding === 'cp1251') {
        htmlContent = this.convertFromCp1251(buffer);
      } else {
        htmlContent = buffer.toString(encoding === 'cp866' ? 'binary' : 'utf8');
      }

      // –ü–∞—Ä—Å–∏–º HTML
      const root = parse(htmlContent, {
        blockTextElements: {
          script: false,
          noscript: false,
          style: false,
          pre: true,
        }
      });

      // –£–¥–∞–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç—ã –∏ —Å—Ç–∏–ª–∏
      root.querySelectorAll('script, style, noscript').forEach(element => {
        element.remove();
      });

      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ HTML
      const textLines = this.extractTextFromHtml(root);
      console.log(`üåê HTML Parser: extracted ${textLines.length} text lines`);

      if (textLines.length === 0) {
        return {
          success: false,
          error: 'No text content found in HTML',
          processingTime: Date.now() - startTime
        };
      }

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ä–æ—Å—Å–∏–π—Å–∫–∏–º –µ–¥–∏–Ω–∏—Ü–∞–º
      const extractedUnitsData = this.extractRussianUnitsData(textLines);

      // –û—Ü–µ–Ω–∏–≤–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
      const dataQuality = RussianUnitsHelper.assessDataQuality(
        extractedUnitsData.russian_units_found,
        textLines.length
      );

      const confidence = this.calculateConfidence(
        extractedUnitsData,
        textLines.length,
        dataQuality
      );

      const result: ParsedDocumentData = {
        documentType: 'txt', // HTML —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
        confidence,
        extractedData: {
          ...extractedUnitsData,
          raw_rows: options.maxRows ? textLines.slice(0, options.maxRows) : textLines,
          total_rows: textLines.length
        },
        metadata: {
          encoding,
          format_detected: 'HTML',
          processing_time_ms: Date.now() - startTime,
          russian_units_found: extractedUnitsData.russian_units_found,
          data_quality: dataQuality
        }
      };

      console.log(`‚úÖ HTML Parser: success! Found ${extractedUnitsData.russian_units_found.length} units, quality: ${dataQuality}`);

      return {
        success: true,
        data: result,
        processingTime: Date.now() - startTime
      };

    } catch (error) {
      console.error('‚ùå HTML Parser failed:', error);

      return {
        success: false,
        error: error instanceof Error ? error.message : String(error),
        processingTime: Date.now() - startTime
      };
    }
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ HTML —ç–ª–µ–º–µ–Ω—Ç–æ–≤
   */
  private extractTextFromHtml(root: HTMLElement): string[] {
    const textLines: string[] = [];

    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ç–∞–±–ª–∏—Ü (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    const tables = root.querySelectorAll('table');
    tables.forEach(table => {
      const rows = table.querySelectorAll('tr');
      rows.forEach(row => {
        const cells = row.querySelectorAll('td, th');
        const cellTexts: string[] = [];
        cells.forEach(cell => {
          const text = this.cleanText(cell.text);
          if (text) cellTexts.push(text);
        });
        if (cellTexts.length > 0) {
          textLines.push(cellTexts.join(' | '));
        }
      });
    });

    // –£–¥–∞–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—ã —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç
    tables.forEach(table => table.remove());

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω–æ–π —Ç–µ–∫—Å—Ç
    const textContent = root.text;
    const lines = textContent
      .split(/\n+/)
      .map(line => this.cleanText(line))
      .filter(line => line.length > 5); // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å—Ç—Ä–æ–∫–∏

    textLines.push(...lines);

    return textLines;
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML
   */
  private calculateConfidence(
    extractedData: any,
    totalRows: number,
    dataQuality: 'high' | 'medium' | 'low'
  ): number {
    let confidence = 0.5; // –ë–∞–∑–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è HTML

    // –ë–æ–Ω—É—Å –∑–∞ –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
    switch (dataQuality) {
      case 'high': confidence += 0.3; break;
      case 'medium': confidence += 0.2; break;
      case 'low': confidence += 0.1; break;
    }

    // –ë–æ–Ω—É—Å –∑–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã
    const unitsCount = extractedData.russian_units_found.length;
    confidence += Math.min(unitsCount * 0.02, 0.2);

    // –ë–æ–Ω—É—Å –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
    if (totalRows > 20) confidence += 0.1;
    if (totalRows > 100) confidence += 0.1;

    return Math.min(confidence, 0.9);
  }

  /**
   * –û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
   */
  private cleanText(text: string): string {
    return text
      .replace(/\s+/g, ' ')
      .replace(/[\u00A0\u2000-\u200B\u2028\u2029]/g, ' ')
      .trim();
  }

  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –±—É—Ñ–µ—Ä –∏–∑ CP1251 –≤ UTF-8
   */
  private convertFromCp1251(buffer: Buffer): string {
    // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä—É—Å—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    const cp1251Map: { [key: number]: string } = {
      192: '–ê', 193: '–ë', 194: '–í', 195: '–ì', 196: '–î', 197: '–ï', 198: '–ñ', 199: '–ó',
      200: '–ò', 201: '–ô', 202: '–ö', 203: '–õ', 204: '–ú', 205: '–ù', 206: '–û', 207: '–ü',
      208: '–†', 209: '–°', 210: '–¢', 211: '–£', 212: '–§', 213: '–•', 214: '–¶', 215: '–ß',
      216: '–®', 217: '–©', 218: '–™', 219: '–´', 220: '–¨', 221: '–≠', 222: '–Æ', 223: '–Ø',
      224: '–∞', 225: '–±', 226: '–≤', 227: '–≥', 228: '–¥', 229: '–µ', 230: '–∂', 231: '–∑',
      232: '–∏', 233: '–π', 234: '–∫', 235: '–ª', 236: '–º', 237: '–Ω', 238: '–æ', 239: '–ø',
      240: '—Ä', 241: '—Å', 242: '—Ç', 243: '—É', 244: '—Ñ', 245: '—Ö', 246: '—Ü', 247: '—á',
      248: '—à', 249: '—â', 250: '—ä', 251: '—ã', 252: '—å', 253: '—ç', 254: '—é', 255: '—è',
      168: '–Å', 184: '—ë'
    };

    let result = '';
    for (let i = 0; i < buffer.length; i++) {
      const byte = buffer[i];
      if (cp1251Map[byte]) {
        result += cp1251Map[byte];
      } else {
        result += String.fromCharCode(byte);
      }
    }

    return result;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª HTML —Ñ–æ—Ä–º–∞—Ç–æ–º
   */
  canParse(filename: string, mimeType?: string): boolean {
    const extension = filename.toLowerCase().split('.').pop();

    if (extension && this.supportedFormats.includes(extension)) {
      return true;
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ MIME —Ç–∏–ø—É
    if (mimeType) {
      const htmlMimeTypes = [
        'text/html',
        'application/xhtml+xml',
        'text/xhtml'
      ];

      return htmlMimeTypes.includes(mimeType);
    }

    return false;
  }
}