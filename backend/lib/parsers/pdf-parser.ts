/**
 * PDF –ø–∞—Ä—Å–µ—Ä –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç pdf-parse –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
 */

import pdfParse from 'pdf-parse';
import {
  BaseParser,
  ParsedDocumentData,
  ParseOptions,
  ParserResult,
  RussianUnitsHelper
} from './base-parser';

export class PdfParser extends BaseParser {
  protected readonly supportedFormats = ['pdf'];

  /**
   * –ü–∞—Ä—Å–∏—Ç PDF —Ñ–∞–π–ª –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
   */
  async parse(buffer: Buffer, options: ParseOptions = {}): Promise<ParserResult> {
    const startTime = Date.now();

    try {
      console.log(`üìÑ PDF Parser: starting parse (${buffer.length} bytes)`);

      // –ü–∞—Ä—Å–∏–º PDF
      const pdfData = await pdfParse(buffer, {
        max: options.maxRows || 100, // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        version: 'v1.10.100', // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é
      });

      console.log(`üìä PDF —Å–æ–¥–µ—Ä–∂–∏—Ç ${pdfData.numpages} —Å—Ç—Ä–∞–Ω–∏—Ü, ${pdfData.text.length} —Å–∏–º–≤–æ–ª–æ–≤`);

      if (!pdfData.text || pdfData.text.trim().length === 0) {
        return {
          success: false,
          error: 'No text content found in PDF',
          processingTime: Date.now() - startTime
        };
      }

      // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
      const lines = pdfData.text
        .split(/\n+/)
        .map(line => line.trim())
        .filter(line => line.length > 0);

      console.log(`üìÑ PDF Parser: extracted ${lines.length} text lines`);

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ä–æ—Å—Å–∏–π—Å–∫–∏–º –µ–¥–∏–Ω–∏—Ü–∞–º
      const extractedUnitsData = this.extractRussianUnitsData(lines);

      // –û—Ü–µ–Ω–∏–≤–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
      const dataQuality = RussianUnitsHelper.assessDataQuality(
        extractedUnitsData.russian_units_found,
        lines.length
      );

      const confidence = this.calculateConfidence(
        extractedUnitsData,
        lines.length,
        dataQuality,
        pdfData.numpages
      );

      const result: ParsedDocumentData = {
        documentType: 'txt', // PDF —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
        confidence,
        extractedData: {
          ...extractedUnitsData,
          raw_rows: options.maxRows ? lines.slice(0, options.maxRows) : lines,
          total_rows: lines.length
        },
        metadata: {
          format_detected: `PDF (${pdfData.numpages} pages)`,
          processing_time_ms: Date.now() - startTime,
          russian_units_found: extractedUnitsData.russian_units_found,
          data_quality: dataQuality
        }
      };

      console.log(`‚úÖ PDF Parser: success! Found ${extractedUnitsData.russian_units_found.length} units, quality: ${dataQuality}`);

      return {
        success: true,
        data: result,
        processingTime: Date.now() - startTime
      };

    } catch (error) {
      console.error('‚ùå PDF Parser failed:', error);

      return {
        success: false,
        error: error instanceof Error ? error.message : String(error),
        processingTime: Date.now() - startTime
      };
    }
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø–∞—Ä—Å–∏–Ω–≥–∞ PDF
   */
  private calculateConfidence(
    extractedData: any,
    totalRows: number,
    dataQuality: 'high' | 'medium' | 'low',
    totalPages: number
  ): number {
    let confidence = 0.4; // –ë–∞–∑–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è PDF (–Ω–∏–∂–µ —á–µ–º —É —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤)

    // –ë–æ–Ω—É—Å –∑–∞ –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
    switch (dataQuality) {
      case 'high': confidence += 0.4; break;
      case 'medium': confidence += 0.2; break;
      case 'low': confidence += 0.1; break;
    }

    // –ë–æ–Ω—É—Å –∑–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã
    const unitsCount = extractedData.russian_units_found.length;
    confidence += Math.min(unitsCount * 0.02, 0.3);

    // –ë–æ–Ω—É—Å –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –∏ —Å—Ç—Ä–∞–Ω–∏—Ü
    if (totalRows > 50) confidence += 0.1;
    if (totalPages > 1) confidence += 0.05;

    return Math.min(confidence, 0.95); // PDF —Ä–µ–¥–∫–æ –¥–∞—ë—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª PDF —Ñ–æ—Ä–º–∞—Ç–æ–º
   */
  canParse(filename: string, mimeType?: string): boolean {
    const extension = filename.toLowerCase().split('.').pop();

    if (extension && this.supportedFormats.includes(extension)) {
      return true;
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ MIME —Ç–∏–ø—É
    if (mimeType) {
      const pdfMimeTypes = [
        'application/pdf',
        'application/x-pdf'
      ];

      return pdfMimeTypes.includes(mimeType);
    }

    return false;
  }
}