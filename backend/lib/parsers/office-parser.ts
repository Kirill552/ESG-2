/**
 * –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –æ—Ñ–∏—Å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (2025)
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç OfficeParser –¥–ª—è DOCX, PPTX, XLSX, ODT, ODP, ODS —Ñ–∞–π–ª–æ–≤
 */

import * as fs from 'fs/promises';
import * as officeParser from 'officeparser';
import { BaseParser, ParsedDocument, ParsedRow, DataQuality } from './base-parser';

export interface OfficeParserOptions {
  newlineDelimiter?: string;
  ignoreNotes?: boolean;
  putNotesAtLast?: boolean;
  outputErrorToConsole?: boolean;
  extractMetadata?: boolean;
  splitByParagraphs?: boolean;
}

interface OfficeParserConfig {
  newlineDelimiter?: string;
  ignoreNotes?: boolean;
  putNotesAtLast?: boolean;
  outputErrorToConsole?: boolean;
}

export class OfficeDocumentParser extends BaseParser {
  private readonly options: Required<OfficeParserOptions>;
  
  // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã (—Å–æ–≥–ª–∞—Å–Ω–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ OfficeParser)
  private readonly supportedFormats = [
    '.docx', '.doc', '.pptx', '.ppt', '.xlsx', '.xls',
    '.odt', '.odp', '.ods', '.pdf'
  ];

  constructor(options: OfficeParserOptions = {}) {
    super();
    this.options = {
      newlineDelimiter: options.newlineDelimiter || '\n',
      ignoreNotes: options.ignoreNotes ?? false,
      putNotesAtLast: options.putNotesAtLast ?? false,
      outputErrorToConsole: options.outputErrorToConsole ?? false,
      extractMetadata: options.extractMetadata ?? true,
      splitByParagraphs: options.splitByParagraphs ?? true,
    };
  }

  async parseFile(filePath: string): Promise<ParsedDocument> {
    const startTime = Date.now();
    
    try {
      console.log(`üìÑ Office Parser: –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ ${filePath}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ñ–æ—Ä–º–∞—Ç–∞
      const format = this.detectFormat(filePath);
      if (!this.isFormatSupported(format)) {
        throw new Error(`–§–æ—Ä–º–∞—Ç ${format} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è`);
      }
      
      // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ –±—É—Ñ–µ—Ä –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      const fileBuffer = await fs.readFile(filePath);
      
      // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è OfficeParser
      const config: OfficeParserConfig = {
        newlineDelimiter: this.options.newlineDelimiter,
        ignoreNotes: this.options.ignoreNotes,
        putNotesAtLast: this.options.putNotesAtLast,
        outputErrorToConsole: this.options.outputErrorToConsole
      };
      
      // –ü–∞—Ä—Å–∏–º –¥–æ–∫—É–º–µ–Ω—Ç
      const extractedText = await this.parseOfficeDocument(fileBuffer, config);
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
      const result = this.processExtractedText(extractedText, format);
      
      const processingTime = Date.now() - startTime;
      console.log(`‚úÖ Office Parser: —Ñ–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞ ${processingTime}ms`);
      
      return {
        ...result,
        metadata: {
          ...result.metadata,
          format,
          processingTime,
          parser: 'OfficeDocumentParser',
          fileSize: fileBuffer.length
        }
      };
      
    } catch (error) {
      console.error(`‚ùå Office Parser: –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ ${filePath}:`, error);
      throw error;
    }
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç –æ—Ñ–∏—Å–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç —Å –ø–æ–º–æ—â—å—é OfficeParser
   */
  private async parseOfficeDocument(fileBuffer: Buffer, config: OfficeParserConfig): Promise<string> {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º parseOfficeAsync —Å –±—É—Ñ–µ—Ä–æ–º —Ñ–∞–π–ª–∞
      const extractedText = await officeParser.parseOfficeAsync(fileBuffer, config);
      
      if (!extractedText || extractedText.trim().length === 0) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞');
      }
      
      return extractedText;
      
    } catch (error) {
      console.error('‚ùå OfficeParser: –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞:', error);
      throw new Error(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞: ${error instanceof Error ? error.message : String(error)}`);
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
   */
  private processExtractedText(text: string, format: string): ParsedDocument {
    const rows: ParsedRow[] = [];
    
    // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏
    const sections = this.options.splitByParagraphs 
      ? this.splitByParagraphs(text)
      : this.splitByLines(text);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—Ü–∏—é
    sections.forEach((section, index) => {
      const cleanSection = this.cleanText(section);
      
      if (cleanSection.length > 10) { // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–µ–∫—Ü–∏–∏
        const extractedData = this.extractDataFromText(cleanSection);
        
        if (extractedData.hasData || cleanSection.length > 50) {
          rows.push({
            index: index + 1,
            content: cleanSection,
            extractedData: extractedData.data,
            confidence: extractedData.hasData ? extractedData.confidence : 0.3,
            metadata: {
              source: 'document',
              sectionType: this.detectSectionType(cleanSection),
              wordCount: cleanSection.split(/\s+/).length
            }
          });
        }
      }
    });
    
    const quality = this.assessDataQuality(rows, format);
    
    return {
      success: true,
      data: rows,
      metadata: {
        format,
        totalSections: sections.length,
        dataSections: rows.filter(r => Object.keys(r.extractedData || {}).length > 0).length,
        quality: quality.quality,
        confidence: quality.confidence,
        extractedTypes: this.getExtractedTypes(rows),
        documentStats: this.calculateDocumentStats(text, rows)
      }
    };
  }

  /**
   * –†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
   */
  private splitByParagraphs(text: string): string[] {
    // –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –¥–≤–æ–π–Ω—ã–º –ø–µ—Ä–µ–≤–æ–¥–∞–º —Å—Ç—Ä–æ–∫ –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º
    return text
      .split(/\n\s*\n|\r\n\s*\r\n/)
      .map(p => p.trim())
      .filter(p => p.length > 0);
  }

  /**
   * –†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏
   */
  private splitByLines(text: string): string[] {
    return text
      .split(/\n|\r\n/)
      .map(line => line.trim())
      .filter(line => line.length > 0);
  }

  /**
   * –û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
   */
  private cleanText(text: string): string {
    return text
      .replace(/\s+/g, ' ')
      .replace(/[\u00A0\u2000-\u200B\u2028\u2029]/g, ' ')
      .replace(/[^\w\s\.\,\:\;\!\?\-\(\)\[\]\"\'‚Ññ\/\\\+\=\*\%\@\#\$\^\&]/g, ' ')
      .trim();
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Å–µ–∫—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
   */
  private detectSectionType(text: string): string {
    const lowerText = text.toLowerCase();
    
    if (lowerText.includes('–∑–∞–≥–æ–ª–æ–≤–æ–∫') || /^[–ê-–ØA-Z\s]{3,50}$/.test(text)) {
      return 'heading';
    } else if (lowerText.includes('—Ç–∞–±–ª–∏—Ü–∞') || /\|\s*\w+\s*\|/.test(text)) {
      return 'table';
    } else if (lowerText.includes('—Å–ø–∏—Å–æ–∫') || /^\s*[\d\-\*]/.test(text)) {
      return 'list';
    } else if (text.split(/\s+/).length > 20) {
      return 'paragraph';
    } else {
      return 'fragment';
    }
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞
   */
  private extractDataFromText(text: string): {
    hasData: boolean;
    data: any;
    confidence: number;
  } {
    const patterns = this.getEnergyPatterns();
    const extracted: any = {};
    let confidence = 0;
    let hasData = false;

    for (const [category, categoryPatterns] of Object.entries(patterns)) {
      for (const pattern of categoryPatterns) {
        const matches = text.match(pattern.regex);
        if (matches) {
          if (!extracted[category]) {
            extracted[category] = [];
          }
          
          const value = this.extractValue(matches, pattern);
          if (value) {
            extracted[category].push({
              value: value.amount,
              unit: value.unit,
              text: matches[0],
              confidence: pattern.confidence,
              context: this.getContext(text, matches[0])
            });
            
            confidence = Math.max(confidence, pattern.confidence);
            hasData = true;
          }
        }
      }
    }

    return { hasData, data: extracted, confidence };
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–∫—Ä—É–≥ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
   */
  private getContext(text: string, match: string, contextLength: number = 50): string {
    const index = text.indexOf(match);
    if (index === -1) return '';
    
    const start = Math.max(0, index - contextLength);
    const end = Math.min(text.length, index + match.length + contextLength);
    
    return text.substring(start, end).trim();
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–∞
   */
  private calculateDocumentStats(text: string, rows: ParsedRow[]): any {
    const words = text.split(/\s+/).length;
    const chars = text.length;
    const dataRows = rows.filter(r => Object.keys(r.extractedData || {}).length > 0);
    
    return {
      totalWords: words,
      totalChars: chars,
      totalRows: rows.length,
      dataRows: dataRows.length,
      dataRatio: dataRows.length / Math.max(rows.length, 1),
      avgWordsPerRow: words / Math.max(rows.length, 1)
    };
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
   */
  private detectFormat(filePath: string): string {
    const extension = filePath.toLowerCase().substring(filePath.lastIndexOf('.'));
    return extension;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ñ–æ—Ä–º–∞—Ç–∞
   */
  private isFormatSupported(format: string): boolean {
    return this.supportedFormats.includes(format.toLowerCase());
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  private getEnergyPatterns() {
    return {
      electricity: [
        {
          regex: /(\d+(?:[.,]\d+)?)\s*(?:–∫–í—Ç[¬∑\*]?—á|kwh|–∫–≤–∞—Ç—Ç?[-\s]?—á–∞—Å)/gi,
          confidence: 0.9,
          unit: '–∫–í—Ç¬∑—á'
        },
        {
          regex: /—ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è[:\s]*(\d+(?:[.,]\d+)?)/gi,
          confidence: 0.8,
          unit: '–∫–í—Ç¬∑—á'
        },
        {
          regex: /–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ\s+—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞[:\s]*(\d+(?:[.,]\d+)?)/gi,
          confidence: 0.85,
          unit: '–∫–í—Ç¬∑—á'
        }
      ],
      gas: [
        {
          regex: /(\d+(?:[.,]\d+)?)\s*(?:–º[3¬≥]|–∫—É–±\.?\s*–º|–∫—É–±–æ–º–µ—Ç—Ä)/gi,
          confidence: 0.9,
          unit: '–º¬≥'
        },
        {
          regex: /(?:–≥–∞–∑|–ø—Ä–∏—Ä–æ–¥–Ω—ã–π\s+–≥–∞–∑)[:\s]*(\d+(?:[.,]\d+)?)/gi,
          confidence: 0.8,
          unit: '–º¬≥'
        }
      ],
      fuel: [
        {
          regex: /(\d+(?:[.,]\d+)?)\s*(?:–ª|–ª–∏—Ç|–ª–∏—Ç—Ä)/gi,
          confidence: 0.9,
          unit: '–ª'
        },
        {
          regex: /(?:–±–µ–Ω–∑–∏–Ω|–¥–∏–∑–µ–ª—å|—Ç–æ–ø–ª–∏–≤–æ|–ì–°–ú)[:\s]*(\d+(?:[.,]\d+)?)/gi,
          confidence: 0.8,
          unit: '–ª'
        }
      ],
      heat: [
        {
          regex: /(\d+(?:[.,]\d+)?)\s*(?:–≥–∫–∞–ª|–ì–ö–∞–ª|–≥–∏–≥–∞–∫–∞–ª–æ—Ä–∏)/gi,
          confidence: 0.9,
          unit: '–ì–∫–∞–ª'
        },
        {
          regex: /(?:—Ç–µ–ø–ª[–∞-—è]*|–æ—Ç–æ–ø–ª–µ–Ω–∏–µ)[:\s]*(\d+(?:[.,]\d+)?)/gi,
          confidence: 0.7,
          unit: '–ì–∫–∞–ª'
        }
      ],
      transport: [
        {
          regex: /(\d+(?:[.,]\d+)?)\s*(?:–∫–º|–∫–∏–ª–æ–º–µ—Ç—Ä)/gi,
          confidence: 0.9,
          unit: '–∫–º'
        },
        {
          regex: /(?:–ø—Ä–æ–±–µ–≥|—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ|–¥–∏—Å—Ç–∞–Ω—Ü–∏—è)[:\s]*(\d+(?:[.,]\d+)?)/gi,
          confidence: 0.8,
          unit: '–∫–º'
        }
      ]
    };
  }

  /**
   * –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  private assessDataQuality(rows: ParsedRow[], format: string): {
    quality: DataQuality;
    confidence: number;
  } {
    if (rows.length === 0) {
      return { quality: 'poor', confidence: 0 };
    }

    const dataRows = rows.filter(r => Object.keys(r.extractedData || {}).length > 0);
    const dataRatio = dataRows.length / rows.length;
    const avgConfidence = rows.reduce((sum, row) => sum + row.confidence, 0) / rows.length;
    
    // –ë–æ–Ω—É—Å –∑–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã
    let formatBonus = 0;
    if (['.xlsx', '.xls', '.ods'].includes(format)) {
      formatBonus = 0.1; // –¢–∞–±–ª–∏—Ü—ã –æ–±—ã—á–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö
    } else if (['.docx', '.doc', '.odt'].includes(format)) {
      formatBonus = 0.05; // –î–æ–∫—É–º–µ–Ω—Ç—ã –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
    }
    
    const finalConfidence = Math.min(avgConfidence + formatBonus, 1.0);
    
    let quality: DataQuality;
    
    if (dataRatio > 0.3 && finalConfidence > 0.8) {
      quality = 'excellent';
    } else if (dataRatio > 0.15 && finalConfidence > 0.6) {
      quality = 'good';
    } else if (dataRatio > 0.05 && finalConfidence > 0.4) {
      quality = 'fair';
    } else {
      quality = 'poor';
    }

    return { quality, confidence: finalConfidence };
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–∏–ø—ã –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  private getExtractedTypes(rows: ParsedRow[]): string[] {
    const types = new Set<string>();
    
    for (const row of rows) {
      if (row.extractedData) {
        Object.keys(row.extractedData).forEach(key => types.add(key));
      }
    }
    
    return Array.from(types);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
   */
  getSupportedFormats(): string[] {
    return [...this.supportedFormats];
  }
}