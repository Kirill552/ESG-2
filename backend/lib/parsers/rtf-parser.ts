/**
 * –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π RTF –ø–∞—Ä—Å–µ—Ä (2025)
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç rtf-parser-wasm –¥–ª—è –≤—ã—Å–æ–∫–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 * Fallback –∫ @extensionengine/rtf-parser –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
 */

import * as fs from 'fs/promises';
import { BaseParser, ParsedDocument, ParsedRow, DataQuality } from './base-parser';

// –¢–∏–ø—ã –¥–ª—è WASM –ø–∞—Ä—Å–µ—Ä–∞
interface WasmRtfParser {
  parse_rtf: (content: string) => WasmRtfDocument;
}

interface WasmRtfDocument {
  body: WasmRtfNode[];
  header?: WasmRtfNode[];
  footer?: WasmRtfNode[];
}

interface WasmRtfNode {
  type: 'text' | 'paragraph' | 'table' | 'image' | 'control';
  content?: string;
  children?: WasmRtfNode[];
  properties?: Record<string, any>;
}

export interface RtfParserOptions {
  preferWasm?: boolean;
  encoding?: string;
  extractFormatting?: boolean;
  extractTables?: boolean;
  ignoreImages?: boolean;
  maxFileSize?: number;
}

export class RtfParser extends BaseParser {
  private readonly options: Required<RtfParserOptions>;
  private wasmParser: WasmRtfParser | null = null;
  private extensionParser: any = null;

  constructor(options: RtfParserOptions = {}) {
    super();
    this.options = {
      preferWasm: options.preferWasm ?? true,
      encoding: options.encoding || 'utf8',
      extractFormatting: options.extractFormatting ?? false,
      extractTables: options.extractTables ?? true,
      ignoreImages: options.ignoreImages ?? true,
      maxFileSize: options.maxFileSize || 50 * 1024 * 1024 // 50MB
    };
    
    this.initializeParsers();
  }

  private async initializeParsers() {
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º Extension Engine –ø–∞—Ä—Å–µ—Ä (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π)
      const extensionModule = await import('@extensionengine/rtf-parser');
      this.extensionParser = extensionModule.default || extensionModule;
      console.log('üìù RTF Parser: Extension Engine –ø–∞—Ä—Å–µ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω');
    } catch (error) {
      console.log('‚ö†Ô∏è RTF Parser: Extension Engine –ø–∞—Ä—Å–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }

    try {
      // –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π rtf-parser –∫–∞–∫ fallback
      const legacyModule = await import('rtf-parser');
      if (legacyModule.default) {
        this.wasmParser = legacyModule.default;
        console.log('üìÑ RTF Parser: –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–µ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω');
      }
    } catch (error) {
      console.log('‚ö†Ô∏è RTF Parser: –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }
    
    if (!this.extensionParser && !this.wasmParser) {
      console.error('‚ùå RTF Parser: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∏ –æ–¥–∏–Ω –ø–∞—Ä—Å–µ—Ä');
    }
  }

  async parseFile(filePath: string): Promise<ParsedDocument> {
    const startTime = Date.now();
    
    try {
      console.log(`üìÑ RTF Parser: –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ ${filePath}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
      const stats = await fs.stat(filePath);
      if (stats.size > this.options.maxFileSize) {
        throw new Error(`–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: ${stats.size} –±–∞–π—Ç (–º–∞–∫—Å–∏–º—É–º: ${this.options.maxFileSize})`);
      }
      
      // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
      const content = await fs.readFile(filePath, this.options.encoding);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ RTF —Ñ–∞–π–ª
      if (!this.isValidRtf(content)) {
        throw new Error('–§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º RTF –¥–æ–∫—É–º–µ–Ω—Ç–æ–º');
      }
      
      // –ü–∞—Ä—Å–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
      const result = await this.parseRtfContent(content);
      
      const processingTime = Date.now() - startTime;
      console.log(`‚úÖ RTF Parser: —Ñ–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞ ${processingTime}ms`);
      
      return {
        ...result,
        metadata: {
          ...result.metadata,
          format: '.rtf',
          processingTime,
          parser: this.wasmParser ? 'RtfParser-WASM' : 'RtfParser-Extension',
          fileSize: stats.size,
          encoding: this.options.encoding
        }
      };
      
    } catch (error) {
      console.error(`‚ùå RTF Parser: –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ ${filePath}:`, error);
      throw new Error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ RTF —Ñ–∞–π–ª–∞: ${error instanceof Error ? error.message : String(error)}`);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º RTF
   */
  private isValidRtf(content: string): boolean {
    return content.trim().startsWith('{\\rtf1');
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç RTF —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
   */
  private async parseRtfContent(content: string): Promise<ParsedDocument> {
    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–∞—Ä—Å–µ—Ä—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
    if (!this.extensionParser && !this.wasmParser) {
      await this.initializeParsers();
    }

    let parsedData: any = null;
    let parserUsed = '';

    // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ –¥–ª—è –ª—É—á—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
    try {
      parsedData = this.simpleRtfParse(content);
      parserUsed = 'Simple';
      console.log('üìÑ RTF Parser: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–µ—Ä (–æ—Å–Ω–æ–≤–Ω–æ–π)');
    } catch (error) {
      console.log('‚ö†Ô∏è RTF Parser: –ø—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–µ—Ä –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª:', error.message);
    }

    // Fallback –∫ Extension Engine –ø–∞—Ä—Å–µ—Ä—É
    if (!parsedData && this.extensionParser) {
      try {
        if (typeof this.extensionParser === 'function') {
          parsedData = await this.extensionParser(content);
          parserUsed = 'Extension';
          console.log('üìù RTF Parser: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω Extension Engine –ø–∞—Ä—Å–µ—Ä');
        }
      } catch (error) {
        console.log('‚ö†Ô∏è RTF Parser: Extension –ø–∞—Ä—Å–µ—Ä –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª:', error.message);
      }
    }

    // –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback –∫ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–º—É –ø–∞—Ä—Å–µ—Ä—É
    if (!parsedData && this.wasmParser) {
      try {
        const parser = new this.wasmParser();
        parsedData = parser.parse(content);
        parserUsed = 'Legacy';
        console.log('üìÑ RTF Parser: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–µ—Ä');
      } catch (error) {
        console.log('‚ö†Ô∏è RTF Parser: –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–µ—Ä –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª:', error.message);
      }
    }

    if (!parsedData) {
      console.error('‚ùå RTF Parser: –≤—Å–µ –ø–∞—Ä—Å–µ—Ä—ã –Ω–µ —Å–º–æ–≥–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª');
      throw new Error('–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ RTF –ø–∞—Ä—Å–µ—Ä—ã –Ω–µ —Å–º–æ–≥–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª');
    }

    if (!parsedData) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å RTF —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ');
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞
    const extractedText = this.extractTextFromParsedData(parsedData, parserUsed);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    return this.processExtractedText(extractedText, parserUsed);
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –æ—Ç –ø–∞—Ä—Å–µ—Ä–∞
   */
  private extractTextFromParsedData(parsedData: any, parserUsed: string): string {
    if (parserUsed === 'Simple') {
      return parsedData; // –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–µ—Ä —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç
    } else if (parserUsed === 'Legacy' && parsedData.doc) {
      return this.extractTextFromLegacyData(parsedData);
    } else {
      return this.extractTextFromExtensionData(parsedData);
    }
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ Legacy –ø–∞—Ä—Å–µ—Ä–∞
   */
  private extractTextFromLegacyData(data: any): string {
    const textParts: string[] = [];
    
    const extractFromElement = (element: any): void => {
      if (!element) return;
      
      if (element.text) {
        textParts.push(element.text);
      }
      
      if (element.content && Array.isArray(element.content)) {
        for (const child of element.content) {
          extractFromElement(child);
        }
      } else if (element.content) {
        extractFromElement(element.content);
      }
      
      if (element.children && Array.isArray(element.children)) {
        for (const child of element.children) {
          extractFromElement(child);
        }
      }
    };
    
    extractFromElement(data.doc);
    return textParts.join(' ').trim();
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ WASM –ø–∞—Ä—Å–µ—Ä–∞
   */
  private extractTextFromWasmData(data: WasmRtfDocument): string {
    const textParts: string[] = [];
    
    const extractFromNodes = (nodes: WasmRtfNode[]): void => {
      for (const node of nodes) {
        if (node.type === 'text' && node.content) {
          textParts.push(node.content);
        } else if (node.type === 'paragraph') {
          if (node.content) {
            textParts.push(node.content);
          }
          if (node.children) {
            extractFromNodes(node.children);
          }
          textParts.push('\n');
        } else if (node.children) {
          extractFromNodes(node.children);
        }
      }
    };
    
    if (data.header) {
      extractFromNodes(data.header);
      textParts.push('\n\n');
    }
    
    if (data.body) {
      extractFromNodes(data.body);
    }
    
    if (data.footer) {
      textParts.push('\n\n');
      extractFromNodes(data.footer);
    }
    
    return textParts.join('').trim();
  }

  /**
   * –ü—Ä–æ—Å—Ç–æ–π RTF –ø–∞—Ä—Å–µ—Ä –∫–∞–∫ fallback
   */
  private simpleRtfParse(content: string): string {
    // –£–¥–∞–ª—è–µ–º RTF –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
    let text = content
      // –£–±–∏—Ä–∞–µ–º RTF –∑–∞–≥–æ–ª–æ–≤–æ–∫
      .replace(/^\{\\rtf1[^}]*\}/, '')
      // –£–±–∏—Ä–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã —à—Ä–∏—Ñ—Ç–æ–≤
      .replace(/\{\\fonttbl[^}]*\}/g, '')
      // –£–±–∏—Ä–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã —Ü–≤–µ—Ç–æ–≤
      .replace(/\{\\colortbl[^}]*\}/g, '')
      // –£–±–∏—Ä–∞–µ–º —Å—Ç–∏–ª–∏
      .replace(/\{\\stylesheet[^}]*\}/g, '')
      // –£–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
      .replace(/\\[a-z]+\d*\s*/gi, ' ')
      // –£–±–∏—Ä–∞–µ–º —Ñ–∏–≥—É—Ä–Ω—ã–µ —Å–∫–æ–±–∫–∏
      .replace(/[{}]/g, '')
      // –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
      .replace(/\s+/g, ' ')
      .trim();

    return text;
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ Extension Engine –ø–∞—Ä—Å–µ—Ä–∞
   */
  private extractTextFromExtensionData(data: any): string {
    if (typeof data === 'string') {
      return data;
    }
    
    // Extension Engine –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç RTFDocument –æ–±—ä–µ–∫—Ç
    if (data && data.content && Array.isArray(data.content)) {
      return this.extractFromRTFDocument(data);
    }
    
    if (data && typeof data.text === 'string') {
      return data.text;
    }
    
    if (data && typeof data.content === 'string') {
      return data.content;
    }
    
    if (data && Array.isArray(data.body)) {
      return data.body.map((item: any) => {
        if (typeof item === 'string') return item;
        if (item.text) return item.text;
        if (item.content) return item.content;
        return '';
      }).join(' ');
    }

    if (data && data.doc && data.doc.content) {
      return this.extractFromDocContent(data.doc.content);
    }
    
    // Fallback –∫ –ø—Ä–æ—Å—Ç–æ–º—É –ø–∞—Ä—Å–µ—Ä—É
    console.log('üîç RTF Parser: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–µ—Ä');
    
    return String(data);
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ RTFDocument (Extension Engine)
   */
  private extractFromRTFDocument(doc: any): string {
    const textParts: string[] = [];
    
    if (doc.content && Array.isArray(doc.content)) {
      for (const paragraph of doc.content) {
        if (paragraph.content && Array.isArray(paragraph.content)) {
          for (const item of paragraph.content) {
            if (typeof item === 'string') {
              textParts.push(item);
            } else if (item && typeof item.text === 'string') {
              textParts.push(item.text);
            } else if (item && typeof item.value === 'string') {
              textParts.push(item.value);
            }
          }
          textParts.push(' '); // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞–º–∏
        }
      }
    }
    
    return textParts.join('').trim();
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
   */
  private extractFromDocContent(content: any[]): string {
    const textParts: string[] = [];
    
    const extractText = (items: any[]): void => {
      for (const item of items) {
        if (typeof item === 'string') {
          textParts.push(item);
        } else if (item && item.type === 'text' && item.value) {
          textParts.push(item.value);
        } else if (item && item.content && Array.isArray(item.content)) {
          extractText(item.content);
        } else if (item && typeof item.text === 'string') {
          textParts.push(item.text);
        }
      }
    };
    
    extractText(content);
    return textParts.join(' ');
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ —Å–æ–∑–¥–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç
   */
  private processExtractedText(text: string, parserUsed: string): ParsedDocument {
    const rows: ParsedRow[] = [];
    
    // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
    const paragraphs = text
      .split(/\n\s*\n|\r\n\s*\r\n/)
      .map(p => p.trim())
      .filter(p => p.length > 0);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ
    paragraphs.forEach((paragraph, index) => {
      const cleanParagraph = this.cleanRtfText(paragraph);
      
      if (cleanParagraph.length > 10) { // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
        const extractedData = this.extractDataFromText(cleanParagraph);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω—ã–π
        if (extractedData.hasData || cleanParagraph.length > 30) {
          rows.push({
            index: index + 1,
            content: cleanParagraph,
            extractedData: extractedData.data,
            confidence: extractedData.hasData ? extractedData.confidence : 0.2,
            metadata: {
              source: 'rtf_paragraph',
              parserUsed,
              wordCount: cleanParagraph.split(/\s+/).length,
              charCount: cleanParagraph.length
            }
          });
        }
      }
    });
    
    const quality = this.assessDataQuality(rows);
    
    return {
      success: true,
      data: rows,
      metadata: {
        format: '.rtf',
        totalParagraphs: paragraphs.length,
        dataParagraphs: rows.filter(r => Object.keys(r.extractedData || {}).length > 0).length,
        quality: quality.quality,
        confidence: quality.confidence,
        extractedTypes: this.getExtractedTypes(rows),
        parserUsed,
        textStats: this.calculateTextStats(text, rows)
      }
    };
  }

  /**
   * –û—á–∏—â–∞–µ—Ç RTF —Ç–µ–∫—Å—Ç –æ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
   */
  private cleanRtfText(text: string): string {
    return text
      // –£–±–∏—Ä–∞–µ–º RTF –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
      .replace(/\\[a-z]+\d*\s*/gi, '')
      .replace(/[{}]/g, '')
      // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
      .replace(/\s+/g, ' ')
      .replace(/[\u00A0\u2000-\u200B\u2028\u2029]/g, ' ')
      .trim();
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞
   */
  private extractDataFromText(text: string): {
    hasData: boolean;
    data: any;
    confidence: number;
  } {
    const patterns = this.getEnergyPatterns();
    const extracted: any = {};
    let confidence = 0;
    let hasData = false;

    for (const [category, categoryPatterns] of Object.entries(patterns)) {
      for (const pattern of categoryPatterns) {
        const matches = text.match(pattern.regex);
        if (matches) {
          if (!extracted[category]) {
            extracted[category] = [];
          }
          
          const value = this.extractValue(matches, pattern);
          if (value) {
            extracted[category].push({
              value: value.amount,
              unit: value.unit,
              text: matches[0],
              confidence: pattern.confidence,
              context: this.getContext(text, matches[0])
            });
            
            confidence = Math.max(confidence, pattern.confidence);
            hasData = true;
          }
        }
      }
    }

    return { hasData, data: extracted, confidence };
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–∫—Ä—É–≥ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
   */
  private getContext(text: string, match: string, contextLength: number = 40): string {
    const index = text.indexOf(match);
    if (index === -1) return '';
    
    const start = Math.max(0, index - contextLength);
    const end = Math.min(text.length, index + match.length + contextLength);
    
    return text.substring(start, end).trim();
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–µ–∫—Å—Ç–∞
   */
  private calculateTextStats(text: string, rows: ParsedRow[]): any {
    const words = text.split(/\s+/).length;
    const chars = text.length;
    const dataRows = rows.filter(r => Object.keys(r.extractedData || {}).length > 0);
    
    return {
      totalWords: words,
      totalChars: chars,
      totalRows: rows.length,
      dataRows: dataRows.length,
      dataRatio: dataRows.length / Math.max(rows.length, 1),
      avgWordsPerRow: words / Math.max(rows.length, 1)
    };
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  private getEnergyPatterns() {
    return {
      electricity: [
        {
          regex: /(\d+(?:[.,]\d+)?)\s*(?:–∫–í—Ç[¬∑\*]?—á|kwh|–∫–≤–∞—Ç—Ç?[-\s]?—á–∞—Å)/gi,
          confidence: 0.9,
          unit: '–∫–í—Ç¬∑—á'
        },
        {
          regex: /—ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è[:\s]*(\d+(?:[.,]\d+)?)/gi,
          confidence: 0.8,
          unit: '–∫–í—Ç¬∑—á'
        }
      ],
      gas: [
        {
          regex: /(\d+(?:[.,]\d+)?)\s*(?:–º[3¬≥]|–∫—É–±\.?\s*–º|–∫—É–±–æ–º–µ—Ç—Ä|—Ç—ã—Å—è—á\s+–Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö\s+–∫—É–±–æ–º–µ—Ç—Ä–æ–≤)/gi,
          confidence: 0.9,
          unit: '–º¬≥'
        },
        {
          regex: /(?:–≥–∞–∑|–ø—Ä–∏—Ä–æ–¥–Ω—ã–π\s+–≥–∞–∑|—Å—É—Ö–æ–π\s+–ª–µ–¥)[:\s]*(\d+(?:[.,]\d+)?)/gi,
          confidence: 0.8,
          unit: '–º¬≥'
        }
      ],
      fuel: [
        {
          regex: /(\d+(?:[.,]\d+)?)\s*(?:–ª|–ª–∏—Ç|–ª–∏—Ç—Ä|–∫—É–±–∏—á–µ—Å–∫–∏—Ö\s+–º–µ—Ç—Ä–æ–≤|–≥)/gi,
          confidence: 0.9,
          unit: '–ª'
        },
        {
          regex: /(?:–±–µ–Ω–∑–∏–Ω|–¥–∏–∑–µ–ª—å|—Ç–æ–ø–ª–∏–≤–æ|–ì–°–ú|–±–∏–æ–¥–∏–∑–µ–ª—å|–∞–≤–∏–∞—Ç–æ–ø–ª–∏–≤–æ|—É—Å–ª–æ–≤–Ω–æ–µ\s+—Ç–æ–ø–ª–∏–≤–æ)[:\s]*(\d+(?:[.,]\d+)?)/gi,
          confidence: 0.8,
          unit: '–ª'
        }
      ],
      heat: [
        {
          regex: /(\d+(?:[.,]\d+)?)\s*(?:–≥–∫–∞–ª|–ì–ö–∞–ª|–≥–∏–≥–∞–∫–∞–ª–æ—Ä–∏)/gi,
          confidence: 0.9,
          unit: '–ì–∫–∞–ª'
        },
        {
          regex: /(?:—Ç–µ–ø–ª[–∞-—è]*|–æ—Ç–æ–ø–ª–µ–Ω–∏–µ)[:\s]*(\d+(?:[.,]\d+)?)/gi,
          confidence: 0.7,
          unit: '–ì–∫–∞–ª'
        }
      ],
      chemicals: [
        {
          regex: /(\d+(?:[.,]\d+)?)\s*(?:—Ç–æ–Ω–Ω[–∞-—è]*|—Ç)/gi,
          confidence: 0.8,
          unit: '—Ç–æ–Ω–Ω—ã'
        },
        {
          regex: /(?:—ç–º–∞–ª–∏|C2H2|–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ\s+–∞–∑–æ—Ç–Ω–æ–π\s+–∫–∏—Å–ª–æ—Ç—ã)[:\s]*(\d+(?:[.,]\d+)?)/gi,
          confidence: 0.85,
          unit: '—Ç–æ–Ω–Ω—ã'
        }
      ]
    };
  }

  /**
   * –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  private assessDataQuality(rows: ParsedRow[]): {
    quality: DataQuality;
    confidence: number;
  } {
    if (rows.length === 0) {
      return { quality: 'poor', confidence: 0 };
    }

    const dataRows = rows.filter(r => Object.keys(r.extractedData || {}).length > 0);
    const dataRatio = dataRows.length / rows.length;
    const avgConfidence = rows.reduce((sum, row) => sum + row.confidence, 0) / rows.length;
    
    let quality: DataQuality;
    
    if (dataRatio > 0.4 && avgConfidence > 0.8) {
      quality = 'excellent';
    } else if (dataRatio > 0.2 && avgConfidence > 0.6) {
      quality = 'good';
    } else if (dataRatio > 0.1 && avgConfidence > 0.4) {
      quality = 'fair';
    } else {
      quality = 'poor';
    }

    return { quality, confidence: avgConfidence };
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–∏–ø—ã –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  private getExtractedTypes(rows: ParsedRow[]): string[] {
    const types = new Set<string>();
    
    for (const row of rows) {
      if (row.extractedData) {
        Object.keys(row.extractedData).forEach(key => types.add(key));
      }
    }
    
    return Array.from(types);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
   */
  getSupportedFormats(): string[] {
    return ['.rtf'];
  }
}