/**
 * –ü–∞—Ä—Å–µ—Ä –¥–ª—è JSON —Ñ–∞–π–ª–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä –∏ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–∞–∫ –ø–ª–æ—Å–∫–∏–µ, —Ç–∞–∫ –∏ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ JSON —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
 */

import { 
  BaseParser, 
  ParsedDocumentData, 
  ParseOptions, 
  ParserResult,
  RussianUnitsHelper 
} from './base-parser';

export class JsonParser extends BaseParser {
  protected readonly supportedFormats = ['json'];

  /**
   * –ü–∞—Ä—Å–∏—Ç JSON —Ñ–∞–π–ª —Å –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
   */
  async parse(buffer: Buffer, options: ParseOptions = {}): Promise<ParserResult> {
    const startTime = Date.now();
    
    try {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É
      const encoding = options.encoding === 'auto' || !options.encoding 
        ? this.detectEncoding(buffer) 
        : options.encoding;
      
      console.log(`üìÑ JSON Parser: detected encoding ${encoding}`);
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –±—É—Ñ–µ—Ä –≤ —Ç–µ–∫—Å—Ç
      let text: string;
      if (encoding === 'cp1251') {
        text = this.convertFromCp1251(buffer);
      } else {
        text = buffer.toString(encoding === 'cp866' ? 'binary' : 'utf8');
      }
      
      // –ü–∞—Ä—Å–∏–º JSON
      let jsonData: any;
      try {
        jsonData = JSON.parse(text);
      } catch (parseError) {
        return {
          success: false,
          error: `Invalid JSON format: ${parseError instanceof Error ? parseError.message : String(parseError)}`,
          processingTime: Date.now() - startTime
        };
      }
      
      console.log(`üìÑ JSON Parser: parsed JSON structure`);
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º JSON –≤ –ø–ª–æ—Å–∫–∏–π –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
      const flatData = this.flattenJsonData(jsonData, options.maxRows);
      console.log(`üìÑ JSON Parser: flattened to ${flatData.length} data items`);
      
      if (flatData.length === 0) {
        return {
          success: false,
          error: 'No extractable data found in JSON file',
          processingTime: Date.now() - startTime
        };
      }
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ä–æ—Å—Å–∏–π—Å–∫–∏–º –µ–¥–∏–Ω–∏—Ü–∞–º
      const extractedUnitsData = this.extractRussianUnitsData(flatData);
      
      // –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
      const structureInfo = this.analyzeJsonStructure(jsonData);
      
      // –û—Ü–µ–Ω–∏–≤–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
      const dataQuality = RussianUnitsHelper.assessDataQuality(
        extractedUnitsData.russian_units_found, 
        flatData.length
      );
      
      const confidence = this.calculateConfidence(
        extractedUnitsData, 
        flatData.length, 
        dataQuality,
        structureInfo.complexity
      );
      
      const result: ParsedDocumentData = {
        documentType: 'json',
        confidence,
        extractedData: {
          ...extractedUnitsData,
          raw_rows: flatData,
          total_rows: flatData.length,
          headers: structureInfo.possibleHeaders
        },
        metadata: {
          encoding,
          format_detected: `JSON (${structureInfo.type})`,
          processing_time_ms: Date.now() - startTime,
          russian_units_found: extractedUnitsData.russian_units_found,
          data_quality: dataQuality,
          json_structure: {
            type: structureInfo.type,
            depth: structureInfo.depth,
            arrays_count: structureInfo.arraysCount,
            objects_count: structureInfo.objectsCount
          }
        }
      };
      
      console.log(`‚úÖ JSON Parser: success! Found ${extractedUnitsData.russian_units_found.length} units, quality: ${dataQuality}`);
      
      return {
        success: true,
        data: result,
        processingTime: Date.now() - startTime
      };
      
    } catch (error) {
      console.error('‚ùå JSON Parser failed:', error);
      
      return {
        success: false,
        error: error instanceof Error ? error.message : String(error),
        processingTime: Date.now() - startTime
      };
    }
  }

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç JSON –¥–∞–Ω–Ω—ã–µ –≤ –ø–ª–æ—Å–∫–∏–π –º–∞—Å—Å–∏–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
   */
  private flattenJsonData(data: any, maxRows?: number): any[][] {
    const result: any[][] = [];
    
    if (Array.isArray(data)) {
      // –ï—Å–ª–∏ –∫–æ—Ä–µ–Ω—å - –º–∞—Å—Å–∏–≤
      data.forEach((item, index) => {
        if (maxRows && result.length >= maxRows) return;
        
        if (typeof item === 'object' && item !== null) {
          // –û–±—ä–µ–∫—Ç - –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤ —Å—Ç—Ä–æ–∫—É –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ
          const row = this.objectToRow(item);
          result.push(row);
        } else {
          // –ü—Ä–∏–º–∏—Ç–∏–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
          result.push([String(item)]);
        }
      });
    } else if (typeof data === 'object' && data !== null) {
      // –ï—Å–ª–∏ –∫–æ—Ä–µ–Ω—å - –æ–±—ä–µ–∫—Ç
      const entries = Object.entries(data);
      
      entries.forEach(([key, value], index) => {
        if (maxRows && result.length >= maxRows) return;
        
        if (Array.isArray(value)) {
          // –ó–Ω–∞—á–µ–Ω–∏–µ - –º–∞—Å—Å–∏–≤
          value.forEach((arrayItem, arrayIndex) => {
            if (maxRows && result.length >= maxRows) return;
            
            if (typeof arrayItem === 'object' && arrayItem !== null) {
              const row = this.objectToRow(arrayItem, key);
              result.push(row);
            } else {
              result.push([key, String(arrayItem)]);
            }
          });
        } else if (typeof value === 'object' && value !== null) {
          // –ó–Ω–∞—á–µ–Ω–∏–µ - –æ–±—ä–µ–∫—Ç
          const row = this.objectToRow(value, key);
          result.push(row);
        } else {
          // –ó–Ω–∞—á–µ–Ω–∏–µ - –ø—Ä–∏–º–∏—Ç–∏–≤
          result.push([key, String(value)]);
        }
      });
    } else {
      // –ü—Ä–∏–º–∏—Ç–∏–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫–æ—Ä–Ω–µ
      result.push([String(data)]);
    }
    
    return result;
  }

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –æ–±—ä–µ–∫—Ç –≤ —Å—Ç—Ä–æ–∫—É –º–∞—Å—Å–∏–≤–∞
   */
  private objectToRow(obj: any, prefix?: string): any[] {
    const row: any[] = [];
    
    if (prefix) {
      row.push(prefix);
    }
    
    Object.entries(obj).forEach(([key, value]) => {
      if (typeof value === 'object' && value !== null) {
        // –í–ª–æ–∂–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç - —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
        row.push(`${key}: ${JSON.stringify(value)}`);
      } else {
        row.push(key, String(value));
      }
    });
    
    return row;
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É JSON –¥–∞–Ω–Ω—ã—Ö
   */
  private analyzeJsonStructure(data: any): {
    type: string;
    depth: number;
    complexity: 'simple' | 'medium' | 'complex';
    arraysCount: number;
    objectsCount: number;
    possibleHeaders?: string[];
  } {
    let type = 'unknown';
    let depth = 0;
    let arraysCount = 0;
    let objectsCount = 0;
    let possibleHeaders: string[] = [];
    
    const analyzeRecursive = (obj: any, currentDepth: number = 0): void => {
      depth = Math.max(depth, currentDepth);
      
      if (Array.isArray(obj)) {
        arraysCount++;
        type = type === 'unknown' ? 'array' : 'mixed';
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞
        obj.forEach(item => {
          if (typeof item === 'object' && item !== null) {
            analyzeRecursive(item, currentDepth + 1);
          }
        });
        
        // –ï—Å–ª–∏ –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤, –∏–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        if (obj.length > 0 && typeof obj[0] === 'object' && obj[0] !== null && !Array.isArray(obj[0])) {
          possibleHeaders = Object.keys(obj[0]);
        }
      } else if (typeof obj === 'object' && obj !== null) {
        objectsCount++;
        type = type === 'unknown' ? 'object' : 'mixed';
        
        // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –æ–±—ä–µ–∫—Ç –∏ —É –Ω–∞—Å –Ω–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–ª—é—á–∏
        if (possibleHeaders.length === 0) {
          possibleHeaders = Object.keys(obj);
        }
        
        Object.values(obj).forEach(value => {
          if (typeof value === 'object' && value !== null) {
            analyzeRecursive(value, currentDepth + 1);
          }
        });
      }
    };
    
    analyzeRecursive(data);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å
    let complexity: 'simple' | 'medium' | 'complex';
    if (depth <= 1 && (arraysCount + objectsCount) <= 2) {
      complexity = 'simple';
    } else if (depth <= 3 && (arraysCount + objectsCount) <= 10) {
      complexity = 'medium';
    } else {
      complexity = 'complex';
    }
    
    return {
      type,
      depth,
      complexity,
      arraysCount,
      objectsCount,
      possibleHeaders: possibleHeaders.length > 0 ? possibleHeaders : undefined
    };
  }

  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –±—É—Ñ–µ—Ä –∏–∑ CP1251 –≤ UTF-8 (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
   */
  private convertFromCp1251(buffer: Buffer): string {
    const cp1251Map: { [key: number]: string } = {
      192: '–ê', 193: '–ë', 194: '–í', 195: '–ì', 196: '–î', 197: '–ï', 198: '–ñ', 199: '–ó',
      200: '–ò', 201: '–ô', 202: '–ö', 203: '–õ', 204: '–ú', 205: '–ù', 206: '–û', 207: '–ü',
      208: '–†', 209: '–°', 210: '–¢', 211: '–£', 212: '–§', 213: '–•', 214: '–¶', 215: '–ß',
      216: '–®', 217: '–©', 218: '–™', 219: '–´', 220: '–¨', 221: '–≠', 222: '–Æ', 223: '–Ø',
      224: '–∞', 225: '–±', 226: '–≤', 227: '–≥', 228: '–¥', 229: '–µ', 230: '–∂', 231: '–∑',
      232: '–∏', 233: '–π', 234: '–∫', 235: '–ª', 236: '–º', 237: '–Ω', 238: '–æ', 239: '–ø',
      240: '—Ä', 241: '—Å', 242: '—Ç', 243: '—É', 244: '—Ñ', 245: '—Ö', 246: '—Ü', 247: '—á',
      248: '—à', 249: '—â', 250: '—ä', 251: '—ã', 252: '—å', 253: '—ç', 254: '—é', 255: '—è',
      168: '–Å', 184: '—ë'
    };
    
    let result = '';
    for (let i = 0; i < buffer.length; i++) {
      const byte = buffer[i];
      if (cp1251Map[byte]) {
        result += cp1251Map[byte];
      } else {
        result += String.fromCharCode(byte);
      }
    }
    
    return result;
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
   */
  private calculateConfidence(
    extractedData: any, 
    totalRows: number, 
    dataQuality: 'high' | 'medium' | 'low',
    complexity: 'simple' | 'medium' | 'complex'
  ): number {
    let confidence = 0.6; // –ë–∞–∑–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
    
    // –ë–æ–Ω—É—Å –∑–∞ –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
    switch (dataQuality) {
      case 'high': confidence += 0.3; break;
      case 'medium': confidence += 0.2; break;
      case 'low': confidence += 0.1; break;
    }
    
    // –ë–æ–Ω—É—Å/—à—Ç—Ä–∞—Ñ –∑–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    switch (complexity) {
      case 'simple': confidence += 0.1; break;
      case 'medium': confidence += 0.05; break;
      case 'complex': confidence -= 0.05; break;
    }
    
    // –ë–æ–Ω—É—Å –∑–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã
    const unitsCount = extractedData.russian_units_found.length;
    confidence += Math.min(unitsCount * 0.02, 0.25);
    
    // –ë–æ–Ω—É—Å –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
    if (totalRows > 5) confidence += 0.05;
    if (totalRows > 20) confidence += 0.05;
    
    return Math.min(confidence, 0.99);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª JSON —Ñ–æ—Ä–º–∞—Ç–æ–º
   */
  canParse(filename: string, mimeType?: string): boolean {
    const extension = filename.toLowerCase().split('.').pop();
    
    if (extension && this.supportedFormats.includes(extension)) {
      return true;
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ MIME —Ç–∏–ø—É
    if (mimeType) {
      const jsonMimeTypes = [
        'application/json',
        'text/json',
        'application/x-json'
      ];
      
      return jsonMimeTypes.includes(mimeType);
    }
    
    return false;
  }
}