/**
 * –ò–Ω–¥–µ–∫—Å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤
 * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –ø–∞—Ä—Å–µ—Ä—ã –∏ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
 */

// –ë–∞–∑–æ–≤—ã–µ —Ç–∏–ø—ã –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
export * from './base-parser';

// –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–∞—Ä—Å–µ—Ä—ã
export { CsvTsvParser } from './csv-parser';
export { ExcelParser } from './excel-parser';
export { JsonParser } from './json-parser';
export { TxtParser } from './txt-parser';
export { HtmlParser } from './html-parser';
export { OfficeDocumentParser } from './office-parser';
export { PdfParser } from './pdf-parser';
export { RtfParser } from './rtf-parser';
export { XmlParser } from './xml-parser';

// –î–µ—Ç–µ–∫—Ç–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞
export { FormatDetector } from '../format-detector';

// –§–∞–±—Ä–∏–∫–∞ –ø–∞—Ä—Å–µ—Ä–æ–≤
import { BaseParser, ParseOptions, ParserResult } from './base-parser';
import { CsvTsvParser } from './csv-parser';
import { ExcelParser } from './excel-parser';
import { JsonParser } from './json-parser';
import { TxtParser } from './txt-parser';
import { HtmlParser } from './html-parser';
import { OfficeDocumentParser } from './office-parser';
import { PdfParser } from './pdf-parser';
import { RtfParser } from './rtf-parser';
import { XmlParser } from './xml-parser';
import { FormatDetector, FileFormatInfo } from '../format-detector';

/**
 * –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–æ–≤ –ø–æ —Ç–∏–ø—É —Ñ–∞–π–ª–∞
 */
export class ParserFactory {
  private static parsers = new Map<string, typeof BaseParser>([
    ['csv', CsvTsvParser],
    ['tsv', CsvTsvParser],
    ['excel', ExcelParser],
    ['json', JsonParser],
    ['txt', TxtParser],
    ['html', HtmlParser],
    ['docx', OfficeDocumentParser],
    ['doc', OfficeDocumentParser],
    ['xlsx', OfficeDocumentParser],
    ['xls', OfficeDocumentParser],
    ['pptx', OfficeDocumentParser],
    ['ppt', OfficeDocumentParser],
    ['odt', OfficeDocumentParser],
    ['odp', OfficeDocumentParser],
    ['ods', OfficeDocumentParser],
    ['rtf', RtfParser],
    ['pdf', PdfParser],
    ['xml', XmlParser]
  ]);

  /**
   * –°–æ–∑–¥–∞–µ—Ç –ø–∞—Ä—Å–µ—Ä –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
   */
  static createParser(format: string): BaseParser | null {
    const ParserClass = this.parsers.get(format);
    return ParserClass ? new ParserClass() : null;
  }

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç –∏ —Å–æ–∑–¥–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–∞—Ä—Å–µ—Ä
   */
  static createParserForFile(
    filename: string,
    buffer: Buffer,
    mimeType?: string
  ): { parser: BaseParser | null; formatInfo: FileFormatInfo } {
    const formatInfo = FormatDetector.detectFormat(filename, buffer, mimeType);
    const parser = this.createParser(formatInfo.format);
    
    return { parser, formatInfo };
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç —Ñ–∞–π–ª, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏–≤ –µ–≥–æ —Ñ–æ—Ä–º–∞—Ç
   */
  static async parseFile(
    filename: string,
    buffer: Buffer,
    mimeType?: string,
    options?: ParseOptions
  ): Promise<{
    result: ParserResult;
    formatInfo: FileFormatInfo;
    parserUsed: string | null;
  }> {
    const { parser, formatInfo } = this.createParserForFile(filename, buffer, mimeType);
    
    if (!parser) {
      return {
        result: {
          success: false,
          error: `No parser available for format: ${formatInfo.format}`,
          processingTime: 0
        },
        formatInfo,
        parserUsed: null
      };
    }

    console.log(`üìã ParserFactory: using ${parser.constructor.name} for ${formatInfo.format} file`);
    
    const result = await parser.parse(buffer, options);
    
    return {
      result,
      formatInfo,
      parserUsed: parser.constructor.name
    };
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
   */
  static getSupportedFormats(): string[] {
    return Array.from(this.parsers.keys());
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —Ñ–æ—Ä–º–∞—Ç
   */
  static isFormatSupported(format: string): boolean {
    return this.parsers.has(format);
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä
   */
  static registerParser(format: string, parserClass: typeof BaseParser): void {
    this.parsers.set(format, parserClass);
    console.log(`üìã ParserFactory: registered parser for ${format} format`);
  }
}

/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–∞—Ä—Å–µ—Ä–∞–º–∏
 */
export class ParserUtils {
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  static assessExtractionQuality(result: ParserResult): {
    quality: 'excellent' | 'good' | 'fair' | 'poor';
    score: number;
    recommendations: string[];
  } {
    if (!result.success || !result.data) {
      return {
        quality: 'poor',
        score: 0,
        recommendations: ['–ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞']
      };
    }

    const data = result.data;
    const recommendations: string[] = [];
    let score = 0;

    // –ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –ø–æ confidence
    score += data.confidence * 50;

    // –ë–æ–Ω—É—Å –∑–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –µ–¥–∏–Ω–∏—Ü—ã
    const unitsCount = data.metadata.russian_units_found.length;
    if (unitsCount > 0) {
      score += Math.min(unitsCount * 5, 25);
    } else {
      recommendations.push('–ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è');
    }

    // –ë–æ–Ω—É—Å –∑–∞ –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
    switch (data.metadata.data_quality) {
      case 'high': score += 20; break;
      case 'medium': score += 10; break;
      case 'low': 
        score += 5; 
        recommendations.push('–ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–∞');
        break;
    }

    // –®—Ç—Ä–∞—Ñ –∑–∞ –Ω–∏–∑–∫–æ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –æ—à–∏–±–∫–∏)
    if (data.metadata.processing_time_ms < 10) {
      score -= 10;
      recommendations.push('–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –±—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ - –≤–æ–∑–º–æ–∂–Ω—ã –æ—à–∏–±–∫–∏');
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
    let quality: 'excellent' | 'good' | 'fair' | 'poor';
    if (score >= 80) {
      quality = 'excellent';
    } else if (score >= 60) {
      quality = 'good';
    } else if (score >= 40) {
      quality = 'fair';
      recommendations.push('–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥—Ä—É–≥–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞');
    } else {
      quality = 'poor';
      recommendations.push('–§–∞–π–ª –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –∏–º–µ—Ç—å –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É');
    }

    return { quality, score: Math.min(score, 100), recommendations };
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
   */
  static extractMetrics(result: ParserResult): {
    totalRows: number;
    unitsFound: number;
    dataQuality: string;
    processingTime: number;
    confidence: number;
    extractedTypes: string[];
  } {
    if (!result.success || !result.data) {
      return {
        totalRows: 0,
        unitsFound: 0,
        dataQuality: 'unknown',
        processingTime: result.processingTime,
        confidence: 0,
        extractedTypes: []
      };
    }

    const data = result.data;
    const extractedTypes: string[] = [];

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (data.extractedData.fuel_data && data.extractedData.fuel_data.length > 0) {
      extractedTypes.push('fuel');
    }
    if (data.extractedData.electricity_data && data.extractedData.electricity_data.length > 0) {
      extractedTypes.push('electricity');
    }
    if (data.extractedData.gas_data && data.extractedData.gas_data.length > 0) {
      extractedTypes.push('gas');
    }
    if (data.extractedData.transport_data && data.extractedData.transport_data.length > 0) {
      extractedTypes.push('transport');
    }

    return {
      totalRows: data.extractedData.total_rows || 0,
      unitsFound: data.metadata.russian_units_found.length,
      dataQuality: data.metadata.data_quality,
      processingTime: data.metadata.processing_time_ms,
      confidence: Math.round(data.confidence * 100),
      extractedTypes
    };
  }
}