/**
 * –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π TXT –ø–∞—Ä—Å–µ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–¥–∏—Ä–æ–≤–æ–∫ (2025)
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç iconv-lite –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
 */

import * as fs from 'fs/promises';
import * as iconv from 'iconv-lite';
import { BaseParser, ParsedDocument, ParsedRow, DataQuality } from './base-parser';

export interface TxtParserOptions {
  encoding?: string;
  autoDetectEncoding?: boolean;
  delimiter?: string;
  skipEmptyLines?: boolean;
  trimLines?: boolean;
}

export class TxtParser extends BaseParser {
  private readonly options: Required<TxtParserOptions>;

  constructor(options: TxtParserOptions = {}) {
    super();
    this.options = {
      encoding: options.encoding || 'utf8',
      autoDetectEncoding: options.autoDetectEncoding ?? true,
      delimiter: options.delimiter || '\n',
      skipEmptyLines: options.skipEmptyLines ?? true,
      trimLines: options.trimLines ?? true,
    };
  }

  async parseFile(filePath: string): Promise<ParsedDocument> {
    const startTime = Date.now();
    
    try {
      console.log(`üìÑ TXT Parser: –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ ${filePath}`);
      
      // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ –±—É—Ñ–µ—Ä –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–¥–∏—Ä–æ–≤–∫–∏
      const buffer = await fs.readFile(filePath);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É
      const encoding = this.detectEncoding(buffer);
      console.log(`üî§ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∞: ${encoding}`);
      
      // –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
      const content = this.decodeContent(buffer, encoding);
      
      // –ü–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç
      const result = this.parseText(content);
      
      const processingTime = Date.now() - startTime;
      console.log(`‚úÖ TXT Parser: —Ñ–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞ ${processingTime}ms`);
      
      return {
        ...result,
        metadata: {
          ...result.metadata,
          encoding,
          processingTime,
          parser: 'TxtParser'
        }
      };
      
    } catch (error) {
      console.error(`‚ùå TXT Parser: –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ ${filePath}:`, error);
      throw error;
    }
  }

  parseText(content: string): ParsedDocument {
    const lines = this.splitIntoLines(content);
    const rows: ParsedRow[] = [];
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i];
      
      if (this.options.skipEmptyLines && !line.trim()) {
        continue;
      }
      
      const processedLine = this.options.trimLines ? line.trim() : line;
      
      // –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç—Ä–æ–∫–µ
      const extractedData = this.extractDataFromLine(processedLine, i + 1);
      
      if (extractedData.hasData) {
        rows.push({
          index: i + 1,
          content: processedLine,
          extractedData: extractedData.data,
          confidence: extractedData.confidence
        });
      }
    }
    
    const quality = this.assessDataQuality(rows, lines.length);
    
    return {
      success: true,
      data: rows,
      metadata: {
        totalLines: lines.length,
        dataLines: rows.length,
        format: 'txt',
        quality: quality.quality,
        confidence: quality.confidence,
        extractedTypes: this.getExtractedTypes(rows)
      }
    };
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–¥–∏—Ä–æ–≤–∫—É —Ñ–∞–π–ª–∞
   */
  private detectEncoding(buffer: Buffer): string {
    if (!this.options.autoDetectEncoding) {
      return this.options.encoding;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º BOM
    if (buffer.length >= 3 && buffer[0] === 0xEF && buffer[1] === 0xBB && buffer[2] === 0xBF) {
      return 'utf8';
    }
    
    if (buffer.length >= 2 && buffer[0] === 0xFF && buffer[1] === 0xFE) {
      return 'utf16le';
    }
    
    if (buffer.length >= 2 && buffer[0] === 0xFE && buffer[1] === 0xFF) {
      return 'utf16be';
    }

    // –ü—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
    const sampleSize = Math.min(buffer.length, 1024);
    const sample = buffer.subarray(0, sampleSize);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ UTF-8
    try {
      const utf8Text = iconv.decode(sample, 'utf8');
      if (this.isValidUtf8(utf8Text)) {
        return 'utf8';
      }
    } catch (e) {
      // –ù–µ UTF-8
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ CP1251 (Windows-1251) –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    try {
      const cp1251Text = iconv.decode(sample, 'cp1251');
      if (this.containsCyrillic(cp1251Text)) {
        return 'cp1251';
      }
    } catch (e) {
      // –ù–µ CP1251
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ CP866 (DOS –∫–æ–¥–∏—Ä–æ–≤–∫–∞)
    try {
      const cp866Text = iconv.decode(sample, 'cp866');
      if (this.containsCyrillic(cp866Text)) {
        return 'cp866';
      }
    } catch (e) {
      // –ù–µ CP866
    }
    
    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é UTF-8
    return 'utf8';
  }

  /**
   * –î–µ–∫–æ–¥–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
   */
  private decodeContent(buffer: Buffer, encoding: string): string {
    try {
      return iconv.decode(buffer, encoding);
    } catch (error) {
      console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Å ${encoding}, –∏—Å–ø–æ–ª—å–∑—É—é UTF-8`);
      return iconv.decode(buffer, 'utf8', { stripBOM: true });
    }
  }

  /**
   * –†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏
   */
  private splitIntoLines(content: string): string[] {
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã —Å—Ç—Ä–æ–∫
    const normalized = content.replace(/\r\n/g, '\n').replace(/\r/g, '\n');
    
    if (this.options.delimiter === '\n') {
      return normalized.split('\n');
    }
    
    return normalized.split(this.options.delimiter);
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏
   */
  private extractDataFromLine(line: string, lineNumber: number): {
    hasData: boolean;
    data: any;
    confidence: number;
  } {
    const patterns = this.getEnergyPatterns();
    const extracted: any = {};
    let confidence = 0;
    let hasData = false;

    for (const [category, categoryPatterns] of Object.entries(patterns)) {
      for (const pattern of categoryPatterns) {
        const matches = line.match(pattern.regex);
        if (matches) {
          if (!extracted[category]) {
            extracted[category] = [];
          }
          
          const value = this.extractValue(matches, pattern);
          if (value) {
            extracted[category].push({
              value: value.amount,
              unit: value.unit,
              line: lineNumber,
              text: matches[0],
              confidence: pattern.confidence
            });
            
            confidence = Math.max(confidence, pattern.confidence);
            hasData = true;
          }
        }
      }
    }

    return { hasData, data: extracted, confidence };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –≤–∞–ª–∏–¥–Ω—ã–º UTF-8
   */
  private isValidUtf8(text: string): boolean {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ replacement character
    return !text.includes('\uFFFD') && text.length > 0;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
   */
  private containsCyrillic(text: string): boolean {
    return /[–∞-—è—ë]/i.test(text);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  private getEnergyPatterns() {
    return {
      electricity: [
        {
          regex: /(\d+(?:[.,]\d+)?)\s*(?:–∫–í—Ç[¬∑\*]?—á|kwh|–∫–≤–∞—Ç—Ç?[-\s]?—á–∞—Å)/gi,
          confidence: 0.9,
          unit: '–∫–í—Ç¬∑—á'
        },
        {
          regex: /—ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è[:\s]*(\d+(?:[.,]\d+)?)/gi,
          confidence: 0.8,
          unit: '–∫–í—Ç¬∑—á'
        }
      ],
      gas: [
        {
          regex: /(\d+(?:[.,]\d+)?)\s*(?:–º[3¬≥]|–∫—É–±\.?\s*–º|–∫—É–±–æ–º–µ—Ç—Ä)/gi,
          confidence: 0.9,
          unit: '–º¬≥'
        },
        {
          regex: /–≥–∞–∑[:\s]*(\d+(?:[.,]\d+)?)/gi,
          confidence: 0.8,
          unit: '–º¬≥'
        }
      ],
      fuel: [
        {
          regex: /(\d+(?:[.,]\d+)?)\s*(?:–ª|–ª–∏—Ç|–ª–∏—Ç—Ä)/gi,
          confidence: 0.9,
          unit: '–ª'
        },
        {
          regex: /(?:–±–µ–Ω–∑–∏–Ω|–¥–∏–∑–µ–ª—å|—Ç–æ–ø–ª–∏–≤–æ)[:\s]*(\d+(?:[.,]\d+)?)/gi,
          confidence: 0.8,
          unit: '–ª'
        }
      ],
      heat: [
        {
          regex: /(\d+(?:[.,]\d+)?)\s*(?:–≥–∫–∞–ª|–ì–ö–∞–ª|–≥–∏–≥–∞–∫–∞–ª–æ—Ä–∏)/gi,
          confidence: 0.9,
          unit: '–ì–∫–∞–ª'
        },
        {
          regex: /—Ç–µ–ø–ª[–∞-—è]*[:\s]*(\d+(?:[.,]\d+)?)/gi,
          confidence: 0.7,
          unit: '–ì–∫–∞–ª'
        }
      ],
      transport: [
        {
          regex: /(\d+(?:[.,]\d+)?)\s*(?:–∫–º|–∫–∏–ª–æ–º–µ—Ç—Ä)/gi,
          confidence: 0.9,
          unit: '–∫–º'
        },
        {
          regex: /–ø—Ä–æ–±–µ–≥[:\s]*(\d+(?:[.,]\d+)?)/gi,
          confidence: 0.8,
          unit: '–∫–º'
        }
      ]
    };
  }

  /**
   * –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  private assessDataQuality(rows: ParsedRow[], totalLines: number): {
    quality: DataQuality;
    confidence: number;
  } {
    if (rows.length === 0) {
      return { quality: 'poor', confidence: 0 };
    }

    const dataRatio = rows.length / totalLines;
    const avgConfidence = rows.reduce((sum, row) => sum + row.confidence, 0) / rows.length;
    
    let quality: DataQuality;
    
    if (dataRatio > 0.3 && avgConfidence > 0.8) {
      quality = 'excellent';
    } else if (dataRatio > 0.1 && avgConfidence > 0.6) {
      quality = 'good';
    } else if (dataRatio > 0.05 && avgConfidence > 0.4) {
      quality = 'fair';
    } else {
      quality = 'poor';
    }

    return { quality, confidence: avgConfidence };
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–∏–ø—ã –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  private getExtractedTypes(rows: ParsedRow[]): string[] {
    const types = new Set<string>();
    
    for (const row of rows) {
      if (row.extractedData) {
        Object.keys(row.extractedData).forEach(key => types.add(key));
      }
    }
    
    return Array.from(types);
  }
}