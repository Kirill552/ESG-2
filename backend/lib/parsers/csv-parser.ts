/**
 * –ü–∞—Ä—Å–µ—Ä –¥–ª—è CSV/TSV —Ñ–∞–π–ª–æ–≤ —Å –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π –∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
 * –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –ø–æ–∏—Å–∫–æ–º –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è
 */

import { 
  BaseParser, 
  ParsedDocumentData, 
  ParseOptions, 
  ParserResult,
  RussianUnitsHelper 
} from './base-parser';

export class CsvTsvParser extends BaseParser {
  protected readonly supportedFormats = ['csv', 'tsv'];

  /**
   * –ü–∞—Ä—Å–∏—Ç CSV/TSV —Ñ–∞–π–ª —Å –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Ñ–æ—Ä–º–∞—Ç–∞
   */
  async parse(buffer: Buffer, options: ParseOptions = {}): Promise<ParserResult> {
    const startTime = Date.now();
    
    try {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É
      const encoding = options.encoding === 'auto' || !options.encoding 
        ? this.detectEncoding(buffer) 
        : options.encoding;
      
      console.log(`üìÑ CSV Parser: detected encoding ${encoding}`);
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –±—É—Ñ–µ—Ä –≤ —Ç–µ–∫—Å—Ç
      let text: string;
      if (encoding === 'cp1251') {
        text = this.convertFromCp1251(buffer);
      } else {
        text = buffer.toString(encoding === 'cp866' ? 'binary' : 'utf8');
      }
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
      const delimiter = options.delimiter === 'auto' || !options.delimiter
        ? this.detectDelimiter(text)
        : options.delimiter;
        
      console.log(`üìÑ CSV Parser: detected delimiter '${delimiter}'`);
      
      // –ü–∞—Ä—Å–∏–º CSV
      const rows = this.parseRows(text, delimiter, options);
      console.log(`üìÑ CSV Parser: parsed ${rows.length} rows`);
      
      if (rows.length === 0) {
        return {
          success: false,
          error: 'No valid rows found in CSV file',
          processingTime: Date.now() - startTime
        };
      }
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ä–æ—Å—Å–∏–π—Å–∫–∏–º –µ–¥–∏–Ω–∏—Ü–∞–º
      const extractedUnitsData = this.extractRussianUnitsData(rows);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞, –µ—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç)
      const headers = this.detectHeaders(rows);
      
      // –û—Ü–µ–Ω–∏–≤–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
      const dataQuality = RussianUnitsHelper.assessDataQuality(
        extractedUnitsData.russian_units_found, 
        rows.length
      );
      
      const confidence = this.calculateConfidence(extractedUnitsData, rows.length, dataQuality);
      
      const result: ParsedDocumentData = {
        documentType: delimiter === '\t' ? 'csv' : 'csv', // TSV —Ç–æ–∂–µ —Å—á–∏—Ç–∞–µ–º CSV
        confidence,
        extractedData: {
          ...extractedUnitsData,
          raw_rows: options.maxRows ? rows.slice(0, options.maxRows) : rows,
          total_rows: rows.length,
          headers
        },
        metadata: {
          encoding,
          delimiter,
          format_detected: delimiter === '\t' ? 'TSV' : 'CSV',
          processing_time_ms: Date.now() - startTime,
          russian_units_found: extractedUnitsData.russian_units_found,
          data_quality: dataQuality
        }
      };
      
      console.log(`‚úÖ CSV Parser: success! Found ${extractedUnitsData.russian_units_found.length} units, quality: ${dataQuality}`);
      
      return {
        success: true,
        data: result,
        processingTime: Date.now() - startTime
      };
      
    } catch (error) {
      console.error('‚ùå CSV Parser failed:', error);
      
      return {
        success: false,
        error: error instanceof Error ? error.message : String(error),
        processingTime: Date.now() - startTime
      };
    }
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å CSV –ø–æ —á–∞—Å—Ç–æ—Ç–µ –≤—Å—Ç—Ä–µ—á–∞–µ–º–æ—Å—Ç–∏
   */
  private detectDelimiter(text: string): string {
    const sample = text.split('\n').slice(0, 10).join('\n'); // –ü–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫
    
    const delimiters = [',', ';', '\t', '|'];
    const scores: { [key: string]: number } = {};
    
    delimiters.forEach(delimiter => {
      const lines = sample.split('\n');
      const counts = lines.map(line => (line.match(new RegExp(`\\${delimiter}`, 'g')) || []).length);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å (–æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π –≤ —Å—Ç—Ä–æ–∫–∞—Ö)
      const avgCount = counts.reduce((a, b) => a + b, 0) / counts.length;
      const variance = counts.reduce((sum, count) => sum + Math.pow(count - avgCount, 2), 0) / counts.length;
      
      // –ß–µ–º –º–µ–Ω—å—à–µ variance –∏ –±–æ–ª—å—à–µ —Å—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, —Ç–µ–º –ª—É—á—à–µ
      scores[delimiter] = avgCount > 0 ? avgCount / (1 + variance) : 0;
    });
    
    // –í—ã–±–∏—Ä–∞–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Å –ª—É—á—à–∏–º —Å–∫–æ—Ä–æ–º
    const bestDelimiter = Object.entries(scores).reduce((best, [delimiter, score]) => 
      score > best.score ? { delimiter, score } : best, 
      { delimiter: ',', score: 0 }
    );
    
    return bestDelimiter.delimiter;
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫–∏ CSV —Å —É—á–µ—Ç–æ–º –∫–∞–≤—ã—á–µ–∫
   */
  private parseRows(text: string, delimiter: string, options: ParseOptions): any[][] {
    const lines = text.split(/\r?\n/);
    const rows: any[][] = [];
    
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i].trim();
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –≤ –æ–ø—Ü–∏—è—Ö
      if (options.skipEmptyRows !== false && (!line || line.length === 0)) {
        continue;
      }
      
      // –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É —Å —É—á–µ—Ç–æ–º –∫–∞–≤—ã—á–µ–∫
      const row = this.parseRow(line, delimiter);
      
      if (row.length > 0) {
        rows.push(row);
      }
      
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ
      if (options.maxRows && rows.length >= options.maxRows) {
        break;
      }
    }
    
    return rows;
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É CSV —Å —É—á–µ—Ç–æ–º –∫–∞–≤—ã—á–µ–∫
   */
  private parseRow(line: string, delimiter: string): string[] {
    const result: string[] = [];
    let current = '';
    let inQuotes = false;
    let quoteChar = '"';
    
    for (let i = 0; i < line.length; i++) {
      const char = line[i];
      const nextChar = line[i + 1];
      
      if ((char === '"' || char === "'") && !inQuotes) {
        // –ù–∞—á–∞–ª–æ –∫–∞–≤—ã—á–µ–∫
        inQuotes = true;
        quoteChar = char;
      } else if (char === quoteChar && inQuotes) {
        if (nextChar === quoteChar) {
          // –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–∞–≤—ã—á–∫–∞
          current += char;
          i++; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Å–∏–º–≤–æ–ª
        } else {
          // –ö–æ–Ω–µ—Ü –∫–∞–≤—ã—á–µ–∫
          inQuotes = false;
        }
      } else if (char === delimiter && !inQuotes) {
        // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –≤–Ω–µ –∫–∞–≤—ã—á–µ–∫
        result.push(current.trim());
        current = '';
      } else {
        current += char;
      }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–ª–µ
    result.push(current.trim());
    
    return result;
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
   */
  private detectHeaders(rows: any[][]): string[] | undefined {
    if (rows.length === 0) return undefined;
    
    const firstRow = rows[0];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ç–µ–∫—Å—Ç (–∑–∞–≥–æ–ª–æ–≤–∫–∏)
    const textFields = firstRow.filter(cell => 
      typeof cell === 'string' && 
      isNaN(parseFloat(cell)) && 
      cell.length > 2
    );
    
    // –ï—Å–ª–∏ –±–æ–ª—å—à–µ –ø–æ–ª–æ–≤–∏–Ω—ã –ø–æ–ª–µ–π - —Ç–µ–∫—Å—Ç–æ–≤—ã–µ, —Å—á–∏—Ç–∞–µ–º –∏—Ö –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
    if (textFields.length > firstRow.length / 2) {
      return firstRow.map(cell => String(cell));
    }
    
    return undefined;
  }

  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –±—É—Ñ–µ—Ä –∏–∑ CP1251 –≤ UTF-8
   */
  private convertFromCp1251(buffer: Buffer): string {
    // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä—É—Å—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    // –í production —Å—Ä–µ–¥–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É iconv-lite
    const cp1251Map: { [key: number]: string } = {
      192: '–ê', 193: '–ë', 194: '–í', 195: '–ì', 196: '–î', 197: '–ï', 198: '–ñ', 199: '–ó',
      200: '–ò', 201: '–ô', 202: '–ö', 203: '–õ', 204: '–ú', 205: '–ù', 206: '–û', 207: '–ü',
      208: '–†', 209: '–°', 210: '–¢', 211: '–£', 212: '–§', 213: '–•', 214: '–¶', 215: '–ß',
      216: '–®', 217: '–©', 218: '–™', 219: '–´', 220: '–¨', 221: '–≠', 222: '–Æ', 223: '–Ø',
      224: '–∞', 225: '–±', 226: '–≤', 227: '–≥', 228: '–¥', 229: '–µ', 230: '–∂', 231: '–∑',
      232: '–∏', 233: '–π', 234: '–∫', 235: '–ª', 236: '–º', 237: '–Ω', 238: '–æ', 239: '–ø',
      240: '—Ä', 241: '—Å', 242: '—Ç', 243: '—É', 244: '—Ñ', 245: '—Ö', 246: '—Ü', 247: '—á',
      248: '—à', 249: '—â', 250: '—ä', 251: '—ã', 252: '—å', 253: '—ç', 254: '—é', 255: '—è',
      168: '–Å', 184: '—ë'
    };
    
    let result = '';
    for (let i = 0; i < buffer.length; i++) {
      const byte = buffer[i];
      if (cp1251Map[byte]) {
        result += cp1251Map[byte];
      } else {
        result += String.fromCharCode(byte);
      }
    }
    
    return result;
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø–∞—Ä—Å–∏–Ω–≥–∞
   */
  private calculateConfidence(
    extractedData: any, 
    totalRows: number, 
    dataQuality: 'high' | 'medium' | 'low'
  ): number {
    let confidence = 0.5; // –ë–∞–∑–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
    
    // –ë–æ–Ω—É—Å –∑–∞ –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
    switch (dataQuality) {
      case 'high': confidence += 0.4; break;
      case 'medium': confidence += 0.2; break;
      case 'low': confidence += 0.1; break;
    }
    
    // –ë–æ–Ω—É—Å –∑–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã
    const unitsCount = extractedData.russian_units_found.length;
    confidence += Math.min(unitsCount * 0.02, 0.3);
    
    // –ë–æ–Ω—É—Å –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
    if (totalRows > 10) confidence += 0.1;
    if (totalRows > 50) confidence += 0.1;
    
    return Math.min(confidence, 0.99);
  }
}