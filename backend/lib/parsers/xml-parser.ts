/**
 * XML Parser –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ XML —Ñ–∞–π–ª–æ–≤
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç fast-xml-parser –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ XML –≤ JavaScript –æ–±—ä–µ–∫—Ç—ã
 */

import { BaseParser, ParseOptions, ParserResult } from './base-parser';
import { XMLParser, XMLValidator } from 'fast-xml-parser';

export class XmlParser extends BaseParser {
  readonly name = 'XmlParser';
  readonly supportedFormats = ['xml'];

  async parse(buffer: Buffer, options?: ParseOptions): Promise<ParserResult> {
    const startTime = Date.now();

    try {
      console.log(`üîç XmlParser: parsing XML file (${buffer.length} bytes)`);

      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º buffer –≤ —Å—Ç—Ä–æ–∫—É
      const xmlContent = buffer.toString('utf-8');

      // –í–∞–ª–∏–¥–∞—Ü–∏—è XML –ø–µ—Ä–µ–¥ –ø–∞—Ä—Å–∏–Ω–≥–æ–º
      const validationResult = XMLValidator.validate(xmlContent, {
        allowBooleanAttributes: true
      });

      if (validationResult !== true) {
        return {
          success: false,
          error: `Invalid XML: ${validationResult.err.msg} at line ${validationResult.err.line}`,
          processingTime: Date.now() - startTime
        };
      }

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞
      const parserOptions = {
        ignoreAttributes: false, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã
        attributeNamePrefix: '@_', // –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –∞—Ç—Ä–∏–±—É—Ç–æ–≤
        textNodeName: '#text', // –ò–º—è –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —É–∑–ª–æ–≤
        parseAttributeValue: true, // –ü–∞—Ä—Å–∏–º –∑–Ω–∞—á–µ–Ω–∏—è –∞—Ç—Ä–∏–±—É—Ç–æ–≤ (—á–∏—Å–ª–∞, –±—É–ª–µ–≤—ã)
        parseTagValue: true, // –ü–∞—Ä—Å–∏–º –∑–Ω–∞—á–µ–Ω–∏—è —Ç–µ–≥–æ–≤
        trimValues: true, // –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã
        ignoreDeclaration: false, // –°–æ—Ö—Ä–∞–Ω—è–µ–º XML –¥–µ–∫–ª–∞—Ä–∞—Ü–∏—é
        ignorePiTags: false, // –°–æ—Ö—Ä–∞–Ω—è–µ–º processing instructions
        arrayMode: false, // –ù–µ —Ñ–æ—Ä—Å–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤—ã –¥–ª—è –≤—Å–µ—Ö —Ç–µ–≥–æ–≤
        cdataPropName: '__cdata' // –ò–º—è –¥–ª—è CDATA —Å–µ–∫—Ü–∏–π
      };

      const parser = new XMLParser(parserOptions);
      const parsedData = parser.parse(xmlContent);

      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è OCR-like processing
      const extractedText = this.extractTextFromXml(parsedData);

      // –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ, —Ç–æ–ø–ª–∏–≤–µ, —ç–Ω–µ—Ä–≥–∏–∏
      const extractedData = this.extractEnergyData(parsedData, extractedText);

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
      const dataQuality = this.assessDataQuality(extractedData, extractedText);

      // –ù–∞—Ö–æ–¥–∏–º —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
      const russianUnits = this.findRussianUnits(extractedText);

      // –í—ã—á–∏—Å–ª—è–µ–º confidence –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      let confidence = 0.5; // –ë–∞–∑–æ–≤—ã–π confidence –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ XML

      if (russianUnits.length > 0) confidence += 0.2;
      if (extractedData.fuel_data && extractedData.fuel_data.length > 0) confidence += 0.15;
      if (extractedData.electricity_data && extractedData.electricity_data.length > 0) confidence += 0.15;

      confidence = Math.min(confidence, 1.0);

      const processingTime = Date.now() - startTime;

      console.log(`‚úÖ XmlParser: extracted ${extractedText.length} chars, confidence: ${confidence.toFixed(2)}`);

      return {
        success: true,
        data: {
          text: extractedText,
          extractedData,
          confidence,
          metadata: {
            parser_used: this.name,
            processing_time_ms: processingTime,
            file_size_bytes: buffer.length,
            data_quality: dataQuality,
            russian_units_found: russianUnits,
            xml_structure: this.describeXmlStructure(parsedData)
          }
        },
        processingTime
      };

    } catch (error: any) {
      const processingTime = Date.now() - startTime;
      console.error('‚ùå XmlParser error:', error.message);

      return {
        success: false,
        error: `XML parsing failed: ${error.message}`,
        processingTime
      };
    }
  }

  /**
   * –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –≤–µ—Å—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ XML –æ–±—ä–µ–∫—Ç–∞
   */
  private extractTextFromXml(obj: any, depth: number = 0): string {
    if (depth > 50) return ''; // –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ª–∏—à–∫–æ–º –≥–ª—É–±–æ–∫–æ–π —Ä–µ–∫—É—Ä—Å–∏–∏

    let text = '';

    if (typeof obj === 'string' || typeof obj === 'number') {
      return String(obj) + ' ';
    }

    if (Array.isArray(obj)) {
      for (const item of obj) {
        text += this.extractTextFromXml(item, depth + 1);
      }
      return text;
    }

    if (typeof obj === 'object' && obj !== null) {
      for (const key of Object.keys(obj)) {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è fast-xml-parser
        if (key.startsWith('@_') || key === '?xml' || key === '__cdata') {
          continue;
        }

        const value = obj[key];

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è —Ç–µ–≥–∞ –∫–∞–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        if (key !== '#text') {
          text += key + ': ';
        }

        text += this.extractTextFromXml(value, depth + 1);
      }
    }

    return text;
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–ø–ª–∏–≤–µ, —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–µ, —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ –∏–∑ XML
   */
  private extractEnergyData(parsedData: any, fullText: string): any {
    const result: any = {
      fuel_data: [],
      electricity_data: [],
      gas_data: [],
      transport_data: []
    };

    // –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ XML
    this.searchForEnergyData(parsedData, result);

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ –µ—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if (result.fuel_data.length === 0 && result.electricity_data.length === 0) {
      this.extractFromText(fullText, result);
    }

    // –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö
    result.total_rows =
      result.fuel_data.length +
      result.electricity_data.length +
      result.gas_data.length +
      result.transport_data.length;

    return result;
  }

  /**
   * –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—â–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ XML —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
   */
  private searchForEnergyData(obj: any, result: any, depth: number = 0): void {
    if (depth > 30) return; // –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ª–∏—à–∫–æ–º –≥–ª—É–±–æ–∫–æ–π —Ä–µ–∫—É—Ä—Å–∏–∏

    if (Array.isArray(obj)) {
      for (const item of obj) {
        this.searchForEnergyData(item, result, depth + 1);
      }
      return;
    }

    if (typeof obj !== 'object' || obj === null) return;

    // –ò—â–µ–º –∫–ª—é—á–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ç–æ–ø–ª–∏–≤–æ–º
    const fuelKeys = ['fuel', '—Ç–æ–ø–ª–∏–≤–æ', '–±–µ–Ω–∑–∏–Ω', '–¥–∏–∑–µ–ª—å', 'gasoline', 'diesel'];
    const electricityKeys = ['electricity', '—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ', '–∫–≤—Ç—á', 'kwh', 'power'];
    const gasKeys = ['gas', '–≥–∞–∑', '–º–µ—Ç–∞–Ω', '–ø—Ä–∏—Ä–æ–¥–Ω—ã–π'];

    for (const [key, value] of Object.entries(obj)) {
      const lowerKey = key.toLowerCase();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
      if (fuelKeys.some(k => lowerKey.includes(k))) {
        if (typeof value === 'object' && value !== null) {
          result.fuel_data.push(value);
        }
      } else if (electricityKeys.some(k => lowerKey.includes(k))) {
        if (typeof value === 'object' && value !== null) {
          result.electricity_data.push(value);
        }
      } else if (gasKeys.some(k => lowerKey.includes(k))) {
        if (typeof value === 'object' && value !== null) {
          result.gas_data.push(value);
        }
      }

      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫
      this.searchForEnergyData(value, result, depth + 1);
    }
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
   */
  private extractFromText(text: string, result: any): void {
    // –ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–ø–ª–∏–≤–µ (–ª, —Ç, –º¬≥)
    const fuelPattern = /(–±–µ–Ω–∑–∏–Ω|–¥–∏–∑–µ–ª—å|—Ç–æ–ø–ª–∏–≤–æ|–∫–µ—Ä–æ—Å–∏–Ω).*?(\d+[.,]?\d*)\s*(–ª|–ª–∏—Ç—Ä|—Ç|—Ç–æ–Ω–Ω|–º¬≥)/gi;
    let match;

    while ((match = fuelPattern.exec(text)) !== null) {
      result.fuel_data.push({
        type: match[1],
        value: parseFloat(match[2].replace(',', '.')),
        unit: match[3]
      });
    }

    // –ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –æ–± —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–µ (–∫–í—Ç¬∑—á, –ú–í—Ç¬∑—á)
    const electricityPattern = /(\d+[.,]?\d*)\s*(–∫–≤—Ç.*?—á|–º–≤—Ç.*?—á|kwh|mwh)/gi;

    while ((match = electricityPattern.exec(text)) !== null) {
      result.electricity_data.push({
        value: parseFloat(match[1].replace(',', '.')),
        unit: match[2]
      });
    }

    // –ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –æ –≥–∞–∑–µ (–º¬≥, —Ç—ã—Å. –º¬≥)
    const gasPattern = /(–≥–∞–∑|–º–µ—Ç–∞–Ω).*?(\d+[.,]?\d*)\s*(–º¬≥|—Ç—ã—Å\.?\s*–º¬≥)/gi;

    while ((match = gasPattern.exec(text)) !== null) {
      result.gas_data.push({
        type: match[1],
        value: parseFloat(match[2].replace(',', '.')),
        unit: match[3]
      });
    }
  }

  /**
   * –û–ø–∏—Å—ã–≤–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É XML –¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
   */
  private describeXmlStructure(parsedData: any): string {
    const rootKeys = Object.keys(parsedData);
    const rootElement = rootKeys.find(k => !k.startsWith('@_') && k !== '?xml') || rootKeys[0];

    if (!rootElement) return 'Empty XML';

    const elementCount = this.countElements(parsedData[rootElement]);
    return `Root: ${rootElement}, Elements: ${elementCount}`;
  }

  /**
   * –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ XML –æ–±—ä–µ–∫—Ç–µ
   */
  private countElements(obj: any, depth: number = 0): number {
    if (depth > 20) return 0;

    if (Array.isArray(obj)) {
      return obj.reduce((sum, item) => sum + this.countElements(item, depth + 1), 0);
    }

    if (typeof obj === 'object' && obj !== null) {
      return 1 + Object.values(obj).reduce(
        (sum, value) => sum + this.countElements(value, depth + 1),
        0
      );
    }

    return 0;
  }

  /**
   * –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  private assessDataQuality(extractedData: any, text: string): 'high' | 'medium' | 'low' {
    const totalRows = extractedData.total_rows || 0;
    const textLength = text.length;

    if (totalRows > 5 && textLength > 500) return 'high';
    if (totalRows > 0 || textLength > 200) return 'medium';
    return 'low';
  }

  /**
   * –ù–∞—Ö–æ–¥–∏—Ç —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–µ
   */
  private findRussianUnits(text: string): string[] {
    const units = new Set<string>();
    const unitPatterns = [
      /\b–ª\b/gi,          // –ª–∏—Ç—Ä—ã
      /\b—Ç\b/gi,          // —Ç–æ–Ω–Ω—ã
      /\b–º¬≥\b/gi,         // –∫—É–±–∏—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä—ã
      /\b–∫–í—Ç¬∑—á\b/gi,      // –∫–∏–ª–æ–≤–∞—Ç—Ç-—á–∞—Å
      /\b–ú–í—Ç¬∑—á\b/gi,      // –º–µ–≥–∞–≤–∞—Ç—Ç-—á–∞—Å
      /\b–ì–∫–∞–ª\b/gi,       // –≥–∏–≥–∞–∫–∞–ª–æ—Ä–∏–∏
      /\b–∫–≥\b/gi,         // –∫–∏–ª–æ–≥—Ä–∞–º–º—ã
      /—Ç—ã—Å\.\s*–º¬≥/gi      // —Ç—ã—Å—è—á–∏ –∫—É–±–æ–º–µ—Ç—Ä–æ–≤
    ];

    for (const pattern of unitPatterns) {
      const matches = text.match(pattern);
      if (matches) {
        matches.forEach(m => units.add(m));
      }
    }

    return Array.from(units);
  }
}
