/**
 * –ú–æ–¥—É–ª—å –¥–ª—è —Å–±–æ—Ä–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
 * –°–æ–±–∏—Ä–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º —ç—Ç–∞–ø–∞–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
 */

import * as fs from 'fs';
import * as path from 'path';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è –º–µ—Ç—Ä–∏–∫
export interface ProcessingMetrics {
  documentId: string;
  filePath: string;
  fileSize: number;
  fileType: string;
  processingMethod: string;
  startTime: number;
  endTime: number;
  processingTimeMs: number;
  
  // –ú–µ—Ç—Ä–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
  parserUsed: string;
  fallbackAttempts: number;
  confidence: number;
  
  // –ú–µ—Ç—Ä–∏–∫–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
  fieldsExtracted: number;
  fieldsExpected: number;
  extractionSuccess: boolean;
  dataQuality: 'high' | 'medium' | 'low';
  
  // –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ —Ç–∏–ø–∞–º –¥–∞–Ω–Ω—ã—Ö
  fuelDataExtracted: number;
  electricityDataExtracted: boolean;
  thermalDataExtracted: boolean;
  transportDataExtracted: boolean;
  fgasDataExtracted: number;
  industrialProcessesExtracted: number;
  
  // –ú–µ—Ç—Ä–∏–∫–∏ –≤—ã–±—Ä–æ—Å–æ–≤
  totalCO2Calculated: number;
  baseEmissions: number;
  fgasEmissions: number;
  industrialEmissions: number;
  emissionCalculationMethod: string;
  
  // –ú–µ—Ç—Ä–∏–∫–∏ —Å–∏–Ω–æ–Ω–∏–º–æ–≤
  synonymsApplied: number;
  fieldsNormalized: number;
  categoriesIdentified: number;
  
  // –û—à–∏–±–∫–∏ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
  errors: string[];
  warnings: string[];
  fallbackReason?: string;
  
  // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
  timestamp: string;
}

export interface AggregatedMetrics {
  totalDocuments: number;
  successfulExtractions: number;
  failedExtractions: number;
  avgProcessingTime: number;
  avgConfidence: number;
  
  // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –º–µ—Ç–æ–¥–∞–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
  methodsUsed: Record<string, number>;
  parsersUsed: Record<string, number>;
  dataQualityDistribution: Record<string, number>;
  
  // –ú–µ—Ç—Ä–∏–∫–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
  avgFieldsExtracted: number;
  avgFieldsExpected: number;
  extractionSuccessRate: number;
  
  // –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
  fuelExtractionRate: number;
  electricityExtractionRate: number;
  thermalExtractionRate: number;
  transportExtractionRate: number;
  
  // –í—ã–±—Ä–æ—Å—ã
  avgTotalCO2: number;
  avgBaseEmissions: number;
  documentsWithFgas: number;
  documentsWithIndustrialProcesses: number;
  
  // –°–∏–Ω–æ–Ω–∏–º—ã
  avgSynonymsApplied: number;
  avgFieldsNormalized: number;
  
  // –í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
  periodStart: string;
  periodEnd: string;
}

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —Å–±–æ—Ä–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
 */
export class ExtractionMetricsCollector {
  private metricsDir: string;
  private currentMetrics: ProcessingMetrics[] = [];
  
  constructor() {
    this.metricsDir = path.join(process.cwd(), 'debug_output', 'extraction_metrics');
    this.ensureMetricsDirectory();
  }
  
  private ensureMetricsDirectory(): void {
    if (!fs.existsSync(this.metricsDir)) {
      fs.mkdirSync(this.metricsDir, { recursive: true });
    }
  }
  
  /**
   * –ù–∞—á–∞–ª–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
   */
  startDocumentProcessing(documentId: string, filePath: string): string {
    const sessionId = `${documentId}_${Date.now()}`;
    return sessionId;
  }
  
  /**
   * –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
   */
  recordProcessingMetrics(metrics: ProcessingMetrics): void {
    this.currentMetrics.push(metrics);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ —Ñ–∞–π–ª
    const filename = `metrics_${metrics.documentId}_${Date.now()}.json`;
    const filePath = path.join(this.metricsDir, filename);
    
    try {
      fs.writeFileSync(filePath, JSON.stringify(metrics, null, 2), 'utf8');
      console.log(`üìä –ú–µ—Ç—Ä–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: ${filePath}`);
    } catch (error) {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏:', error);
    }
  }
  
  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç—Ä–∏–∫
   */
  analyzeExtractionQuality(metrics: ProcessingMetrics): {
    overallScore: number;
    recommendations: string[];
    strengths: string[];
    weaknesses: string[];
  } {
    const recommendations: string[] = [];
    const strengths: string[] = [];
    const weaknesses: string[] = [];
    
    let score = 0;
    const maxScore = 100;
    
    // –û—Ü–µ–Ω–∫–∞ –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (30 –±–∞–ª–ª–æ–≤)
    if (metrics.confidence >= 0.9) {
      score += 30;
      strengths.push('–í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏');
    } else if (metrics.confidence >= 0.7) {
      score += 20;
      strengths.push('–°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏');
    } else {
      score += 10;
      weaknesses.push('–ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏');
      recommendations.push('–†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –º–µ—Ç–æ–¥–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏');
    }
    
    // –û—Ü–µ–Ω–∫–∞ –ø–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—é –ø–æ–ª–µ–π (25 –±–∞–ª–ª–æ–≤)
    const fieldExtractionRate = metrics.fieldsExtracted / Math.max(metrics.fieldsExpected, 1);
    if (fieldExtractionRate >= 0.8) {
      score += 25;
      strengths.push('–•–æ—Ä–æ—à–µ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–ª–µ–π –¥–∞–Ω–Ω—ã—Ö');
    } else if (fieldExtractionRate >= 0.5) {
      score += 15;
    } else {
      score += 5;
      weaknesses.push('–ù–µ–ø–æ–ª–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–ª–µ–π');
      recommendations.push('–£–ª—É—á—à–∏—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö');
    }
    
    // –û—Ü–µ–Ω–∫–∞ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É –¥–∞–Ω–Ω—ã—Ö (20 –±–∞–ª–ª–æ–≤)
    if (metrics.dataQuality === 'high') {
      score += 20;
      strengths.push('–í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
    } else if (metrics.dataQuality === 'medium') {
      score += 12;
    } else {
      score += 4;
      weaknesses.push('–ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
      recommendations.push('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ—á–Ω–æ—Å—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–∏—è');
    }
    
    // –û—Ü–µ–Ω–∫–∞ –ø–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—é –¥–∞–Ω–Ω—ã—Ö (15 –±–∞–ª–ª–æ–≤)
    let dataTypesExtracted = 0;
    if (metrics.fuelDataExtracted > 0) dataTypesExtracted++;
    if (metrics.electricityDataExtracted) dataTypesExtracted++;
    if (metrics.thermalDataExtracted) dataTypesExtracted++;
    if (metrics.transportDataExtracted) dataTypesExtracted++;
    if (metrics.fgasDataExtracted > 0) dataTypesExtracted++;
    if (metrics.industrialProcessesExtracted > 0) dataTypesExtracted++;
    
    const dataTypeScore = (dataTypesExtracted / 6) * 15;
    score += dataTypeScore;
    
    if (dataTypesExtracted >= 4) {
      strengths.push('–ò–∑–≤–ª–µ—á–µ–Ω—ã —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö');
    } else if (dataTypesExtracted >= 2) {
      strengths.push('–ò–∑–≤–ª–µ—á–µ–Ω—ã –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö');
    } else {
      weaknesses.push('–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
      recommendations.push('–†–∞—Å—à–∏—Ä–∏—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö');
    }
    
    // –û—Ü–µ–Ω–∫–∞ –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (10 –±–∞–ª–ª–æ–≤)
    if (metrics.processingTimeMs < 2000) {
      score += 10;
      strengths.push('–ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞');
    } else if (metrics.processingTimeMs < 5000) {
      score += 7;
    } else if (metrics.processingTimeMs < 10000) {
      score += 4;
    } else {
      score += 1;
      weaknesses.push('–ú–µ–¥–ª–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞');
      recommendations.push('–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏');
    }
    
    // –®—Ç—Ä–∞—Ñ—ã –∑–∞ –æ—à–∏–±–∫–∏ –∏ fallback
    if (metrics.errors.length > 0) {
      score -= metrics.errors.length * 2;
      weaknesses.push(`–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏: ${metrics.errors.length}`);
      recommendations.push('–£—Å—Ç—Ä–∞–Ω–∏—Ç—å –æ—à–∏–±–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏');
    }
    
    if (metrics.fallbackAttempts > 0) {
      score -= metrics.fallbackAttempts;
      weaknesses.push('–ü–æ—Ç—Ä–µ–±–æ–≤–∞–ª–∏—Å—å –ø–æ–ø—ã—Ç–∫–∏ fallback');
      recommendations.push('–£–ª—É—á—à–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏');
    }
    
    const overallScore = Math.max(0, Math.min(maxScore, score));
    
    return {
      overallScore,
      recommendations,
      strengths,
      weaknesses
    };
  }
  
  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
   */
  calculateAggregatedMetrics(periodDays: number = 7): AggregatedMetrics {
    const now = new Date();
    const periodStart = new Date(now.getTime() - periodDays * 24 * 60 * 60 * 1000);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –º–µ—Ç—Ä–∏–∫–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
    const periodMetrics = this.loadMetricsForPeriod(periodStart, now);
    
    if (periodMetrics.length === 0) {
      return this.getEmptyAggregatedMetrics(periodStart, now);
    }
    
    const totalDocuments = periodMetrics.length;
    const successfulExtractions = periodMetrics.filter(m => m.extractionSuccess).length;
    const failedExtractions = totalDocuments - successfulExtractions;
    
    // –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    const avgProcessingTime = periodMetrics.reduce((sum, m) => sum + m.processingTimeMs, 0) / totalDocuments;
    const avgConfidence = periodMetrics.reduce((sum, m) => sum + m.confidence, 0) / totalDocuments;
    const avgFieldsExtracted = periodMetrics.reduce((sum, m) => sum + m.fieldsExtracted, 0) / totalDocuments;
    const avgFieldsExpected = periodMetrics.reduce((sum, m) => sum + m.fieldsExpected, 0) / totalDocuments;
    
    // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    const methodsUsed: Record<string, number> = {};
    const parsersUsed: Record<string, number> = {};
    const dataQualityDistribution: Record<string, number> = { high: 0, medium: 0, low: 0 };
    
    periodMetrics.forEach(m => {
      methodsUsed[m.processingMethod] = (methodsUsed[m.processingMethod] || 0) + 1;
      parsersUsed[m.parserUsed] = (parsersUsed[m.parserUsed] || 0) + 1;
      dataQualityDistribution[m.dataQuality]++;
    });
    
    // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
    const fuelExtractionRate = periodMetrics.filter(m => m.fuelDataExtracted > 0).length / totalDocuments;
    const electricityExtractionRate = periodMetrics.filter(m => m.electricityDataExtracted).length / totalDocuments;
    const thermalExtractionRate = periodMetrics.filter(m => m.thermalDataExtracted).length / totalDocuments;
    const transportExtractionRate = periodMetrics.filter(m => m.transportDataExtracted).length / totalDocuments;
    
    // –ú–µ—Ç—Ä–∏–∫–∏ –≤—ã–±—Ä–æ—Å–æ–≤
    const avgTotalCO2 = periodMetrics.reduce((sum, m) => sum + m.totalCO2Calculated, 0) / totalDocuments;
    const avgBaseEmissions = periodMetrics.reduce((sum, m) => sum + m.baseEmissions, 0) / totalDocuments;
    const documentsWithFgas = periodMetrics.filter(m => m.fgasDataExtracted > 0).length;
    const documentsWithIndustrialProcesses = periodMetrics.filter(m => m.industrialProcessesExtracted > 0).length;
    
    // –°–∏–Ω–æ–Ω–∏–º—ã
    const avgSynonymsApplied = periodMetrics.reduce((sum, m) => sum + m.synonymsApplied, 0) / totalDocuments;
    const avgFieldsNormalized = periodMetrics.reduce((sum, m) => sum + m.fieldsNormalized, 0) / totalDocuments;
    
    return {
      totalDocuments,
      successfulExtractions,
      failedExtractions,
      avgProcessingTime,
      avgConfidence,
      methodsUsed,
      parsersUsed,
      dataQualityDistribution,
      avgFieldsExtracted,
      avgFieldsExpected,
      extractionSuccessRate: successfulExtractions / totalDocuments,
      fuelExtractionRate,
      electricityExtractionRate,
      thermalExtractionRate,
      transportExtractionRate,
      avgTotalCO2,
      avgBaseEmissions,
      documentsWithFgas,
      documentsWithIndustrialProcesses,
      avgSynonymsApplied,
      avgFieldsNormalized,
      periodStart: periodStart.toISOString(),
      periodEnd: now.toISOString()
    };
  }
  
  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
   */
  private loadMetricsForPeriod(start: Date, end: Date): ProcessingMetrics[] {
    const metrics: ProcessingMetrics[] = [];
    
    try {
      const files = fs.readdirSync(this.metricsDir);
      const metricsFiles = files.filter(f => f.startsWith('metrics_') && f.endsWith('.json'));
      
      for (const file of metricsFiles) {
        try {
          const filePath = path.join(this.metricsDir, file);
          const content = fs.readFileSync(filePath, 'utf8');
          const metric: ProcessingMetrics = JSON.parse(content);
          
          const metricDate = new Date(metric.timestamp);
          if (metricDate >= start && metricDate <= end) {
            metrics.push(metric);
          }
        } catch (error) {
          console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞ ${file}:`, error);
        }
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –º–µ—Ç—Ä–∏–∫:', error);
    }
    
    return metrics;
  }
  
  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç—ã–µ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
   */
  private getEmptyAggregatedMetrics(start: Date, end: Date): AggregatedMetrics {
    return {
      totalDocuments: 0,
      successfulExtractions: 0,
      failedExtractions: 0,
      avgProcessingTime: 0,
      avgConfidence: 0,
      methodsUsed: {},
      parsersUsed: {},
      dataQualityDistribution: { high: 0, medium: 0, low: 0 },
      avgFieldsExtracted: 0,
      avgFieldsExpected: 0,
      extractionSuccessRate: 0,
      fuelExtractionRate: 0,
      electricityExtractionRate: 0,
      thermalExtractionRate: 0,
      transportExtractionRate: 0,
      avgTotalCO2: 0,
      avgBaseEmissions: 0,
      documentsWithFgas: 0,
      documentsWithIndustrialProcesses: 0,
      avgSynonymsApplied: 0,
      avgFieldsNormalized: 0,
      periodStart: start.toISOString(),
      periodEnd: end.toISOString()
    };
  }
  
  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ —Ñ–∞–π–ª
   */
  saveAggregatedMetrics(metrics: AggregatedMetrics, filename?: string): void {
    const defaultFilename = `aggregated_metrics_${new Date().toISOString().slice(0, 10)}.json`;
    const actualFilename = filename || defaultFilename;
    const filePath = path.join(this.metricsDir, actualFilename);
    
    try {
      fs.writeFileSync(filePath, JSON.stringify(metrics, null, 2), 'utf8');
      console.log(`üìä –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: ${filePath}`);
    } catch (error) {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:', error);
    }
  }
  
  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ –∫–∞—á–µ—Å—Ç–≤–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
   */
  generateQualityReport(periodDays: number = 7): string {
    const aggregated = this.calculateAggregatedMetrics(periodDays);
    
    let report = `
# –û—Ç—á–µ—Ç –æ –∫–∞—á–µ—Å—Ç–≤–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö

**–ü–µ—Ä–∏–æ–¥:** ${new Date(aggregated.periodStart).toLocaleDateString()} - ${new Date(aggregated.periodEnd).toLocaleDateString()}

## –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
- **–í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:** ${aggregated.totalDocuments}
- **–£—Å–ø–µ—à–Ω—ã—Ö –∏–∑–≤–ª–µ—á–µ–Ω–∏–π:** ${aggregated.successfulExtractions}
- **–ù–µ—É–¥–∞—á–Ω—ã—Ö –∏–∑–≤–ª–µ—á–µ–Ω–∏–π:** ${aggregated.failedExtractions}
- **–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É—Å–ø–µ—Ö–∞:** ${(aggregated.extractionSuccessRate * 100).toFixed(1)}%

## –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
- **–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:** ${aggregated.avgProcessingTime.toFixed(0)}–º—Å
- **–°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:** ${(aggregated.avgConfidence * 100).toFixed(1)}%
- **–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ–π:** ${aggregated.avgFieldsExtracted.toFixed(1)} –∏–∑ ${aggregated.avgFieldsExpected.toFixed(1)}

## –ú–µ—Ç–æ–¥—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏
`;

    for (const [method, count] of Object.entries(aggregated.methodsUsed)) {
      const percentage = (count / aggregated.totalDocuments * 100).toFixed(1);
      report += `- **${method}:** ${count} (${percentage}%)\n`;
    }

    report += `
## –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
- **–í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ:** ${aggregated.dataQualityDistribution.high} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
- **–°—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ:** ${aggregated.dataQualityDistribution.medium} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤  
- **–ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ:** ${aggregated.dataQualityDistribution.low} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤

## –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º –¥–∞–Ω–Ω—ã—Ö
- **–¢–æ–ø–ª–∏–≤–æ:** ${(aggregated.fuelExtractionRate * 100).toFixed(1)}%
- **–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è:** ${(aggregated.electricityExtractionRate * 100).toFixed(1)}%
- **–¢–µ–ø–ª–æ–≤–∞—è —ç–Ω–µ—Ä–≥–∏—è:** ${(aggregated.thermalExtractionRate * 100).toFixed(1)}%
- **–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç:** ${(aggregated.transportExtractionRate * 100).toFixed(1)}%

## –í—ã–±—Ä–æ—Å—ã
- **–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ CO2:** ${aggregated.avgTotalCO2.toFixed(2)} –∫–≥
- **–î–æ–∫—É–º–µ–Ω—Ç—ã —Å F-–≥–∞–∑–∞–º–∏:** ${aggregated.documentsWithFgas}
- **–î–æ–∫—É–º–µ–Ω—Ç—ã —Å –ø—Ä–æ–º–ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏:** ${aggregated.documentsWithIndustrialProcesses}

## –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
- **–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–Ω–æ–Ω–∏–º–æ–≤:** ${aggregated.avgSynonymsApplied.toFixed(1)}
- **–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª–µ–π:** ${aggregated.avgFieldsNormalized.toFixed(1)}
`;

    return report;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç singleton instance
export const metricsCollector = new ExtractionMetricsCollector();