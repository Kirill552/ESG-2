import https from 'https';
import FormData from 'form-data';
import { getTokenManager } from './yandex-iam-token-manager';

interface YandexVisionResponse {
  results: Array<{
    results: Array<{
      textDetection: {
        pages: Array<{
          width?: number;
          height?: number;
          blocks: Array<{
            boundingBox: {
              vertices: Array<{
                x: string;
                y: string;
              }>;
            };
            lines: Array<{
              boundingBox: {
                vertices: Array<{
                  x: string;
                  y: string;
                }>;
              };
              words: Array<{
                boundingBox: {
                  vertices: Array<{
                    x: string;
                    y: string;
                  }>;
                };
                text: string;
                confidence: number;
                languages?: Array<{
                  languageCode: string;
                  confidence: number;
                }>;
              }>;
              confidence?: number;
            }>;
          }>;
        }>;
      };
    }>;
  }>;
}

interface OcrResult {
  text: string;
  confidence: number;
  words: Array<{
    text: string;
    confidence: number;
    bbox?: { x: number; y: number; width: number; height: number };
  }>;
}

class YandexVisionService {
  private tokenManager = getTokenManager();
  private folderId: string;

  constructor() {
    // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    this.folderId = process.env.YANDEX_FOLDER_ID || process.env.YC_FOLDER_ID || '';
    
    if (!this.folderId) {
      throw new Error('YANDEX_FOLDER_ID or YC_FOLDER_ID environment variable is required');
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π IAM —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä —Ç–æ–∫–µ–Ω–æ–≤
   */
  private async getIamToken(): Promise<string> {
    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Ç–æ–∫–µ–Ω–æ–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      const status = this.tokenManager.getTokenStatus();
      if (!status.hasToken) {
        await this.tokenManager.initialize();
      }
      
      return await this.tokenManager.getToken();
    } catch (error) {
      throw new Error(`Failed to get IAM token: ${error instanceof Error ? error.message : String(error)}`);
    }
  }

  /**
   * –†–∞—Å–ø–æ–∑–Ω–∞–µ—Ç —Ç–µ–∫—Å—Ç –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å –ø–æ–º–æ—â—å—é Yandex Vision API
   */
  async recognizeText(imageBuffer: Buffer, mimeType: string = 'image/jpeg'): Promise<OcrResult> {
    try {
      const iamToken = await this.getIamToken();
      const base64Image = imageBuffer.toString('base64');

      const requestBody = {
        folderId: this.folderId,
        analyze_specs: [{
          content: base64Image,
          features: [{
            type: 'TEXT_DETECTION',
            text_detection_config: {
              language_codes: ['ru', 'en']
            }
          }],
          mime_type: mimeType
        }]
      };

      const postData = JSON.stringify(requestBody);

      const options = {
        hostname: 'vision.api.cloud.yandex.net',
        port: 443,
        path: '/vision/v1/batchAnalyze',
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Content-Length': Buffer.byteLength(postData),
          'Authorization': `Bearer ${iamToken}`
        }
      };

      return new Promise((resolve, reject) => {
        const req = https.request(options, (res) => {
          let data = '';

          res.on('data', (chunk) => {
            data += chunk;
          });

          res.on('end', () => {
            try {
              const response: YandexVisionResponse = JSON.parse(data);
              const result = this.parseVisionResponse(response);
              resolve(result);
            } catch (error) {
              reject(new Error(`Failed to parse Yandex Vision response: ${error instanceof Error ? error.message : String(error)}`));
            }
          });
        });

        req.on('error', (error) => {
          reject(new Error(`Yandex Vision API request failed: ${error.message}`));
        });

        req.write(postData);
        req.end();
      });

    } catch (error) {
      throw new Error(`Yandex Vision OCR failed: ${error instanceof Error ? error.message : String(error)}`);
    }
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç –æ—Ç Yandex Vision API
   */
  private parseVisionResponse(response: YandexVisionResponse): OcrResult {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º textDetection –∏–∑ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
    const textDetection = response.results?.[0]?.results?.[0]?.textDetection;
    
    if (!textDetection || !textDetection.pages || textDetection.pages.length === 0) {
      return {
        text: '',
        confidence: 0,
        words: []
      };
    }

    const words: Array<{
      text: string;
      confidence: number;
      bbox?: { x: number; y: number; width: number; height: number };
    }> = [];

    let totalConfidence = 0;
    let wordCount = 0;
    let fullText = '';

    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ª–æ–≤–∞ –∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü -> –±–ª–æ–∫–æ–≤ -> —Å—Ç—Ä–æ–∫ -> —Å–ª–æ–≤
    textDetection.pages.forEach(page => {
      page.blocks?.forEach(block => {
        block.lines?.forEach(line => {
          line.words?.forEach(word => {
            if (word.text && word.confidence !== undefined) {
              // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
              if (fullText.length > 0) {
                fullText += ' ';
              }
              fullText += word.text;

              // –í—ã—á–∏—Å–ª—è–µ–º bounding box (–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–µ–ø–µ—Ä—å —Å—Ç—Ä–æ–∫–∏, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∏—Å–ª–∞)
              let bbox;
              if (word.boundingBox?.vertices?.length >= 4) {
                const vertices = word.boundingBox.vertices;
                const minX = Math.min(...vertices.map(v => parseInt(v.x, 10)));
                const maxX = Math.max(...vertices.map(v => parseInt(v.x, 10)));
                const minY = Math.min(...vertices.map(v => parseInt(v.y, 10)));
                const maxY = Math.max(...vertices.map(v => parseInt(v.y, 10)));
                
                bbox = {
                  x: minX,
                  y: minY,
                  width: maxX - minX,
                  height: maxY - minY
                };
              }

              words.push({
                text: word.text,
                confidence: word.confidence,
                bbox
              });

              totalConfidence += word.confidence;
              wordCount++;
            }
          });
          
          // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –º–µ–∂–¥—É —Å—Ç—Ä–æ–∫–∞–º–∏
          if (fullText.length > 0) {
            fullText += '\n';
          }
        });
      });
    });

    const averageConfidence = wordCount > 0 ? totalConfidence / wordCount : 0;

    return {
      text: fullText.trim(),
      confidence: averageConfidence,
      words
    };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å Yandex Vision API
   */
  async healthCheck(): Promise<boolean> {
    try {
      const iamToken = await this.getIamToken();
      
      // –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (1x1 –ø–∏–∫—Å–µ–ª—å PNG)
      const testImage = Buffer.from([
        0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52,
        0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x08, 0x02, 0x00, 0x00, 0x00, 0x90, 0x77, 0x53,
        0xDE, 0x00, 0x00, 0x00, 0x0C, 0x49, 0x44, 0x41, 0x54, 0x08, 0xD7, 0x63, 0xF8, 0x0F, 0x00, 0x00,
        0x01, 0x00, 0x01, 0x5C, 0xC2, 0x8A, 0x6B, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE,
        0x42, 0x60, 0x82
      ]);

      await this.recognizeText(testImage, 'image/png');
      return true;
    } catch (error) {
      console.error('Yandex Vision health check failed:', error instanceof Error ? error.message : String(error));
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Ç–æ–∫–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä–∞
   */
  getTokenManagerStatus() {
    return this.tokenManager.getTokenStatus();
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω
   */
  async refreshToken() {
    return await this.tokenManager.getToken(true);
  }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
let yandexVisionInstance: YandexVisionService | null = null;

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä Yandex Vision —Å–µ—Ä–≤–∏—Å–∞ (—Å–∏–Ω–≥–ª—Ç–æ–Ω)
 */
function getYandexVisionService(): YandexVisionService {
  if (!yandexVisionInstance) {
    yandexVisionInstance = new YandexVisionService();
  }
  return yandexVisionInstance;
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ Yandex Vision OCR
 * –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π OCR
 */
export async function processImageWithYandex(buffer: Buffer): Promise<OcrResult> {
  try {
    const service = getYandexVisionService();

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME —Ç–∏–ø –ø–æ —Å–∏–≥–Ω–∞—Ç—É—Ä–µ —Ñ–∞–π–ª–∞
    let mimeType = 'image/jpeg';
    if (buffer.length > 8) {
      const header = buffer.toString('hex', 0, 8);
      if (header.startsWith('25504446')) {
        // PDF signature: %PDF
        mimeType = 'application/pdf';
      } else if (header.startsWith('89504e47')) {
        // PNG signature
        mimeType = 'image/png';
      } else if (header.startsWith('47494638')) {
        // GIF signature
        mimeType = 'image/gif';
      } else if (header.startsWith('424d')) {
        // BMP signature
        mimeType = 'image/bmp';
      }
    }

    console.log(`üìÑ [Yandex Vision] Detected MIME type: ${mimeType}`);

    return await service.recognizeText(buffer, mimeType);
  } catch (error: any) {
    throw new Error(`YANDEX_VISION_OCR_FAILED: ${error.message}`);
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Yandex Vision API
 */
export async function checkYandexVisionHealth(): Promise<boolean> {
  try {
    const service = getYandexVisionService();
    return await service.healthCheck();
  } catch (error) {
    console.error('Yandex Vision health check failed:', error);
    return false;
  }
}

export { YandexVisionService, type OcrResult };