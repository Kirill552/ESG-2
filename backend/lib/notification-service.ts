import { prisma } from './prisma';
import { sendEmailWithRetry } from './email-service-with-retry';
import { emailTemplates } from './email-templates';

/**
 * –¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ
 */
export enum NotificationType {
  // –î–æ–∫—É–º–µ–Ω—Ç—ã
  DOCUMENT_UPLOADED = 'document_uploaded',
  DOCUMENT_PROCESSED = 'document_processed',
  DOCUMENT_ERROR = 'document_error',
  DOCUMENT_DATA_EDITED = 'document_data_edited',

  // –û—Ç—á–µ—Ç—ã
  REPORT_READY = 'report_ready',
  REPORT_ERROR = 'report_error',
  REPORT_SUBMITTED = 'report_submitted',
  REPORT_APPROVED = 'report_approved',

  // –î–µ–¥–ª–∞–π–Ω—ã
  DEADLINE_30_DAYS = 'deadline_30_days',
  DEADLINE_7_DAYS = 'deadline_7_days',
  DEADLINE_1_DAY = 'deadline_1_day',
  DEADLINE_OVERDUE = 'deadline_overdue',

  // –°–∏—Å—Ç–µ–º–∞
  SYSTEM_ALERT = 'system_alert',
  SYSTEM_ERROR = 'system_error',
  USER_FEEDBACK = 'user_feedback',
  ACCOUNT_UPDATE = 'account_update'
}

/**
 * –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 */
export enum NotificationPriority {
  LOW = 'low',
  MEDIUM = 'medium',
  HIGH = 'high',
  URGENT = 'urgent'
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 */
interface CreateNotificationInput {
  userId: string;
  type: NotificationType | string;
  title: string;
  message: string;
  metadata?: {
    documentId?: string;
    reportId?: string;
    link?: string;
    priority?: NotificationPriority;
    [key: string]: any;
  };
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏
 */
interface SendOptions {
  email?: boolean;
  push?: boolean;
  ignorePreferences?: boolean; // –î–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
}

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
 */
class NotificationService {
  /**
   * –°–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ë–î
   */
  async createNotification(input: CreateNotificationInput) {
    try {
      const notification = await prisma.notification.create({
        data: {
          userId: input.userId,
          type: input.type,
          title: input.title,
          message: input.message,
          metadata: input.metadata || {},
          read: false
        }
      });

      console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: ${notification.id} (—Ç–∏–ø: ${input.type})`);
      return notification;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
      throw error;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
   */
  async sendNotification(
    input: CreateNotificationInput,
    options: SendOptions = {}
  ) {
    try {
      // 1. –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ë–î
      const notification = await this.createNotification(input);

      // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const shouldSend = options.ignorePreferences
        ? true
        : await this.shouldSendNotification(input.userId, input.type);

      if (!shouldSend) {
        console.log(`‚è≠Ô∏è  –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${input.type}`);
        return notification;
      }

      // 3. –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const preferences = await this.getUserPreferences(input.userId);

      // 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Email –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
      if ((options.email !== false && preferences?.emailEnabled) || options.ignorePreferences) {
        await this.sendEmailNotification(input);
      }

      // 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Push –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
      if ((options.push !== false && preferences?.pushEnabled) || options.ignorePreferences) {
        await this.sendPushNotification(input);
      }

      return notification;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
      throw error;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   */
  async shouldSendNotification(userId: string, type: string): Promise<boolean> {
    try {
      const preferences = await this.getUserPreferences(userId);

      if (!preferences) {
        // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ (–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º)
        return true;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      if (type.startsWith('document_')) {
        return preferences.documentsEnabled;
      }

      if (type.startsWith('report_')) {
        return preferences.reportsEnabled;
      }

      if (type.startsWith('deadline_')) {
        return preferences.deadlinesEnabled;
      }

      // –°–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–≥–¥–∞
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–±–µ–∑–æ–ø–∞—Å–Ω—ã–π fallback)
      return true;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getUserPreferences(userId: string) {
    try {
      const preferences = await prisma.notificationPreferences.findUnique({
        where: { userId }
      });

      return preferences;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
      return null;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
   */
  async sendEmailNotification(input: CreateNotificationInput) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await prisma.user.findUnique({
        where: { id: input.userId },
        select: { email: true, name: true }
      });

      if (!user?.email) {
        console.warn('‚ö†Ô∏è  Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É');
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏—Ö–∏–µ —á–∞—Å—ã
      const inQuietHours = await this.isInQuietHours(input.userId);
      if (inQuietHours) {
        console.log(`üîá –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–æ (—Ç–∏—Ö–∏–µ —á–∞—Å—ã): ${input.type}`);
        // TODO: –î–æ–±–∞–≤–∏—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å–ª–µ —Ç–∏—Ö–∏—Ö —á–∞—Å–æ–≤
        return;
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º email —à–∞–±–ª–æ–Ω —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π email-templates
      const emailTemplate = emailTemplates.createTemplate({
        title: input.title,
        message: input.message,
        type: input.type as any,
        priority: input.metadata?.priority || NotificationPriority.MEDIUM,
        metadata: input.metadata,
        actionUrl: input.metadata?.link,
        actionText: input.metadata?.actionText
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —á–µ—Ä–µ–∑ RuSender —Å retry –ª–æ–≥–∏–∫–æ–π
      const result = await sendEmailWithRetry({
        to: user.email,
        subject: emailTemplate.subject,
        html: emailTemplate.html,
        text: emailTemplate.text
      }, {
        maxRetries: 3,
        initialDelay: 1000,
        maxDelay: 30000,
        backoffFactor: 2
      });

      if (result.success) {
        console.log(`üìß Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${user.email} (—Ç–∏–ø: ${input.type}, –ø–æ–ø—ã—Ç–æ–∫: ${result.attempts})`);
      } else {
        console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å email –ø–æ—Å–ª–µ ${result.attempts} –ø–æ–ø—ã—Ç–æ–∫:`, result.error);
        // –î–ª—è –Ω–µ-retryable –æ—à–∏–±–æ–∫ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤
        if (!result.retryable) {
          console.error(`‚ö†Ô∏è –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è ${user.email}: ${result.error}`);
        }
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ –∫–∞–Ω–∞–ª—ã —Ä–∞–±–æ—Ç–∞–ª–∏
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
   */
  async sendPushNotification(input: CreateNotificationInput) {
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å Web Push –≤ –±—É–¥—É—â–µ–º (–∑–∞–¥–∞—á–∞ 7.17-7.20)
    console.log(`üîî Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–ø–æ–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ): ${input.title}`);
    return;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Ç–∏—Ö–∏—Ö —á–∞—Å–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async isInQuietHours(userId: string): Promise<boolean> {
    try {
      const preferences = await this.getUserPreferences(userId);

      if (!preferences?.quietHoursStart || !preferences?.quietHoursEnd) {
        return false;
      }

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const now = new Date();
      const userTimezone = preferences.timezone || 'Europe/Moscow';

      const formatter = new Intl.DateTimeFormat('en-US', {
        timeZone: userTimezone,
        hour: 'numeric',
        hour12: false
      });

      const currentHour = parseInt(formatter.format(now));

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π —á–∞—Å –≤ —Ç–∏—Ö–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
      const start = preferences.quietHoursStart;
      const end = preferences.quietHoursEnd;

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è –∫–æ–≥–¥–∞ –¥–∏–∞–ø–∞–∑–æ–Ω –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 22:00 - 08:00)
      if (start > end) {
        return currentHour >= start || currentHour < end;
      } else {
        return currentHour >= start && currentHour < end;
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏—Ö–∏—Ö —á–∞—Å–æ–≤:', error);
      return false;
    }
  }

  /**
   * –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å HTML —à–∞–±–ª–æ–Ω email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  generateEmailTemplate(
    input: CreateNotificationInput,
    userName: string,
    link: string
  ): string {
    const priority = input.metadata?.priority || NotificationPriority.MEDIUM;
    const priorityColor = this.getPriorityColor(priority);

    return `
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>${input.title}</title>
</head>
<body style="margin: 0; padding: 0; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif; background-color: #f5f5f5;">
  <table width="100%" cellpadding="0" cellspacing="0" style="background-color: #f5f5f5; padding: 20px 0;">
    <tr>
      <td align="center">
        <table width="600" cellpadding="0" cellspacing="0" style="background-color: #ffffff; border-radius: 8px; overflow: hidden; box-shadow: 0 2px 8px rgba(0,0,0,0.1);">

          <!-- Header -->
          <tr>
            <td style="background: linear-gradient(135deg, #1dc962 0%, #19b558 100%); padding: 30px 40px; text-align: center;">
              <h1 style="margin: 0; color: #ffffff; font-size: 24px; font-weight: 600;">
                üåø ESG-–õ–∞–π—Ç
              </h1>
            </td>
          </tr>

          <!-- Priority Badge -->
          ${priority !== NotificationPriority.LOW ? `
          <tr>
            <td style="padding: 20px 40px 0;">
              <div style="display: inline-block; background-color: ${priorityColor}; color: #ffffff; padding: 4px 12px; border-radius: 12px; font-size: 12px; font-weight: 600; text-transform: uppercase;">
                ${this.getPriorityLabel(priority)}
              </div>
            </td>
          </tr>
          ` : ''}

          <!-- Content -->
          <tr>
            <td style="padding: 20px 40px;">
              <p style="margin: 0 0 10px; color: #666; font-size: 14px;">
                –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${userName}!
              </p>
              <h2 style="margin: 0 0 15px; color: #1a1a1a; font-size: 20px; font-weight: 600;">
                ${input.title}
              </h2>
              <p style="margin: 0; color: #444; font-size: 16px; line-height: 1.6;">
                ${input.message}
              </p>
            </td>
          </tr>

          <!-- Action Button -->
          <tr>
            <td style="padding: 20px 40px 30px;">
              <table width="100%" cellpadding="0" cellspacing="0">
                <tr>
                  <td align="center">
                    <a href="${process.env.NEXT_PUBLIC_APP_URL || 'https://esg-lite.ru'}${link}"
                       style="display: inline-block; background-color: #1dc962; color: #ffffff; text-decoration: none; padding: 12px 32px; border-radius: 6px; font-size: 16px; font-weight: 600;">
                      –ü–µ—Ä–µ–π—Ç–∏ –∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é
                    </a>
                  </td>
                </tr>
              </table>
            </td>
          </tr>

          <!-- Footer -->
          <tr>
            <td style="background-color: #f8f9fa; padding: 20px 40px; border-top: 1px solid #e9ecef;">
              <p style="margin: 0 0 10px; color: #666; font-size: 13px; line-height: 1.5;">
                –≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã <strong>ESG-–õ–∞–π—Ç</strong>.
              </p>
              <p style="margin: 0; color: #999; font-size: 12px;">
                –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤
                <a href="${process.env.NEXT_PUBLIC_APP_URL || 'https://esg-lite.ru'}/settings?tab=notifications"
                   style="color: #1dc962; text-decoration: none;">
                  –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ
                </a>.
              </p>
            </td>
          </tr>

        </table>
      </td>
    </tr>
  </table>
</body>
</html>
    `.trim();
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
   */
  getPriorityColor(priority: NotificationPriority): string {
    switch (priority) {
      case NotificationPriority.URGENT:
        return '#dc2626'; // red-600
      case NotificationPriority.HIGH:
        return '#ea580c'; // orange-600
      case NotificationPriority.MEDIUM:
        return '#2563eb'; // blue-600
      case NotificationPriority.LOW:
        return '#64748b'; // slate-500
      default:
        return '#2563eb';
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—É—é –º–µ—Ç–∫—É –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
   */
  getPriorityLabel(priority: NotificationPriority): string {
    switch (priority) {
      case NotificationPriority.URGENT:
        return '–°—Ä–æ—á–Ω–æ';
      case NotificationPriority.HIGH:
        return '–í–∞–∂–Ω–æ';
      case NotificationPriority.MEDIUM:
        return '–°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç';
      case NotificationPriority.LOW:
        return '–ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç';
      default:
        return '';
    }
  }

  /**
   * –û—Ç–º–µ—Ç–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
   */
  async markAsRead(notificationId: string, userId: string) {
    try {
      const notification = await prisma.notification.updateMany({
        where: {
          id: notificationId,
          userId: userId // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        },
        data: {
          read: true,
          updatedAt: new Date()
        }
      });

      console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ${notificationId} –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ`);
      return notification;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ:', error);
      throw error;
    }
  }

  /**
   * –û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
   */
  async markAllAsRead(userId: string) {
    try {
      const result = await prisma.notification.updateMany({
        where: {
          userId: userId,
          read: false
        },
        data: {
          read: true,
          updatedAt: new Date()
        }
      });

      console.log(`‚úÖ –û—Ç–º–µ—á–µ–Ω–æ ${result.count} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ`);
      return result;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π –æ—Ç–º–µ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
      throw error;
    }
  }

  /**
   * –£–¥–∞–ª–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
   */
  async deleteNotification(notificationId: string, userId: string) {
    try {
      const notification = await prisma.notification.deleteMany({
        where: {
          id: notificationId,
          userId: userId // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        }
      });

      console.log(`üóëÔ∏è  –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ${notificationId} —É–¥–∞–ª–µ–Ω–æ`);
      return notification;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  async getUnreadCount(userId: string): Promise<number> {
    try {
      const count = await prisma.notification.count({
        where: {
          userId: userId,
          read: false
        }
      });

      return count;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
      return 0;
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton instance
export const notificationService = new NotificationService();