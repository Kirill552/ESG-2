/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å StarLine Maps API
 * –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://maps.starline.ru/documentation/
 *
 * –§—É–Ω–∫—Ü–∏–∏:
 * - Geocoding: –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
 * - Routing: —Ä–∞—Å—á—ë—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –≥–æ—Ä–æ–¥–∞–º–∏ –ø–æ –∞–≤—Ç–æ–¥–æ—Ä–æ–≥–∞–º
 */

import 'dotenv/config';

export interface Coordinates {
  lat: number;
  lon: number;
}

export interface GeocodeResult {
  coordinates: Coordinates;
  city: string;
  confidence: number;
}

export interface RoutingResult {
  distance: number; // –∫–º
  duration: number; // —Å–µ–∫—É–Ω–¥—ã
  confidence: number;
}

export class StarLineMapsService {
  private baseUrl: string;
  private apiKey: string;

  constructor(apiKey?: string) {
    this.baseUrl = 'https://maps.starline.ru/api';
    this.apiKey = apiKey || process.env.STARLINE_API_KEY || '';

    if (!this.apiKey) {
      console.warn('‚ö†Ô∏è STARLINE_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! StarLine Maps API –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.');
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞ —á–µ—Ä–µ–∑ Geocoder API
   */
  async geocodeCity(cityName: string): Promise<GeocodeResult | null> {
    if (!this.apiKey) {
      console.error('‚ùå StarLine API key –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      return null;
    }

    try {
      console.log(`üó∫Ô∏è StarLine Geocoder: –ø–æ–∏—Å–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è "${cityName}"...`);

      // –î–æ–±–∞–≤–ª—è–µ–º object_type=city –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–ª—å–∫–æ –≥–æ—Ä–æ–¥–æ–≤
      const url = `${this.baseUrl}/geocoder/v2/forward?query=${encodeURIComponent(cityName)}&object_type=city&limit=1`;

      const response = await fetch(url, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${this.apiKey}`
        }
      });

      if (!response.ok) {
        console.error(`‚ùå StarLine Geocoder –æ—à–∏–±–∫–∞: ${response.status} ${response.statusText}`);
        return null;
      }

      const data = await response.json();

      // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      console.log('üìã StarLine Geocoder response:', JSON.stringify(data).substring(0, 200));

      // StarLine –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å:
      // 1. GeoJSON: {type: "FeatureCollection", features: [...]}
      // 2. JSON array: [{...}]
      let features = [];

      if (data?.features && Array.isArray(data.features)) {
        // GeoJSON —Ñ–æ—Ä–º–∞—Ç
        features = data.features;
      } else if (Array.isArray(data)) {
        // JSON array —Ñ–æ—Ä–º–∞—Ç
        features = data;
      }

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      if (features.length > 0) {
        const feature = features[0];

        // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å –≤ geometry.coordinates (GeoJSON) –∏–ª–∏ –≤ properties (JSON)
        let coordinates: Coordinates;

        if (feature.geometry?.coordinates && feature.geometry.coordinates.length >= 2) {
          // GeoJSON —Ñ–æ—Ä–º–∞—Ç: geometry.coordinates = [lon, lat]
          coordinates = {
            lon: feature.geometry.coordinates[0],
            lat: feature.geometry.coordinates[1]
          };
        } else if (feature.lat && feature.lon) {
          // JSON —Ñ–æ—Ä–º–∞—Ç: –ø—Ä—è–º—ã–µ –ø–æ–ª—è lat, lon
          coordinates = {
            lat: feature.lat,
            lon: feature.lon
          };
        } else {
          console.error('‚ùå StarLine Geocoder: –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
          console.error('   Feature structure:', Object.keys(feature));
          return null;
        }

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º display_name –∏–∑ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–∏–ª–∏ –ø—Ä—è–º—ã–µ –ø–æ–ª—è –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ)
        const resultCity = feature.display_name ||
                          feature.properties?.display_name ||
                          feature.properties?.name ||
                          feature.address?.name ||
                          feature.properties?.address?.city ||
                          cityName;

        console.log(`‚úÖ StarLine Geocoder: –Ω–∞–π–¥–µ–Ω "${resultCity}" (lat: ${coordinates.lat.toFixed(4)}, lon: ${coordinates.lon.toFixed(4)})`);

        return {
          coordinates,
          city: resultCity,
          confidence: 0.9 // StarLine Maps - –Ω–∞–¥—ë–∂–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è –†–§
        };
      }

      console.warn(`‚ö†Ô∏è StarLine Geocoder: –≥–æ—Ä–æ–¥ "${cityName}" –Ω–µ –Ω–∞–π–¥–µ–Ω (features: ${features.length})`);
      return null;

    } catch (error) {
      console.error('‚ùå StarLine Geocoder –æ—à–∏–±–∫–∞:', error);
      return null;
    }
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–≤—É–º—è –≥–æ—Ä–æ–¥–∞–º–∏
   */
  async calculateRoute(
    fromCity: string,
    toCity: string,
    transportType: 'auto' | 'truck' | 'bicycle' | 'pedestrian' = 'auto'
  ): Promise<RoutingResult | null> {
    if (!this.apiKey) {
      console.error('‚ùå StarLine API key –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      return null;
    }

    try {
      console.log(`üó∫Ô∏è StarLine Routing: —Ä–∞—Å—á—ë—Ç –º–∞—Ä—à—Ä—É—Ç–∞ ${fromCity} ‚Üí ${toCity} (${transportType})...`);

      // –®–∞–≥ 1: –ü–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±–æ–∏—Ö –≥–æ—Ä–æ–¥–æ–≤
      const [fromCoords, toCoords] = await Promise.all([
        this.geocodeCity(fromCity),
        this.geocodeCity(toCity)
      ]);

      if (!fromCoords || !toCoords) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–æ–≤');
        return null;
      }

      // –®–∞–≥ 2: –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç
      const url = `${this.baseUrl}/routing/route`;

      const requestBody = {
        locations: [
          {
            lat: fromCoords.coordinates.lat,
            lon: fromCoords.coordinates.lon,
            type: 'break'
          },
          {
            lat: toCoords.coordinates.lat,
            lon: toCoords.coordinates.lon,
            type: 'break'
          }
        ],
        costing: transportType
      };

      console.log('üìã StarLine Routing request:', JSON.stringify(requestBody, null, 2));

      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.apiKey}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(requestBody)
      });

      if (!response.ok) {
        console.error(`‚ùå StarLine Routing –æ—à–∏–±–∫–∞: ${response.status} ${response.statusText}`);
        return null;
      }

      const data = await response.json();

      // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      console.log('üìã StarLine Routing response:', JSON.stringify(data).substring(0, 300));

      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –∏ –≤—Ä–µ–º—è —Å–æ–≥–ª–∞—Å–Ω–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ StarLine
      // –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: { code: "Ok", uuid: "...", routes: [{distance: meters, duration: seconds, ...}] }
      if (data?.routes && Array.isArray(data.routes) && data.routes.length > 0) {
        const route = data.routes[0]; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π (–æ—Å–Ω–æ–≤–Ω–æ–π) –º–∞—Ä—à—Ä—É—Ç

        // distance –≤ –º–µ—Ç—Ä–∞—Ö, duration –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        const distanceMeters = route.distance || 0;
        const durationSeconds = route.duration || 0;

        if (distanceMeters > 0) {
          // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–µ—Ç—Ä—ã –≤ –∫–∏–ª–æ–º–µ—Ç—Ä—ã
          const distanceKm = distanceMeters / 1000;
          console.log(`‚úÖ StarLine Routing: ${distanceKm.toFixed(1)} –∫–º, ${(durationSeconds / 3600).toFixed(1)} —á`);

          return {
            distance: distanceKm,
            duration: durationSeconds,
            confidence: 0.95 // StarLine Maps - —Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –†–§
          };
        }
      }

      console.warn('‚ö†Ô∏è StarLine Routing: –º–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç');
      console.warn('   Response structure:', Object.keys(data || {}));
      if (data?.routes) {
        console.warn('   First route keys:', Object.keys(data.routes[0] || {}));
      }
      return null;

    } catch (error) {
      console.error('‚ùå StarLine Routing –æ—à–∏–±–∫–∞:', error);
      return null;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
   */
  async checkHealth(): Promise<boolean> {
    if (!this.apiKey) {
      return false;
    }

    try {
      // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
      const testCity = '–ú–æ—Å–∫–≤–∞';
      const result = await this.geocodeCity(testCity);
      return result !== null;
    } catch {
      return false;
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Å–∏–Ω–≥–ª—Ç–æ–Ω–∞
export const starLineMapsService = new StarLineMapsService();
