/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è pg-boss –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥—è–º–∏ OCR
 */

import PgBoss from 'pg-boss';

export const QUEUE_NAMES = {
  OCR: 'ocr-processing',
  REPORT_GENERATION: 'report-generation',
  EMAIL: 'email-sending',
  CLEANUP: 'file-cleanup',
} as const;

// pg-boss v11 —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
export interface OcrJobData {
  documentId: string;
  userId: string;
  fileKey: string;
  fileName: string;
  mimeType: string;
  fileSize: number;
  category?: string;
  userMode?: 'DEMO' | 'TRIAL' | 'PAID' | 'EXPIRED';
}

export interface OcrJobResult {
  success: boolean;
  text?: string;
  confidence?: number;
  provider?: string;
  extractedData?: any;
  error?: string;
  processingTime?: number;
}

export interface ReportJobData {
  reportId: string;
  userId: string;
  reportType: string;
  data: any;
}

export interface EmailJobData {
  to: string;
  subject: string;
  html: string;
  text?: string;
}

// Singleton –¥–ª—è pg-boss
let bossInstance: PgBoss | null = null;

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä pg-boss (singleton)
 */
export async function getBoss(): Promise<PgBoss> {
  if (bossInstance) {
    console.log('‚ôªÔ∏è  –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä pg-boss');
    return bossInstance;
  }

  const connectionString = process.env.DATABASE_URL;

  if (!connectionString) {
    throw new Error('DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  }

  console.log('üîß –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä pg-boss...');
  console.log('üì° DATABASE_URL:', connectionString.replace(/:[^:@]+@/, ':****@')); // –°–∫—Ä—ã–≤–∞–µ–º –ø–∞—Ä–æ–ª—å

  bossInstance = new PgBoss({
    connectionString,

    // pg-boss v11: —è–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Å—Ö–µ–º—É
    schema: 'pgboss',

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
    max: 10, // –º–∞–∫—Å–∏–º—É–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –≤ –ø—É–ª–µ

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–¥–∞—á (v11 –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–µ–∫—É–Ω–¥—ã –≤–º–µ—Å—Ç–æ —á–∞—Å–æ–≤)
    retryLimit: 3,
    retryDelay: 60,
    expireInSeconds: 3600, // 1 —á–∞—Å (–≤ v11 –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–∫—É–Ω–¥—ã!)
    retentionDays: 7,
    deleteAfterDays: 30,

    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
    monitorStateIntervalSeconds: 60,
    maintenanceIntervalSeconds: 300,

    // –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ
    archiveCompletedAfterSeconds: 3600,

    // SSL –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    ssl: connectionString.includes('sslmode=require') ? {
      rejectUnauthorized: false
    } : false
  });

  console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º pg-boss –∏ —Å–æ–∑–¥–∞–µ–º —Å—Ö–µ–º—É...');

  try {
    await bossInstance.start();
    console.log('‚úÖ pg-boss –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É (—Ç–µ—Å—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ v11)
    console.log('üß™ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –æ—á–µ—Ä–µ–¥–∏ (pg-boss v11)...');

    // v11 —Ç—Ä–µ–±—É–µ—Ç —è–≤–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∑–∞–¥–∞—á
    await bossInstance.createQueue('test-queue');

    const testJobId = await bossInstance.send('test-queue', { test: 'data' }, {
      retryLimit: 0,
      expireInSeconds: 60 // v11 –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–µ–∫—É–Ω–¥—ã!
    });

    if (testJobId) {
      console.log(`‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ: ${testJobId}`);
      // –°—Ä–∞–∑—É —É–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É
      await bossInstance.cancel(testJobId).catch(() => {});
    } else {
      console.error('‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: boss.send() –≤–µ—Ä–Ω—É–ª null!');
      console.error('‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
      console.error('   1. –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ö–µ–º—ã pgboss');
      console.error('   2. –°—Ö–µ–º–∞ pgboss —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π');
      console.error('   3. –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –ë–î');
    }
  } catch (startError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ pg-boss:', startError);
    throw startError;
  }

  return bossInstance;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä pg-boss (deprecated, –∏—Å–ø–æ–ª—å–∑—É–π getBoss)
 * @deprecated –ò—Å–ø–æ–ª—å–∑—É–π getBoss() –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ
 */
export async function createPgBoss(): Promise<PgBoss> {
  return getBoss();
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É OCR –≤ –æ—á–µ—Ä–µ–¥—å
 */
export async function enqueueOcrJob(boss: PgBoss, data: OcrJobData): Promise<string> {
  const jobId = await boss.send(QUEUE_NAMES.OCR, data, {
    retryLimit: 3,
    retryDelay: 30, // 30 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
    expireInMinutes: 30, // –∑–∞–¥–∞—á–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç
  });

  console.log(`üì§ OCR –∑–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å: ${jobId}`, {
    documentId: data.documentId,
    fileName: data.fileName,
  });

  return jobId as string;
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞ –≤ –æ—á–µ—Ä–µ–¥—å
 */
export async function enqueueReportJob(boss: PgBoss, data: ReportJobData): Promise<string> {
  const jobId = await boss.send(QUEUE_NAMES.REPORT_GENERATION, data, {
    retryLimit: 2,
    retryDelay: 60,
    expireInMinutes: 60,
  });

  console.log(`üì§ –ó–∞–¥–∞—á–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: ${jobId}`, {
    reportId: data.reportId,
  });

  return jobId as string;
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É –æ—Ç–ø—Ä–∞–≤–∫–∏ email –≤ –æ—á–µ—Ä–µ–¥—å
 */
export async function enqueueEmailJob(boss: PgBoss, data: EmailJobData): Promise<string> {
  const jobId = await boss.send(QUEUE_NAMES.EMAIL, data, {
    retryLimit: 5,
    retryDelay: 120, // 2 –º–∏–Ω—É—Ç—ã –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
    expireInHours: 6,
  });

  console.log(`üì§ Email –∑–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: ${jobId}`, { to: data.to });

  return jobId as string;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–µ–π
 */
export async function getQueueStats(boss: PgBoss) {
  const queues = Object.values(QUEUE_NAMES);
  const stats: Record<string, any> = {};

  for (const queueName of queues) {
    try {
      // pg-boss v10 API
      const queueSize = await boss.getQueueSize(queueName);
      stats[queueName] = {
        size: queueSize,
        active: queueSize, // –í v10 –Ω–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –¥–ª—è active
      };
    } catch (error) {
      stats[queueName] = { error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É' };
    }
  }

  return stats;
}
