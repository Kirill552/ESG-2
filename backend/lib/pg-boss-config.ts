/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è pg-boss –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥—è–º–∏ OCR
 */

import PgBoss from 'pg-boss';

export const QUEUE_NAMES = {
  OCR: 'ocr-processing',
  REPORT_GENERATION: 'report-generation',
  EMAIL: 'email-sending',
  CLEANUP: 'file-cleanup',
} as const;

export interface OcrJobData {
  documentId: string;
  userId: string;
  fileKey: string;
  fileName: string;
  mimeType: string;
  fileSize: number;
  category?: string;
  userMode?: 'DEMO' | 'TRIAL' | 'PAID' | 'EXPIRED';
}

export interface OcrJobResult {
  success: boolean;
  text?: string;
  confidence?: number;
  provider?: string;
  extractedData?: any;
  error?: string;
  processingTime?: number;
}

export interface ReportJobData {
  reportId: string;
  userId: string;
  reportType: string;
  data: any;
}

export interface EmailJobData {
  to: string;
  subject: string;
  html: string;
  text?: string;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä pg-boss
 */
export async function createPgBoss(): Promise<PgBoss> {
  const connectionString = process.env.DATABASE_URL;

  if (!connectionString) {
    throw new Error('DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  }

  const boss = new PgBoss({
    connectionString,
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è production
    max: 10, // –º–∞–∫—Å–∏–º—É–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –≤ –ø—É–ª–µ
    retryLimit: 3, // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    retryDelay: 60, // –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    expireInHours: 1, // –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∑–∞–¥–∞—á–∏ (–º–∞–∫—Å 24 —á–∞—Å–∞, —Å—Ç–∞–≤–∏–º 1)
    retentionDays: 7, // —Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ 7 –¥–Ω–µ–π
    deleteAfterDays: 30, // –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 30 –¥–Ω–µ–π

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    monitorStateIntervalSeconds: 60,
    maintenanceIntervalSeconds: 300, // 5 –º–∏–Ω—É—Ç

    // SSL –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Ç—É–Ω–Ω–µ–ª—å
    ssl: connectionString.includes('sslmode=require') ? {
      rejectUnauthorized: false
    } : false
  });

  await boss.start();
  console.log('‚úÖ pg-boss –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω');

  return boss;
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É OCR –≤ –æ—á–µ—Ä–µ–¥—å
 */
export async function enqueueOcrJob(boss: PgBoss, data: OcrJobData): Promise<string> {
  const jobId = await boss.send(QUEUE_NAMES.OCR, data, {
    retryLimit: 3,
    retryDelay: 30, // 30 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
    expireInMinutes: 30, // –∑–∞–¥–∞—á–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç
  });

  console.log(`üì§ OCR –∑–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å: ${jobId}`, {
    documentId: data.documentId,
    fileName: data.fileName,
  });

  return jobId as string;
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞ –≤ –æ—á–µ—Ä–µ–¥—å
 */
export async function enqueueReportJob(boss: PgBoss, data: ReportJobData): Promise<string> {
  const jobId = await boss.send(QUEUE_NAMES.REPORT_GENERATION, data, {
    retryLimit: 2,
    retryDelay: 60,
    expireInMinutes: 60,
  });

  console.log(`üì§ –ó–∞–¥–∞—á–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: ${jobId}`, {
    reportId: data.reportId,
  });

  return jobId as string;
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É –æ—Ç–ø—Ä–∞–≤–∫–∏ email –≤ –æ—á–µ—Ä–µ–¥—å
 */
export async function enqueueEmailJob(boss: PgBoss, data: EmailJobData): Promise<string> {
  const jobId = await boss.send(QUEUE_NAMES.EMAIL, data, {
    retryLimit: 5,
    retryDelay: 120, // 2 –º–∏–Ω—É—Ç—ã –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
    expireInHours: 6,
  });

  console.log(`üì§ Email –∑–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: ${jobId}`, { to: data.to });

  return jobId as string;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–µ–π
 */
export async function getQueueStats(boss: PgBoss) {
  const queues = Object.values(QUEUE_NAMES);
  const stats: Record<string, any> = {};

  for (const queueName of queues) {
    try {
      // pg-boss v10 API
      const queueSize = await boss.getQueueSize(queueName);
      stats[queueName] = {
        size: queueSize,
        active: queueSize, // –í v10 –Ω–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –¥–ª—è active
      };
    } catch (error) {
      stats[queueName] = { error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É' };
    }
  }

  return stats;
}
