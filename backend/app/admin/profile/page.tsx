'use client';

/**
 * –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ—Ñ–∏–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Passkey, —Å–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è, –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
 */

import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import AdminPageWrapper from '../components/AdminPageWrapper';

interface Admin {
  id: string;
  email: string;
  role: string;
  isActive: boolean;
  createdAt: string;
  telegramBotToken: string | null;
  telegramEnabled: boolean;
  notifyTrialRequests: boolean;
  notifyUserErrors: boolean;
  notifySystemErrors: boolean;
  notifyPayments: boolean;
  notifySecurityIssues: boolean;
  _count: {
    webAuthnCredentials: number;
    recoveryCodes: number;
    sessions: number;
  };
}

interface Passkey {
  id: string;
  credentialId: string;
  transports: string[];
  createdAt: string;
}

export default function AdminProfilePage() {
  const router = useRouter();
  const [admin, setAdmin] = useState<Admin | null>(null);
  const [loading, setLoading] = useState(true);
  const [passkeySetupModal, setPasskeySetupModal] = useState(false);
  const [recoveryCodes, setRecoveryCodes] = useState<string[]>([]);
  const [showRecoveryCodes, setShowRecoveryCodes] = useState(false);
  const [passkeys, setPasskeys] = useState<Passkey[]>([]);
  const [removingPasskeyId, setRemovingPasskeyId] = useState<string | null>(null);

  // Telegram settings state
  const [telegramBotToken, setTelegramBotToken] = useState('');
  const [telegramEnabled, setTelegramEnabled] = useState(false);
  const [notifyTrialRequests, setNotifyTrialRequests] = useState(true);
  const [notifyUserErrors, setNotifyUserErrors] = useState(true);
  const [notifySystemErrors, setNotifySystemErrors] = useState(true);
  const [notifyPayments, setNotifyPayments] = useState(false);
  const [notifySecurityIssues, setNotifySecurityIssues] = useState(true);
  const [savingTelegram, setSavingTelegram] = useState(false);

  useEffect(() => {
    loadAdminProfile();
    loadPasskeys();
  }, []);

  const loadAdminProfile = async () => {
    try {
      setLoading(true);
      const response = await fetch('/api/admin/profile');

      if (response.status === 401) {
        router.push('/admin/login');
        return;
      }

      if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è');

      const data = await response.json();
      setAdmin(data.admin);

      // Populate Telegram settings
      setTelegramBotToken(data.admin.telegramBotToken || '');
      setTelegramEnabled(data.admin.telegramEnabled || false);
      setNotifyTrialRequests(data.admin.notifyTrialRequests ?? true);
      setNotifyUserErrors(data.admin.notifyUserErrors ?? true);
      setNotifySystemErrors(data.admin.notifySystemErrors ?? true);
      setNotifyPayments(data.admin.notifyPayments ?? false);
      setNotifySecurityIssues(data.admin.notifySecurityIssues ?? true);
    } catch (error) {
      console.error('Error loading profile:', error);
    } finally {
      setLoading(false);
    }
  };

  const loadPasskeys = async () => {
    try {
      const response = await fetch('/api/admin/auth/passkey/list');
      if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ Passkey');

      const data = await response.json();
      setPasskeys(data.passkeys || []);
    } catch (error) {
      console.error('Error loading passkeys:', error);
    }
  };

  const handleSaveTelegramSettings = async () => {
    try {
      setSavingTelegram(true);

      const response = await fetch('/api/admin/profile/telegram', {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          telegramBotToken: telegramBotToken || null,
          telegramEnabled,
          notifyTrialRequests,
          notifyUserErrors,
          notifySystemErrors,
          notifyPayments,
          notifySecurityIssues,
        }),
      });

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.error || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫');
      }

      const data = await response.json();

      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∞
      setAdmin(data.admin);

      alert('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!');
    } catch (error: any) {
      console.error('Telegram settings save error:', error);
      alert(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    } finally {
      setSavingTelegram(false);
    }
  };

  const handleSetupPasskey = async () => {
    try {
      // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç @simplewebauthn/browser
      const { startRegistration } = await import('@simplewebauthn/browser');

      // –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é Passkey
      const optionsRes = await fetch('/api/admin/auth/passkey/register-start', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
      });

      if (!optionsRes.ok) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é Passkey');

      const { options } = await optionsRes.json();

      // –í—ã–∑—ã–≤–∞–µ–º WebAuthn API –±—Ä–∞—É–∑–µ—Ä–∞ —á–µ—Ä–µ–∑ @simplewebauthn/browser
      // –≠—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç base64url —Å—Ç—Ä–æ–∫–∏ –≤ ArrayBuffer
      const credential = await startRegistration(options);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º credential –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
      const verifyRes = await fetch('/api/admin/auth/passkey/register-finish', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(credential),
      });

      if (!verifyRes.ok) throw new Error('–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ Passkey');

      const result = await verifyRes.json();

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º recovery –∫–æ–¥—ã
      setRecoveryCodes(result.recoveryCodes);
      setShowRecoveryCodes(true);
      setPasskeySetupModal(false);

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∏ —Å–ø–∏—Å–æ–∫ Passkey
      await loadAdminProfile();
      await loadPasskeys();

      alert('‚úÖ Passkey —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ backup –∫–æ–¥—ã.');
    } catch (error: any) {
      console.error('Passkey setup error:', error);
      alert(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
  };

  const handleRemovePasskey = async (passkeyId: string) => {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç Passkey? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
      return;
    }

    try {
      setRemovingPasskeyId(passkeyId);

      const response = await fetch('/api/admin/auth/passkey/remove', {
        method: 'DELETE',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ passkeyId }),
      });

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.error || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è Passkey');
      }

      alert('‚úÖ Passkey —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∏ —Å–ø–∏—Å–æ–∫ Passkey
      await loadAdminProfile();
      await loadPasskeys();
    } catch (error: any) {
      console.error('Passkey remove error:', error);
      alert(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    } finally {
      setRemovingPasskeyId(null);
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-950 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-emerald-500 mx-auto mb-4"></div>
          <p className="text-gray-400">–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è...</p>
        </div>
      </div>
    );
  }

  return (
    <AdminPageWrapper
      title="–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"
      breadcrumbs={[{ label: '–î–∞—à–±–æ—Ä–¥', href: '/admin/dashboard' }, { label: '–ü—Ä–æ—Ñ–∏–ª—å' }]}
    >
      <div className="space-y-6">
        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ */}
        <div className="bg-gray-900/50 rounded-lg border border-gray-800 p-6">
          <h2 className="text-lg font-bold text-white mb-4">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h2>
          <div className="space-y-3">
            <div>
              <p className="text-sm text-gray-400">Email</p>
              <p className="text-white font-medium">{admin?.email}</p>
            </div>
            <div>
              <p className="text-sm text-gray-400">–†–æ–ª—å</p>
              <span className="px-2 py-1 text-xs rounded-md border bg-red-500/10 text-red-400 border-red-500/20">
                {admin?.role}
              </span>
            </div>
            <div>
              <p className="text-sm text-gray-400">–°–æ–∑–¥–∞–Ω</p>
              <p className="text-white">{admin?.createdAt ? new Date(admin.createdAt).toLocaleString('ru-RU') : '‚Äî'}</p>
            </div>
          </div>
        </div>

        {/* Passkey –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
        <div className="bg-gray-900/50 rounded-lg border border-gray-800 p-6">
          <h2 className="text-lg font-bold text-white mb-4">üîê Passkey (WebAuthn)</h2>
          <p className="text-sm text-gray-400 mb-4">
            Passkey –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—Ö–æ–¥–∏—Ç—å —Å –ø–æ–º–æ—â—å—é –±–∏–æ–º–µ—Ç—Ä–∏–∏ (–æ—Ç–ø–µ—á–∞—Ç–æ–∫ –ø–∞–ª—å—Ü–∞, Face ID) –∏–ª–∏ –∞–ø–ø–∞—Ä–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞.
            –≠—Ç–æ –±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ —á–µ–º –ø–∞—Ä–æ–ª—å.
          </p>

          <div className="flex items-center justify-between mb-4">
            <div>
              <p className="text-sm text-gray-400">–ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö Passkey</p>
              <p className="text-2xl font-bold text-white">{admin?._count.webAuthnCredentials || 0}</p>
            </div>
            <button
              onClick={() => setPasskeySetupModal(true)}
              className="px-4 py-2 bg-emerald-600 hover:bg-emerald-700 text-white rounded-lg transition-colors"
            >
              {admin?._count.webAuthnCredentials ? '+ –î–æ–±–∞–≤–∏—Ç—å Passkey' : '‚ö° –ù–∞—Å—Ç—Ä–æ–∏—Ç—å Passkey'}
            </button>
          </div>

          {/* –°–ø–∏—Å–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö Passkey */}
          {passkeys.length > 0 && (
            <div className="space-y-2 mb-4">
              {passkeys.map((passkey) => (
                <div
                  key={passkey.id}
                  className="bg-gray-800/50 border border-gray-700 rounded-lg p-4 flex items-center justify-between"
                >
                  <div className="flex-1">
                    <div className="flex items-center gap-2 mb-1">
                      <span className="text-sm font-medium text-white">
                        üîë Passkey {passkey.credentialId.substring(0, 8)}...
                      </span>
                      {passkey.transports.length > 0 && (
                        <span className="text-xs px-2 py-0.5 bg-blue-500/10 text-blue-400 border border-blue-500/20 rounded">
                          {passkey.transports.join(', ')}
                        </span>
                      )}
                    </div>
                    <div className="text-xs text-gray-500">
                      –°–æ–∑–¥–∞–Ω: {new Date(passkey.createdAt).toLocaleString('ru-RU')}
                    </div>
                  </div>
                  <button
                    onClick={() => handleRemovePasskey(passkey.id)}
                    disabled={removingPasskeyId === passkey.id}
                    className="ml-4 px-3 py-1.5 text-sm bg-red-600/10 hover:bg-red-600/20 text-red-400 border border-red-600/20 rounded-lg transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    {removingPasskeyId === passkey.id ? '–£–¥–∞–ª–µ–Ω–∏–µ...' : '–£–¥–∞–ª–∏—Ç—å'}
                  </button>
                </div>
              ))}
            </div>
          )}

          {admin?._count.webAuthnCredentials === 0 && (
            <div className="bg-yellow-500/10 border border-yellow-500/20 rounded-lg p-4">
              <p className="text-sm text-yellow-400">
                ‚ö†Ô∏è <strong>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å Passkey</strong> –¥–ª—è –±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –±–µ–∑ –ø–∞—Ä–æ–ª—è.
              </p>
            </div>
          )}
        </div>

        {/* Backup –∫–æ–¥—ã */}
        <div className="bg-gray-900/50 rounded-lg border border-gray-800 p-6">
          <h2 className="text-lg font-bold text-white mb-4">üîë Backup –∫–æ–¥—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è</h2>
          <p className="text-sm text-gray-400 mb-4">
            –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ –∫–æ–¥—ã –¥–ª—è –≤—Ö–æ–¥–∞, –µ—Å–ª–∏ –ø–æ—Ç–µ—Ä—è–µ—Ç–µ –¥–æ—Å—Ç—É–ø –∫ Passkey —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É.
          </p>
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-400">–î–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–¥–æ–≤</p>
              <p className="text-2xl font-bold text-white">{admin?._count.recoveryCodes || 0}</p>
            </div>
          </div>
        </div>

        {/* –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ */}
        <div className="bg-gray-900/50 rounded-lg border border-gray-800 p-6">
          <h2 className="text-lg font-bold text-white mb-4">üì± –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏</h2>
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-400">–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π</p>
              <p className="text-2xl font-bold text-white">{admin?._count.sessions || 0}</p>
            </div>
          </div>
        </div>

        {/* Telegram Bot –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
        <div className="bg-gray-900/50 rounded-lg border border-gray-800 p-6">
          <div className="flex items-start justify-between mb-4">
            <div>
              <h2 className="text-lg font-bold text-white mb-2">üì≤ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram</h2>
              <p className="text-sm text-gray-400">
                –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö –≤ —Å–∏—Å—Ç–µ–º–µ
              </p>
            </div>
            {telegramEnabled && (
              <span className="px-2 py-1 text-xs rounded-md border bg-emerald-500/10 text-emerald-400 border-emerald-500/20">
                –ê–∫—Ç–∏–≤–Ω–æ
              </span>
            )}
          </div>

          <div className="space-y-4">
            {/* Bot Token Input */}
            <div>
              <label className="block text-sm font-medium text-gray-300 mb-2">
                –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
              </label>
              <div className="flex gap-2">
                <input
                  type={telegramBotToken && !telegramBotToken.startsWith('***') ? 'text' : 'password'}
                  value={telegramBotToken}
                  onChange={(e) => setTelegramBotToken(e.target.value)}
                  placeholder="1234567890:ABCdefGHIjklMNOpqrsTUVwxyz"
                  className="flex-1 px-3 py-2 bg-gray-800 border border-gray-700 rounded-lg text-white placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-emerald-500"
                />
              </div>
              <p className="text-xs text-gray-500 mt-1">
                –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω —É <a href="https://t.me/BotFather" target="_blank" rel="noopener noreferrer" className="text-emerald-400 hover:underline">@BotFather</a> –≤ Telegram
              </p>
            </div>

            {/* Enable Toggle */}
            <div className="flex items-center justify-between p-3 bg-gray-800/50 rounded-lg">
              <div>
                <p className="text-sm font-medium text-white">–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</p>
                <p className="text-xs text-gray-500">–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram</p>
              </div>
              <label className="relative inline-flex items-center cursor-pointer">
                <input
                  type="checkbox"
                  checked={telegramEnabled}
                  onChange={(e) => setTelegramEnabled(e.target.checked)}
                  className="sr-only peer"
                />
                <div className="w-11 h-6 bg-gray-700 peer-focus:outline-none peer-focus:ring-2 peer-focus:ring-emerald-500 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-emerald-600"></div>
              </label>
            </div>

            {/* Notification Preferences */}
            <div className="border-t border-gray-800 pt-4">
              <p className="text-sm font-medium text-white mb-3">–¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</p>
              <div className="space-y-2">
                <label className="flex items-center gap-3 p-2 hover:bg-gray-800/50 rounded-lg cursor-pointer">
                  <input
                    type="checkbox"
                    checked={notifyTrialRequests}
                    onChange={(e) => setNotifyTrialRequests(e.target.checked)}
                    className="w-4 h-4 text-emerald-600 bg-gray-700 border-gray-600 rounded focus:ring-emerald-500 focus:ring-offset-gray-900"
                  />
                  <div>
                    <p className="text-sm text-white">–ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –¥–æ—Å—Ç—É–ø</p>
                    <p className="text-xs text-gray-500">–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤—ã—Ö trial requests</p>
                  </div>
                </label>

                <label className="flex items-center gap-3 p-2 hover:bg-gray-800/50 rounded-lg cursor-pointer">
                  <input
                    type="checkbox"
                    checked={notifyUserErrors}
                    onChange={(e) => setNotifyUserErrors(e.target.checked)}
                    className="w-4 h-4 text-emerald-600 bg-gray-700 border-gray-600 rounded focus:ring-emerald-500 focus:ring-offset-gray-900"
                  />
                  <div>
                    <p className="text-sm text-white">–û—à–∏–±–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</p>
                    <p className="text-xs text-gray-500">–ü—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, OCR –∏ —Ç.–¥.</p>
                  </div>
                </label>

                <label className="flex items-center gap-3 p-2 hover:bg-gray-800/50 rounded-lg cursor-pointer">
                  <input
                    type="checkbox"
                    checked={notifySystemErrors}
                    onChange={(e) => setNotifySystemErrors(e.target.checked)}
                    className="w-4 h-4 text-emerald-600 bg-gray-700 border-gray-600 rounded focus:ring-emerald-500 focus:ring-offset-gray-900"
                  />
                  <div>
                    <p className="text-sm text-white">–°–∏—Å—Ç–µ–º–Ω—ã–µ –æ—à–∏–±–∫–∏</p>
                    <p className="text-xs text-gray-500">–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–±–æ–∏ –≤ —Ä–∞–±–æ—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã</p>
                  </div>
                </label>

                <label className="flex items-center gap-3 p-2 hover:bg-gray-800/50 rounded-lg cursor-pointer">
                  <input
                    type="checkbox"
                    checked={notifyPayments}
                    onChange={(e) => setNotifyPayments(e.target.checked)}
                    className="w-4 h-4 text-emerald-600 bg-gray-700 border-gray-600 rounded focus:ring-emerald-500 focus:ring-offset-gray-900"
                  />
                  <div>
                    <p className="text-sm text-white">–ü–ª–∞—Ç–µ–∂–∏</p>
                    <p className="text-xs text-gray-500">–£—Å–ø–µ—à–Ω—ã–µ –∏ –Ω–µ—É–¥–∞—á–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏</p>
                  </div>
                </label>

                <label className="flex items-center gap-3 p-2 hover:bg-gray-800/50 rounded-lg cursor-pointer">
                  <input
                    type="checkbox"
                    checked={notifySecurityIssues}
                    onChange={(e) => setNotifySecurityIssues(e.target.checked)}
                    className="w-4 h-4 text-emerald-600 bg-gray-700 border-gray-600 rounded focus:ring-emerald-500 focus:ring-offset-gray-900"
                  />
                  <div>
                    <p className="text-sm text-white">–ü—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</p>
                    <p className="text-xs text-gray-500">–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏</p>
                  </div>
                </label>
              </div>
            </div>

            {/* Save Button */}
            <button
              onClick={handleSaveTelegramSettings}
              disabled={savingTelegram}
              className="w-full px-4 py-2.5 bg-emerald-600 hover:bg-emerald-700 disabled:bg-gray-700 disabled:cursor-not-allowed text-white rounded-lg transition-colors font-medium"
            >
              {savingTelegram ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram'}
            </button>
          </div>
        </div>
      </div>

      {/* –ú–æ–¥–∞–ª–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Passkey */}
      {passkeySetupModal && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
          <div className="bg-gray-900 rounded-xl border border-gray-800 p-6 max-w-md w-full mx-4">
            <h3 className="text-xl font-bold text-white mb-4">–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Passkey</h3>
            <p className="text-sm text-gray-400 mb-6">
              –°–µ–π—á–∞—Å –±—Ä–∞—É–∑–µ—Ä –ø–æ–ø—Ä–æ—Å–∏—Ç –≤–∞—Å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–≤–æ—é –ª–∏—á–Ω–æ—Å—Ç—å —Å –ø–æ–º–æ—â—å—é –±–∏–æ–º–µ—Ç—Ä–∏–∏ (–æ—Ç–ø–µ—á–∞—Ç–æ–∫ –ø–∞–ª—å—Ü–∞, Face ID)
              –∏–ª–∏ –∞–ø–ø–∞—Ä–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.
            </p>

            <div className="bg-blue-500/10 border border-blue-500/20 rounded-lg p-4 mb-6">
              <p className="text-sm text-blue-400">
                üí° –ü–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ <strong>backup –∫–æ–¥—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è</strong>.
                –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∏—Ö –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ!
              </p>
            </div>

            <div className="flex gap-3">
              <button
                onClick={handleSetupPasskey}
                className="flex-1 px-4 py-2 bg-emerald-600 hover:bg-emerald-700 text-white rounded-lg"
              >
                –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å
              </button>
              <button
                onClick={() => setPasskeySetupModal(false)}
                className="flex-1 px-4 py-2 bg-gray-700 hover:bg-gray-600 text-white rounded-lg"
              >
                –û—Ç–º–µ–Ω–∞
              </button>
            </div>
          </div>
        </div>
      )}

      {/* –ú–æ–¥–∞–ª–∫–∞ —Å recovery –∫–æ–¥–∞–º–∏ */}
      {showRecoveryCodes && recoveryCodes.length > 0 && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
          <div className="bg-gray-900 rounded-xl border border-gray-800 p-6 max-w-md w-full mx-4">
            <h3 className="text-xl font-bold text-white mb-4">üîë –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ backup –∫–æ–¥—ã!</h3>
            <p className="text-sm text-gray-400 mb-4">
              –≠—Ç–∏ –∫–æ–¥—ã –ø–æ–∑–≤–æ–ª—è—Ç –≤–∞–º –≤–æ–π—Ç–∏, –µ—Å–ª–∏ –≤—ã –ø–æ—Ç–µ—Ä—è–µ—Ç–µ –¥–æ—Å—Ç—É–ø –∫ Passkey —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É.
              <strong className="text-yellow-400"> –û–Ω–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑!</strong>
            </p>

            <div className="bg-gray-800 rounded-lg p-4 mb-4 font-mono text-sm space-y-1">
              {recoveryCodes.map((code, i) => (
                <div key={i} className="text-emerald-400">
                  {code}
                </div>
              ))}
            </div>

            <div className="bg-red-500/10 border border-red-500/20 rounded-lg p-3 mb-4">
              <p className="text-xs text-red-400">
                ‚ö†Ô∏è –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–∏ –∫–æ–¥—ã –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ (–º–µ–Ω–µ–¥–∂–µ—Ä –ø–∞—Ä–æ–ª–µ–π, –±—É–º–∞–∂–Ω—ã–π –Ω–æ—Å–∏—Ç–µ–ª—å).
                –ü–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è —ç—Ç–æ–≥–æ –æ–∫–Ω–∞ –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Ö —Å–Ω–æ–≤–∞.
              </p>
            </div>

            <button
              onClick={() => {
                setShowRecoveryCodes(false);
                setRecoveryCodes([]);
              }}
              className="w-full px-4 py-2 bg-emerald-600 hover:bg-emerald-700 text-white rounded-lg"
            >
              –Ø —Å–æ—Ö—Ä–∞–Ω–∏–ª –∫–æ–¥—ã
            </button>
          </div>
        </div>
      )}
    </AdminPageWrapper>
  );
}
