import { NextRequest, NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/lib/auth-options';
import prisma from '@/lib/prisma';
import { getUserDataByMode } from '@/lib/user-mode-utils';
import { ensureOrganizationComplete } from '@/lib/check-organization-completeness';

export async function GET(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);

    if (!session?.user?.email) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const searchParams = request.nextUrl.searchParams;
    const status = searchParams.get('status');
    const page = parseInt(searchParams.get('page') || '1');
    const pageSize = parseInt(searchParams.get('pageSize') || '10');
    const search = searchParams.get('search');

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —É—á–µ—Ç–æ–º —Ä–µ–∂–∏–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (demo/paid)
    const reports = await getUserDataByMode('reports', async () => {
      // –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è PAID —Ä–µ–∂–∏–º–∞
      const user = await prisma.user.findUnique({
        where: { email: session.user!.email! },
        select: { id: true }
      });

      if (!user) {
        throw new Error('User not found');
      }

      const where: any = {
        userId: user.id
      };

      if (status && status !== 'all') {
        // –¢–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è MVP
        const allowedStatuses = ['DRAFT', 'READY'];
        const upperStatus = status.toUpperCase();
        if (allowedStatuses.includes(upperStatus)) {
          where.status = upperStatus;
        }
      }

      if (search) {
        where.name = {
          contains: search,
          mode: 'insensitive'
        };
      }

      const skip = (page - 1) * pageSize;

      const [reports, total] = await Promise.all([
        prisma.report.findMany({
          where,
          orderBy: { createdAt: 'desc' },
          skip,
          take: pageSize,
          select: {
            id: true,
            name: true,
            reportType: true,
            status: true,
            period: true,
            submissionDeadline: true,
            totalEmissions: true,
            documentCount: true,
            createdAt: true,
            updatedAt: true
          }
        }),
        prisma.report.count({ where })
      ]);

      return {
        reports: reports.map(report => ({
          id: report.id,
          name: report.name,
          type: report.reportType === 'REPORT_296FZ' ? '296-–§–ó –ì–æ–¥–æ–≤–æ–π' : report.reportType,
          period: report.period,
          status: report.status.toLowerCase(),
          createdDate: report.createdAt.toLocaleDateString('ru-RU'),
          submissionDeadline: report.submissionDeadline?.toLocaleDateString('ru-RU') || '',
          totalEmissions: report.totalEmissions || 0,
          documentCount: report.documentCount
        })),
        pagination: {
          page,
          pageSize,
          total,
          totalPages: Math.ceil(total / pageSize),
          hasNext: page < Math.ceil(total / pageSize),
          hasPrev: page > 1
        }
      };
    });

    return NextResponse.json(reports);

  } catch (error) {
    console.error('Error fetching reports:', error);
    return NextResponse.json({ error: 'Failed to fetch reports' }, { status: 500 });
  }
}

export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);

    if (!session?.user?.email) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const body = await request.json();
    const { name, reportType, period, description } = body;

    // –í –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
    const isDemo = await getUserDataByMode('reports', async () => false);
    if (isDemo !== false) {
      return NextResponse.json(
        { error: 'Creating reports is not available in demo mode' },
        { status: 403 }
      );
    }

    const user = await prisma.user.findUnique({
      where: { email: session.user!.email! },
      select: {
        id: true,
        organization: {
          select: {
            id: true,
            canGenerate296FZ: true,
            reportsPerMonth: true,
            isBlocked: true
          }
        }
      }
    });

    if (!user) {
      return NextResponse.json({ error: 'User not found' }, { status: 404 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤
    if (user.organization) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
      if (user.organization.isBlocked) {
        return NextResponse.json(
          { error: '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.' },
          { status: 403 }
        );
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –¥–æ—Å—Ç—É–ø–∞ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤ 296-–§–ó
      if (!user.organization.canGenerate296FZ) {
        return NextResponse.json(
          { error: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤ 296-–§–ó –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.' },
          { status: 403 }
        );
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –æ—Ç—á–µ—Ç–æ–≤ –≤ –º–µ—Å—è—Ü (–µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
      if (user.organization.reportsPerMonth > 0) {
        const now = new Date();
        const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);
        const endOfMonth = new Date(now.getFullYear(), now.getMonth() + 1, 0, 23, 59, 59);

        const reportsThisMonth = await prisma.report.count({
          where: {
            userId: user.id,
            createdAt: {
              gte: startOfMonth,
              lte: endOfMonth,
            },
          },
        });

        if (reportsThisMonth >= user.organization.reportsPerMonth) {
          return NextResponse.json(
            {
              error: `–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤ (${user.organization.reportsPerMonth} –≤ –º–µ—Å—è—Ü). –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞.`,
            },
            { status: 403 }
          );
        }
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω–æ—Ç—É –¥–∞–Ω–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –æ—Ç—á–µ—Ç–∞ 296-–§–ó
    const organizationCheck = await ensureOrganizationComplete(user.id);

    if (!organizationCheck.success) {
      return NextResponse.json(
        {
          error: 'ORGANIZATION_INCOMPLETE',
          message: organizationCheck.error?.message,
          missingFields: organizationCheck.error?.missingFields,
          warnings: organizationCheck.error?.warnings,
        },
        { status: 400 }
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤—ã–±—Ä–æ—Å–æ–≤
    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ò–ù–ù: –≤–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≥–¥–µ –ò–ù–ù —Å–æ–≤–ø–∞–¥–∞–µ—Ç (true) –∏–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω (null)
    // –ò—Å–∫–ª—é—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å —á—É–∂–∏–º –ò–ù–ù (innMatches: false)
    const processedDocuments = await prisma.document.findMany({
      where: {
        userId: user.id,
        status: 'PROCESSED',
        OR: [
          { innMatches: true },   // –î–æ–∫—É–º–µ–Ω—Ç—ã —Å —Å–æ–≤–ø–∞–¥–∞—é—â–∏–º –ò–ù–ù
          { innMatches: null },   // –î–æ–∫—É–º–µ–Ω—Ç—ã –±–µ–∑ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –ò–ù–ù
        ]
      },
      select: {
        id: true,
        ocrData: true,
        extractedINN: true,
        innMatches: true
      }
    });

    console.log(`üìä –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç—á–µ—Ç–∞: ${processedDocuments.length}`);
    console.log(`   - –° —Å–æ–≤–ø–∞–¥–∞—é—â–∏–º –ò–ù–ù: ${processedDocuments.filter(d => d.innMatches === true).length}`);
    console.log(`   - –ë–µ–∑ –ò–ù–ù: ${processedDocuments.filter(d => d.innMatches === null).length}`);

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—ã–±—Ä–æ—Å—ã –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    let totalEmissions = 0;
    processedDocuments.forEach(doc => {
      if (doc.ocrData && typeof doc.ocrData === 'object') {
        const data = doc.ocrData as any;

        // –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –∏–∑ extractedData
        if (data.extractedData?.transport?.analysis?.emissions) {
          const transportEmissions = data.extractedData.transport.analysis.emissions.co2Emissions;
          console.log(`üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ –≤—ã–±—Ä–æ—Å—ã –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ ${doc.id}: ${transportEmissions} –∫–≥ CO‚ÇÇ`);
          totalEmissions += transportEmissions / 1000; // –ø–µ—Ä–µ–≤–æ–¥–∏–º –∫–≥ –≤ —Ç–æ–Ω–Ω—ã
        }
        // –°–¢–ê–†–ê–Ø –õ–û–ì–ò–ö–ê: –ò—â–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—è—Ö (–¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π)
        else if (data.emissions) {
          totalEmissions += Number(data.emissions) || 0;
        }
        else if (data.co2) {
          totalEmissions += Number(data.co2) || 0;
        }
        else if (data.carbon) {
          totalEmissions += Number(data.carbon) || 0;
        }
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–∞—Ä—Å–µ—Ä–æ–≤ (Excel, CSV)
        else if (data.extractedData?.fuel) {
          // TODO: –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤—ã–±—Ä–æ—Å—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–ø–ª–∏–≤–µ
          console.log(`‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–ø–ª–∏–≤–µ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ ${doc.id}, –Ω–æ —Ä–∞—Å—á–µ—Ç –≤—ã–±—Ä–æ—Å–æ–≤ –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω`);
        }
        else {
          console.warn(`‚ö†Ô∏è –î–æ–∫—É–º–µ–Ω—Ç ${doc.id} (${data.category || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}) –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤—ã–±—Ä–æ—Å–∞—Ö`);
        }
      }
    });

    console.log(`üìä –û–±—â–∏–µ –≤—ã–±—Ä–æ—Å—ã –¥–ª—è –æ—Ç—á–µ—Ç–∞: ${totalEmissions.toFixed(3)} —Ç–æ–Ω–Ω CO‚ÇÇ –∏–∑ ${processedDocuments.length} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤`);

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç—á–µ—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –≥–æ–¥)
    const year = parseInt(period || new Date().getFullYear().toString());
    const reportPeriodStart = new Date(year, 0, 1); // 1 —è–Ω–≤–∞—Ä—è
    const reportPeriodEnd = new Date(year, 11, 31, 23, 59, 59); // 31 –¥–µ–∫–∞–±—Ä—è

    console.log(`üìÖ –û—Ç—á–µ—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥: —Å ${reportPeriodStart.toLocaleDateString('ru-RU')} –ø–æ ${reportPeriodEnd.toLocaleDateString('ru-RU')}`);

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ—Ç—á–µ—Ç
    const report = await prisma.report.create({
      data: {
        userId: user.id,
        name,
        reportType: reportType === 'annual' ? 'REPORT_296FZ' : 'REPORT_296FZ',
        period,
        reportPeriodStart,
        reportPeriodEnd,
        status: 'READY',
        format: 'pdf',
        fileName: `${name.replace(/\s+/g, '_')}.pdf`,
        filePath: '', // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        emissionData: {},
        submissionDeadline: period === '2024'
          ? new Date('2025-07-01') // 296-–§–ó: –æ—Ç—á–µ—Ç –∑–∞ 2024 –≥–æ–¥ —Å–¥–∞–µ—Ç—Å—è –¥–æ 1 –∏—é–ª—è 2025
          : period === '2025'
          ? new Date('2026-07-01') // 296-–§–ó: –æ—Ç—á–µ—Ç –∑–∞ 2025 –≥–æ–¥ —Å–¥–∞–µ—Ç—Å—è –¥–æ 1 –∏—é–ª—è 2026
          : new Date(Date.now() + 90 * 24 * 60 * 60 * 1000), // 90 –¥–Ω–µ–π –æ—Ç —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
        totalEmissions,
        documentCount: processedDocuments.length
      },
      select: {
        id: true,
        name: true,
        reportType: true,
        status: true,
        period: true,
        reportPeriodStart: true,
        reportPeriodEnd: true,
        submissionDeadline: true,
        totalEmissions: true,
        documentCount: true,
        createdAt: true
      }
    });

    return NextResponse.json({
      id: report.id,
      name: report.name,
      type: report.reportType === 'REPORT_296FZ' ? '296-–§–ó –ì–æ–¥–æ–≤–æ–π' : report.reportType,
      period: report.period,
      status: report.status.toLowerCase(),
      createdDate: report.createdAt.toLocaleDateString('ru-RU'),
      submissionDeadline: report.submissionDeadline?.toLocaleDateString('ru-RU') || '',
      totalEmissions: report.totalEmissions || 0,
      documentCount: report.documentCount
    }, { status: 201 });

  } catch (error) {
    console.error('Error creating report:', error);
    return NextResponse.json({ error: 'Failed to create report' }, { status: 500 });
  }
}