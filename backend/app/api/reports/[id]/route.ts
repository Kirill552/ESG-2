import { NextRequest, NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import { signReportAndFreeze } from '@/lib/report-signing';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/lib/auth-options';

const prisma = new PrismaClient();

// GET - –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –ø–æ ID
export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const session = await getServerSession(authOptions);
    const userId = session?.user?.id;
    if (!userId) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const { id } = await params;

    const report = await prisma.report.findUnique({
      where: {
        id: id,
        userId: userId
      },
      include: {
        document: true,
        user: true
      }
    });

    if (!report) {
      return NextResponse.json({ error: '–û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' }, { status: 404 });
    }

    return NextResponse.json({
      success: true,
      data: report
    });

  } catch (error) {
    console.error('Error fetching report:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞' },
      { status: 500 }
    );
  }
}

// DELETE - —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
export async function DELETE(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const session = await getServerSession(authOptions);
    const userId = session?.user?.id;
    
    if (!userId) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const { id } = await params;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç—á–µ—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ —É–∑–Ω–∞—ë–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏/–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    const report = await prisma.report.findFirst({
      where: { id, userId },
      select: { id: true, isLocked: true, signedAt: true, currentSnapshotId: true }
    });

    if (!report) {
      return NextResponse.json({ error: 'Report not found' }, { status: 404 });
    }

    // –†–∞–∑—Ä–µ—à–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ—Ç—á—ë—Ç –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω (—Ç.–µ. –Ω–µ—Ç signedAt –∏ –Ω–µ—Ç snapshot)
    const isSigned = Boolean(report.signedAt) || Boolean(report.currentSnapshotId);
    console.log(`üóëÔ∏è DELETE report ${id} ‚Äî state: { isLocked: ${report.isLocked}, signedAt: ${report.signedAt ? 'yes' : 'no'}, hasSnapshot: ${report.currentSnapshotId ? 'yes' : 'no'} }`);
    if (isSigned) {
      // –ú—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ: –∞—Ä—Ö–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π –æ—Ç—á—ë—Ç
      await prisma.report.update({ where: { id }, data: { archivedAt: new Date() } as any });
      console.log(`üóÑÔ∏è Report archived (soft-delete): ${id}`);
      return new NextResponse(null, { status: 204 });
    }

    // –ñ—ë—Å—Ç–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –¥–ª—è –Ω–µ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö
    await prisma.report.delete({ where: { id } });

    console.log(`üóëÔ∏è –û—Ç—á–µ—Ç —É–¥–∞–ª–µ–Ω: ${id}`);

  return new NextResponse(null, { status: 204 });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞' },
      { status: 500 }
    );
  }
} 

// POST /api/reports/[id]/sign ‚Äî –ø–æ–¥–ø–∏—Å–∞—Ç—å –∏ –∑–∞–º–æ—Ä–æ–∑–∏—Ç—å –æ—Ç—á–µ—Ç
export async function POST(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    if (String(process.env.ENABLE_REPORT_SIGNING).toLowerCase() !== 'true') {
      return NextResponse.json({ error: 'Not found' }, { status: 404 });
    }
    const session = await getServerSession(authOptions);
    const userId = session?.user?.id;
    if (!userId) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const { id } = await params;

    const result = await signReportAndFreeze({ reportId: id, userId });

    return NextResponse.json({
      success: true,
      ...result
    });
  } catch (error: any) {
    return NextResponse.json(
      { error: error?.message || '–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞' },
      { status: 400 }
    );
  }
}