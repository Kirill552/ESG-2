/**
 * OCR Worker - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–¥–∞—á OCR –∏–∑ –æ—á–µ—Ä–µ–¥–∏ pg-boss
 * –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è 2025 –¥–ª—è –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
 */

import { createPgBoss, QUEUE_NAMES } from '../lib/pg-boss-config';
import { processImageWithPostProcessing } from '../lib/multi-level-ocr-service';
import { prisma } from '../lib/prisma';
import * as fs from 'fs';
import * as path from 'path';

interface OcrJobData {
  documentId: string;
  filePath: string;
  fileName: string;
  userId: string;
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ OCR –∑–∞–¥–∞—á–∏
 */
async function processOcrJob(job: any): Promise<void> {
  const jobData: OcrJobData = job.data;
  const startTime = Date.now();

  console.log(`üîÑ [OCR Worker] –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–∞: ${jobData.documentId}`);
  console.log(`üìÑ –§–∞–π–ª: ${jobData.fileName}`);

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    const document = await prisma.document.findUnique({
      where: { id: jobData.documentId },
      select: {
        id: true,
        fileName: true,
        filePath: true,
        ocrStatus: true,
        category: true
      }
    });

    if (!document) {
      console.log(`‚ö†Ô∏è  –î–æ–∫—É–º–µ–Ω—Ç ${jobData.documentId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.`);
      return;
    }

    // 2. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "processing"
    await prisma.document.update({
      where: { id: jobData.documentId },
      data: {
        ocrStatus: 'processing',
        ocrStartedAt: new Date()
      }
    });

    // 3. –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    const fullPath = path.resolve(jobData.filePath);

    if (!fs.existsSync(fullPath)) {
      throw new Error(`–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${fullPath}`);
    }

    const fileBuffer = fs.readFileSync(fullPath);
    console.log(`üì¶ –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω: ${fileBuffer.length} –±–∞–π—Ç`);

    // 4. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—É—é OCR —Å–∏—Å—Ç–µ–º—É
    const enablePostProcessing = process.env.ENABLE_FOUNDATION_MODELS_POSTPROCESSING !== 'false';

    console.log(`ü§ñ Foundation Models –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞: ${enablePostProcessing ? '–≤–∫–ª—é—á–µ–Ω–∞' : '–≤—ã–∫–ª—é—á–µ–Ω–∞'}`);

    let ocrResult;

    if (enablePostProcessing) {
      // –° –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–æ–π —á–µ—Ä–µ–∑ Foundation Models
      ocrResult = await processImageWithPostProcessing(fileBuffer, {
        ocrOptions: {
          preferredSource: 'auto',
          enableFallback: true,
          minConfidence: 0.6
        },
        postProcessOptions: {
          fixErrors: true,
          extractData: true,
          classifyCategory: true
        }
      });
    } else {
      // –ë–µ–∑ –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∏ (—Ç–æ–ª—å–∫–æ OCR)
      const { processImageMultiLevel } = await import('../lib/multi-level-ocr-service');
      ocrResult = await processImageMultiLevel(fileBuffer, {
        preferredSource: 'auto',
        enableFallback: true,
        minConfidence: 0.6
      });
    }

    console.log(`‚úÖ OCR –∑–∞–≤–µ—Ä—à–µ–Ω: ${ocrResult.text.length} —Å–∏–º–≤–æ–ª–æ–≤, confidence: ${ocrResult.confidence.toFixed(2)}`);
    console.log(`üîç –ò—Å—Ç–æ—á–Ω–∏–∫: ${ocrResult.source}, –í—Ä–µ–º—è: ${ocrResult.processingTime}ms`);

    // 5. –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    const updateData: any = {
      ocrStatus: 'completed',
      ocrCompletedAt: new Date(),
      ocrData: {
        text: ocrResult.text,
        confidence: ocrResult.confidence,
        source: ocrResult.source,
        processingTime: ocrResult.processingTime,
        words: ocrResult.words || [],
        extractedData: ocrResult.extractedData || null,
        fixedText: ocrResult.fixedText || null,
        category: ocrResult.category || null,
        categoryConfidence: ocrResult.categoryConfidence || null
      }
    };

    // 6. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –µ—Å–ª–∏ confidence > 0.5
    if (ocrResult.category && ocrResult.categoryConfidence && ocrResult.categoryConfidence > 0.5) {
      updateData.category = ocrResult.category;
      console.log(`üè∑Ô∏è  –ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: ${ocrResult.category} (${(ocrResult.categoryConfidence * 100).toFixed(1)}%)`);
    }

    // 7. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    await prisma.document.update({
      where: { id: jobData.documentId },
      data: updateData
    });

    const totalTime = Date.now() - startTime;
    console.log(`‚úÖ [OCR Worker] –î–æ–∫—É–º–µ–Ω—Ç ${jobData.documentId} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞ ${totalTime}ms`);

  } catch (error: any) {
    console.error(`‚ùå [OCR Worker] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ ${jobData.documentId}:`, error.message);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫—É –≤ –ë–î
    await prisma.document.update({
      where: { id: jobData.documentId },
      data: {
        ocrStatus: 'error',
        ocrCompletedAt: new Date(),
        ocrData: {
          error: error.message,
          errorStack: error.stack
        }
      }
    }).catch(err => {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—à–∏–±–∫—É –≤ –ë–î:', err);
    });

    throw error; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è retry –≤ pg-boss
  }
}

/**
 * –ó–∞–ø—É—Å–∫ worker
 */
async function main() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ OCR Worker...');
  console.log(`üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${process.cwd()}`);
  console.log(`üîó –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${process.env.DATABASE_URL ? '–ø–æ–¥–∫–ª—é—á–µ–Ω–∞' : '–ù–ï –ù–ê–°–¢–†–û–ï–ù–ê!'}`);

  try {
    // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ pg-boss
    const boss = await createPgBoss();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ pg-boss —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–¥–∞—á OCR
    await boss.work(
      QUEUE_NAMES.OCR,
      {
        teamSize: parseInt(process.env.OCR_WORKER_CONCURRENCY || '3'),
        batchSize: 1
      },
      async (job: any) => {
        await processOcrJob(job);
      }
    );

    console.log(`‚úÖ OCR Worker –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å: ${QUEUE_NAMES.OCR}`);
    console.log(`‚öôÔ∏è  –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç—å: ${process.env.OCR_WORKER_CONCURRENCY || 3}`);
    console.log('');
    console.log('–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á...');

    // Graceful shutdown
    const shutdown = async (signal: string) => {
      console.log(`\n‚ö†Ô∏è  –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª ${signal}, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...`);
      try {
        await boss.stop();
        console.log('‚úÖ Worker –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        process.exit(0);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ:', error);
        process.exit(1);
      }
    };

    process.on('SIGTERM', () => shutdown('SIGTERM'));
    process.on('SIGINT', () => shutdown('SIGINT'));

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ worker:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫
main().catch((error) => {
  console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});
