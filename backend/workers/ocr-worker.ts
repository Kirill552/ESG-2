/**
 * OCR Worker - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–¥–∞—á OCR –∏–∑ –æ—á–µ—Ä–µ–¥–∏ pg-boss
 * –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É 2025: GigaChat + Tesseract + fast-csv + ExcelJS
 */

const PgBoss = require('pg-boss');
// –ü—Ä—è–º—ã–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .ts –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å ts-node –≤ dev
import { createPgBoss, QUEUE_NAMES, OcrJobData, OcrJobResult } from '../lib/pg-boss-config';
import { HybridOCRService } from '../lib/hybrid-ocr-service';
import { IntelligentFileProcessor } from '../lib/intelligent-file-processor';
import { getCurrentUserMode } from '../lib/user-mode-utils';
import { surgePricingService } from '../lib/surge-pricing';
import { prisma } from '../lib/prisma';
import { metricsCollector } from '../lib/metrics';
import { workerLogger } from '../lib/structured-logger';
import { SubscriptionService } from '../lib/subscription-service';
import { notificationService, NotificationType, NotificationPriority } from '../lib/notification-service';
import { batchNotificationService } from '../lib/batch-notification-service';
import { Pool, PoolClient } from 'pg';

export interface WorkerConfig {
  concurrency: number;
  pollInterval: number;
  maxRetries: number;
}

export interface JobProgress {
  stage: 'starting' | 'downloading' | 'processing' | 'saving' | 'completed';
  progress: number;
  message: string;
}

/**
 * OCR Worker –∫–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á –∏–∑ –æ—á–µ—Ä–µ–¥–∏
 */
export class OcrWorker {
  private boss: any = null;
  private isRunning: boolean = false;
  private config: WorkerConfig;
  // –ö—Ä–µ–¥–∏—Ç—ã –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏
  private creditsService = null as any;
  private processor: IntelligentFileProcessor;
  private hybridOcrService: HybridOCRService;
  // –ü—É–ª –¥–ª—è advisory locks (–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–æ–Ω–∫—É—Ä—Ä–µ–Ω—Ç–Ω–æ—Å—Ç—å)
  private lockPool: Pool | null = null;
  private subscriptionService = new SubscriptionService();

  constructor(config: Partial<WorkerConfig> = {}) {
    this.config = {
      concurrency: config.concurrency || parseInt(process.env.BULLMQ_CONCURRENCY || '5'),
      pollInterval: config.pollInterval || 5000, // 5 —Å–µ–∫—É–Ω–¥
      maxRetries: config.maxRetries || 3
    };
    
    this.processor = new IntelligentFileProcessor();
    this.hybridOcrService = new HybridOCRService();

    console.log('üîß OCR Worker –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π:', this.config);
  }

  /**
   * –ó–∞–ø—É—Å–∫ worker –ø—Ä–æ—Ü–µ—Å—Å–∞
   */
  async start(): Promise<void> {
    if (this.isRunning) {
      await workerLogger.warn('OCR Worker already running');
      return;
    }

    try {
      await workerLogger.info('Starting OCR Worker...');
      
  // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ pg-boss
      this.boss = await createPgBoss();
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è advisory locks
  this.lockPool = new Pool({ connectionString: process.env.DATABASE_URL, ssl: (process.env.DATABASE_URL?.includes('sslmode=require') ? { rejectUnauthorized: false } : undefined) as any });
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–¥–∞—á OCR
      // –î–ª—è —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ pg-boss: work(name, options, handler)
      // pg-boss v10: work(name, options, handler)
      await this.boss.work(
        QUEUE_NAMES.OCR,
        { teamSize: this.config.concurrency, batchSize: 1, includeMetadata: false },
        async (jobs: any[]) => {
          // pg-boss v10 –ø–µ—Ä–µ–¥–∞—ë—Ç –º–∞—Å—Å–∏–≤ –∑–∞–¥–∞—á
          const list = Array.isArray(jobs) ? jobs : (jobs ? [jobs] : [])
          for (const job of list) {
            try {
              await this.processOcrJob(job)
            } catch (e) {
              // –û—à–∏–±–∫—É –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º ‚Äî pg-boss –ø–æ–º–µ—Ç–∏—Ç fail
              throw e
            }
          }
        }
      );

      this.isRunning = true;
      await workerLogger.workerStarted('ocr-worker', QUEUE_NAMES.OCR);
      await workerLogger.info('OCR Worker started successfully', { 
        concurrency: this.config.concurrency,
        queueName: QUEUE_NAMES.OCR
      });
      
      // –†–µ–∑–µ—Ä–≤–Ω—ã–π –ø–æ–ª–ª–∏–Ω–≥: –≤–∫–ª—é—á–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ —Ñ–ª–∞–≥—É, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞—Ç—å work()
      if (process.env.PGBOSS_POLL_FALLBACK === 'true') {
        this.startPollingFallback().catch((e) => {
          workerLogger.error('Polling fallback crashed', e instanceof Error ? e : new Error(String(e)));
        });
      }

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º graceful shutdown
      this.setupGracefulShutdown();
      
    } catch (error) {
      await workerLogger.error('Failed to start OCR Worker', 
        error instanceof Error ? error : new Error(String(error))
      );
      throw error;
    }
  }

  /**
   * –†–µ–∑–µ—Ä–≤–Ω—ã–π –ø–æ–ª–ª–∏–Ω–≥ –æ—á–µ—Ä–µ–¥–∏ —á–µ—Ä–µ–∑ fetch/complete
   */
  private async startPollingFallback(): Promise<void> {
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º –ø–æ–ª–ª–∏–Ω–≥–∞, —á—Ç–æ–±—ã –¥–∞—Ç—å —à–∞–Ω—Å –∞–≤—Ç–æ‚Äë–¥–æ—Å—Ç–∞–≤–∫–µ
    await new Promise((r) => setTimeout(r, 1500));
    while (this.isRunning) {
      try {
        // –ë–µ—Ä—ë–º –æ–¥–Ω—É –∑–∞–¥–∞—á—É –∑–∞ –∏—Ç–µ—Ä–∞—Ü–∏—é
        let job: any = await this.boss.fetch(QUEUE_NAMES.OCR);
        // –í pg-boss fetch –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å –º–∞—Å—Å–∏–≤ ‚Äî –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
        if (Array.isArray(job)) {
          job = job[0];
        }

        if (!job) {
          await new Promise((r) => setTimeout(r, 1000));
          continue;
        }

        await workerLogger.info('Polling fallback claimed jobs', { count: 1 });

        try {
            const startedAt = Date.now();
            const result = await this.processOcrJob(job);
            if (job && job.id) {
              await this.boss.complete(String(job.id), result);
              const tookMs = Date.now() - startedAt;
              await this.onCompletedInternal(String(job.id), result, tookMs);
            } else {
              await workerLogger.warn('Fetched job without id on complete, skipping', { rawJob: job });
            }
        } catch (err) {
            const message = err instanceof Error ? err.message : String(err);
            if (job && job.id) {
              // pg-boss v10: fail –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ ID. –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –Ω–∞—à–∏—Ö –º–µ—Ç—Ä–∏–∫–∞—Ö/–ë–î
              try {
                await this.boss.fail(String(job.id));
              } catch (failErr) {
                await workerLogger.warn('boss.fail failed, will not force-complete to avoid corrupting job id', { failErr: String(failErr) });
              }
              await this.onFailedInternal(String(job.id), message);
            } else {
              await workerLogger.warn('Fetched job without id on fail, skipping', { error: message, rawJob: job });
            }
        }
      } catch (error) {
        await workerLogger.error('Polling fallback iteration error', error instanceof Error ? error : new Error(String(error)));
        await new Promise((r) => setTimeout(r, 1500));
      }
    }
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ worker –ø—Ä–æ—Ü–µ—Å—Å–∞
   */
  async stop(): Promise<void> {
    if (!this.isRunning) {
      await workerLogger.warn('OCR Worker already stopped');
      return;
    }

    try {
      await workerLogger.info('Stopping OCR Worker...');
      
      this.isRunning = false;
      
      if (this.boss) {
        await this.boss.stop();
        this.boss = null;
      }
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è advisory locks
      if (this.lockPool) {
        try { await this.lockPool.end(); } catch {}
        this.lockPool = null;
      }
      
      await workerLogger.workerStopped('ocr-worker', QUEUE_NAMES.OCR, 'Manual stop');
    } catch (error) {
      await workerLogger.error('Failed to stop OCR Worker', 
        error instanceof Error ? error : new Error(String(error))
      );
      throw error;
    }
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ OCR –∑–∞–¥–∞—á–∏
   */
  private async processOcrJob(job: any): Promise<OcrJobResult> {
    const jobData: OcrJobData = job?.data;
    const jobId = job.id;
    const startTime = Date.now();
    
    if (!jobData) {
      throw new Error('Job data is undefined')
    }

    // –†–∞–Ω–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî –º—è–≥–∫–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞—á—É –±–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    try {
      const exists = await prisma.document.findUnique({ where: { id: jobData.documentId }, select: { id: true } });
      if (!exists) {
        await workerLogger.warn('–î–æ–∫—É–º–µ–Ω—Ç –¥–ª—è OCR –∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –±–µ–∑ –æ—à–∏–±–æ–∫.', {
          jobId,
          documentId: jobData.documentId,
          fileKey: jobData.fileKey,
        });
        const processingTime = Date.now() - startTime;
        try { await metricsCollector.recordProcessingTime(jobId, processingTime, { documentId: jobData.documentId, skipped: true }); } catch {}
        return {
          documentId: jobData.documentId,
          text: '',
          textLength: 0,
          confidence: 0,
          processedAt: new Date().toISOString(),
        };
      }
    } catch (e) {
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É
    }

    await workerLogger.jobStarted(jobId, 'OCR', {
      documentId: jobData.documentId,
      fileKey: jobData.fileKey,
      fileName: jobData.fileName,
      fileSize: jobData.fileSize,
      userId: jobData.userId,
      organizationId: jobData.organizationId
    });

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ —É–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–≥–æ —Å–ª–æ—Ç–∞ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    let orgSlot: { client: PoolClient; key1: number; key2: number } | null = null;

    try {
      const organizationId = jobData.organizationId || jobData.userId;
      // –ü–æ–ø—ã—Ç–∫–∞ –∑–∞—Ö–≤–∞—Ç–∏—Ç—å —Å–ª–æ—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –Ω–∞ —É—Ä–æ–≤–Ω–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
      try {
        orgSlot = await this.acquireOrgConcurrencySlot(organizationId);
        if (!orgSlot) {
          throw new Error('ORG_CONCURRENCY_TIMEOUT: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ª–æ—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏');
        }
        await workerLogger.info('–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–ª–æ—Ç –ø–æ–ª—É—á–µ–Ω', { organizationId, jobId });
      } catch (lockErr) {
        await workerLogger.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–ª–æ—Ç', { organizationId, jobId, error: String(lockErr) });
        throw lockErr;
      }
      
      // –≠—Ç–∞–ø 1: –ü—Ä–æ–≥—Ä–µ—Å—Å —Å—Ç–∞—Ä—Ç–∞ (–∫—Ä–µ–¥–∏—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã)
      await this.updateProgress(job, {
        stage: 'starting',
        progress: 5,
        message: '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—é'
      });
      // –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–∏–Ω —Ä–∞–∑
      try {
        await prisma.document.updateMany({
          where: { id: jobData.documentId },
          data: {
            processingStartedAt: new Date(),
            queueStatus: 'ACTIVE',
            status: 'PROCESSING'
          }
        });
      } catch {}

      // –≠—Ç–∞–ø 3: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
      await this.updateProgress(job, {
        stage: 'downloading',
        progress: 30,
        message: '–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞'
      });

      // –≠—Ç–∞–ø 4: OCR –æ–±—Ä–∞–±–æ—Ç–∫–∞
      await this.updateProgress(job, {
        stage: 'processing',
        progress: 50,
        message: '–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞'
      });

      let ocrText: string;
      let hybridResult: any = null;
      const timeoutMs = parseInt(process.env.OCR_JOB_TIMEOUT_MS || '180000'); // 3 –º–∏–Ω—É—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      const runWithTimeout = async <T>(p: Promise<T>, ms: number): Promise<T> => {
        return await Promise.race([
          p,
          new Promise<never>((_, reject) => setTimeout(() => reject(new Error('OCR_TIMEOUT')), ms))
        ]);
      };

      // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∏–∑ S3
      const { buffer } = await (await import('../lib/s3')).getFileBuffer(jobData.fileKey);

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–±–æ—Ä–∞ OCR –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
      let userMode = 'DEMO';
      try {
        userMode = await getCurrentUserMode(jobData.userId);
      } catch (error) {
        console.warn('Failed to get user mode, using DEMO:', error);
      }

      if (process.env.NODE_ENV === 'test') {
        // –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É
        ocrText = `Test OCR result for ${jobData.fileName || jobData.fileKey}`;
        hybridResult = {
          provider: 'test',
          confidence: 0.95,
          processingTime: 100,
          extractedText: ocrText
        };
      } else {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π HybridOcrService
        hybridResult = await runWithTimeout(
          this.hybridOcrService.processFile(
            buffer,
            jobData.fileName || jobData.fileKey,
            userMode as any
          ),
          timeoutMs
        );

        ocrText = hybridResult.extractedText ||
                  hybridResult.extractedData?.rawText ||
                  hybridResult.extractedData?.structured_data?.[0]?.content ||
                  '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
      }

      if (!ocrText || ocrText.length < 10) {
        throw new Error('OCR_FAILED: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞');
      }

      // –≠—Ç–∞–ø 5: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      await this.updateProgress(job, {
        stage: 'saving',
        progress: 70,
        message: '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤'
      });

      await this.saveOcrResults(jobData.documentId, ocrText, hybridResult);

      // –≠—Ç–∞–ø 6: —Ñ–∏–Ω–∞–ª (–±–µ–∑ —Å–ø–∏—Å–∞–Ω–∏–π)
      await this.updateProgress(job, {
        stage: 'saving',
        progress: 90,
        message: '–ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É'
      });

      // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
      await this.updateProgress(job, {
        stage: 'completed',
        progress: 100,
        message: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ'
      });

      const result: OcrJobResult = {
        documentId: jobData.documentId,
        text: ocrText,
        textLength: ocrText.length,
        confidence: 0.95, // –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å
        processedAt: new Date().toISOString()
      };

      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      const processingTime = Date.now() - startTime;
  await metricsCollector.recordProcessingTime(jobId, processingTime, { documentId: jobData.documentId });

      console.log(`‚úÖ OCR –∑–∞–¥–∞—á–∞ ${jobId} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ:`, {
        documentId: result.documentId,
        textLength: result.textLength,
        processingTime: `${processingTime}ms`
      });

      // –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–º–µ—á–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º
      try {
        await prisma.document.updateMany({
          where: { id: jobData.documentId },
          data: {
            status: 'PROCESSED',
            queueStatus: 'COMPLETED',
            processingCompletedAt: new Date(),
            processingStage: 'completed',
            processingMessage: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ',
            processingProgress: 100,
          }
        })
      } catch {}

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å batch –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
      try {
        await batchNotificationService.updateBatchProgress(jobData.documentId, true);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –º–∞–ª—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫ (1-2 –¥–æ–∫—É–º–µ–Ω—Ç–∞)
        const shouldSendIndividual = await batchNotificationService.shouldSendIndividualNotification(jobData.documentId);
        if (shouldSendIndividual) {
          await notificationService.sendNotification({
            userId: jobData.userId,
            type: NotificationType.DOCUMENT_PROCESSED,
            title: '–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω',
            message: `–î–æ–∫—É–º–µ–Ω—Ç "${jobData.fileName || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}" —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —á–µ—Ä–µ–∑ OCR. –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ ${result.textLength} —Å–∏–º–≤–æ–ª–æ–≤.`,
            metadata: {
              documentId: jobData.documentId,
              fileName: jobData.fileName,
              textLength: result.textLength,
              confidence: result.confidence,
              processingTime: processingTime,
              link: `/documents`,
              priority: NotificationPriority.LOW
            }
          });
          console.log(`üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${jobData.userId}`);
        } else {
          console.log(`üì¶ –î–æ–∫—É–º–µ–Ω—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ —Å–æ—Å—Ç–∞–≤–µ batch - –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è`);
        }
      } catch (notifError) {
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å
        console.error('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:', notifError);
      }

  return result;

    } catch (error: any) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ OCR –∑–∞–¥–∞—á–∏ ${jobId}:`, error.message);
      
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫—É –æ—à–∏–±–∫–∏
      const processingTime = Date.now() - startTime;
  await metricsCollector.recordError(jobId, error.name || 'UNKNOWN_ERROR', error.message);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–∞ –æ—à–∏–±–∫—É
      await this.handleJobError(jobData.documentId, error);

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å batch –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –æ—à–∏–±–∫–æ–π
      try {
        await batchNotificationService.updateBatchProgress(jobData.documentId, false);
      } catch (batchError) {
        console.error('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å batch –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –æ—à–∏–±–∫–æ–π:', batchError);
      }

      throw error;
    }
    finally {
      // –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Å–ª–æ—Ç–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
      if (orgSlot) {
        try {
          await this.releaseOrgConcurrencySlot(orgSlot);
          await workerLogger.info('–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–ª–æ—Ç –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω', { jobId });
        } catch (unlockErr) {
          console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞:', unlockErr);
        }
      }
    }
  }

  private async onCompletedInternal(jobId: string, result: OcrJobResult, processingTimeMs: number) {
    try {
      // –î—É–±–ª–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏—è onJobCompleted –∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ—á–µ—Ä–µ–¥–∏
      await metricsCollector.recordProcessingTime(jobId, processingTimeMs, { documentId: result?.documentId });
    } catch {}
  }

  private async onFailedInternal(jobId: string, error: string) {
    try {
      await metricsCollector.recordError(jobId, 'PROCESSING_ERROR', error);
    } catch {}
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
   */
  private async updateProgress(job: any, progress: JobProgress): Promise<void> {
    try {
      console.log(`üìä ${job.id} [${progress.progress}%] ${progress.stage}: ${progress.message}`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ pg-boss (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
      if (this.boss && typeof this.boss.publish === 'function') {
        await this.boss.publish('job-progress', {
          jobId: job.id,
          ...progress
        });
      }
      // –ó–∞–ø–∏—à–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –ë–î, —á—Ç–æ–±—ã UI —á–µ—Ä–µ–∑ SSE –≤–∏–¥–µ–ª –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      try {
        const data: any = job?.data
        if (data?.documentId) {
          await prisma.document.updateMany({
            where: { id: data.documentId },
            data: {
              processingProgress: Math.max(0, Math.min(100, Math.round(progress.progress))),
              processingStage: progress.stage,
              processingMessage: progress.message,
              status: progress.stage === 'completed' ? 'PROCESSED' : 'PROCESSING',
              queueStatus: progress.stage === 'completed' ? 'COMPLETED' : 'ACTIVE',
              updatedAt: new Date(),
            }
          })
        }
      } catch (e) {
        console.error('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –ë–î:', e)
      }
      
    } catch (error) {
      console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error);
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ OCR –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
   */
  private async saveOcrResults(documentId: string, ocrText: string, hybridResult?: any): Promise<void> {
    try {
      const res = await prisma.document.updateMany({
        where: { id: documentId },
        data: {
          status: 'PROCESSED',
          ocrProcessed: true,
          ocrData: process.env.NODE_ENV === 'test' ? {
            fullText: ocrText,
            textPreview: ocrText.substring(0, 200),
            textLength: ocrText.length,
            processedAt: new Date().toISOString(),
            provider: hybridResult?.provider || 'test'
          } : {
            fullText: ocrText,
            textPreview: ocrText.substring(0, 200),
            textLength: ocrText.length,
            processedAt: new Date().toISOString(),
            provider: hybridResult?.provider || 'unknown',
            confidence: hybridResult?.confidence,
            processingTime: typeof hybridResult?.processingTime === 'number' ? Math.round(hybridResult.processingTime) : undefined,
            formatInfo: hybridResult?.formatInfo,
            structuredData: hybridResult?.structuredData,
            metadata: hybridResult?.metadata,
            healthCheckResults: hybridResult?.healthCheckResults
          },
          ocrConfidence: (process.env.NODE_ENV === 'test') ? 0.95 : (typeof hybridResult?.confidence === 'number' ? hybridResult.confidence : 0.95)
        }
      });
      if (!res.count || res.count === 0) {
        await workerLogger.warn('–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ OCR —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –±–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏—è', { documentId });
        return;
      }
      
      console.log(`üíæ OCR —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ ${documentId}`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è OCR —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è ${documentId}:`, error);
      // –ù–µ –±—Ä–æ—Å–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –ø–∞–¥–∞–ª–æ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    }
  }

  /**
   * –û—Ç–∫–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ OCR –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å–ø–∏—Å–∞–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–æ–≤
   */
  private async rollbackOcrResults(documentId: string): Promise<void> {
    try {
      await prisma.document.update({
        where: { id: documentId },
        data: {
          status: 'PROCESSING', // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
          ocrProcessed: false,
          ocrData: undefined,
          ocrConfidence: null,
          processingCompletedAt: null
        }
      });
      
      console.log(`üîÑ –û—Ç–∫–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ OCR –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: ${documentId}`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–∞—Ç–∞ OCR —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è ${documentId}:`, error);
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ - —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∑–∞–¥–∞—á–∏
   */
  private async handleJobError(documentId: string, error: Error): Promise<void> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      const document = await prisma.document.findUnique({
        where: { id: documentId },
        select: {
          id: true,
          fileName: true,
          userId: true
        }
      });

      const res = await prisma.document.updateMany({
        where: { id: documentId },
        data: {
          status: 'FAILED',
          ocrData: {
            error: error.message,
            processedAt: new Date().toISOString()
          }
        }
      });
      if (!res.count || res.count === 0) {
        await workerLogger.warn('–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—à–∏–±–∫–∏ OCR', { documentId, error: error.message });
      }

      await workerLogger.info('OCR error saved to database', {
        documentId,
        errorMessage: error.message
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –º–∞–ª—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫ (1-2 –¥–æ–∫—É–º–µ–Ω—Ç–∞)
      if (document && document.userId) {
        try {
          const shouldSendIndividual = await batchNotificationService.shouldSendIndividualNotification(documentId);
          if (shouldSendIndividual) {
            await notificationService.sendNotification({
              userId: document.userId,
              type: NotificationType.DOCUMENT_ERROR,
              title: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞',
              message: `–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç "${document.fileName || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}". ${this.getErrorMessage(error)}`,
              metadata: {
                documentId: document.id,
                fileName: document.fileName,
                errorMessage: error.message,
                errorType: error.name,
                link: `/documents?status=error`,
                priority: NotificationPriority.HIGH
              }
            });
            console.log(`üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${document.userId}`);
          } else {
            console.log(`üì¶ –û—à–∏–±–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ —Å–æ—Å—Ç–∞–≤–µ batch - –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è`);
          }
        } catch (notifError) {
          console.error('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', notifError);
        }
      }
    } catch (saveError) {
      await workerLogger.error('Failed to save OCR error to database',
        saveError instanceof Error ? saveError : new Error(String(saveError)),
        { documentId, originalError: error.message }
      );
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–Ω—è—Ç–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
   */
  private getErrorMessage(error: Error): string {
    const errorMessage = error.message.toLowerCase();

    if (errorMessage.includes('timeout') || errorMessage.includes('ocr_timeout')) {
      return '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.';
    }

    if (errorMessage.includes('ocr_failed') || errorMessage.includes('–Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç')) {
      return '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç.';
    }

    if (errorMessage.includes('invalid format') || errorMessage.includes('unsupported')) {
      return '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ PDF, DOCX, XLSX –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.';
    }

    if (errorMessage.includes('too large') || errorMessage.includes('size limit')) {
      return '–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50 –ú–ë.';
    }

    if (errorMessage.includes('org_concurrency')) {
      return '–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞—á.';
    }

    // –û–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –æ—à–∏–±–æ–∫
    return '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.';
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ graceful shutdown
   */
  private setupGracefulShutdown(): void {
    const shutdown = async (signal: string) => {
      await workerLogger.info(`Received shutdown signal: ${signal}`, { signal });
      await workerLogger.workerStopped('ocr-worker', QUEUE_NAMES.OCR, `Signal: ${signal}`);
      await this.stop();
      process.exit(0);
    };

    process.on('SIGTERM', () => shutdown('SIGTERM'));
    process.on('SIGINT', () => shutdown('SIGINT'));
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ worker'–∞
   */
  async getWorkerStats(): Promise<{
    isRunning: boolean;
    config: WorkerConfig;
    queueSize?: number;
  }> {
    const stats = {
      isRunning: this.isRunning,
      config: this.config,
      queueSize: undefined as number | undefined
    };

    if (this.boss) {
      try {
        stats.queueSize = await this.boss.getQueueSize(QUEUE_NAMES.OCR);
      } catch (error) {
        console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ—á–µ—Ä–µ–¥–∏:', error);
      }
    }

    return stats;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–¥–ø–∏—Å–∫–∏/ENV
   */
  private async getOrgConcurrencyLimit(organizationId: string): Promise<number> {
    // ENV —è–≤–Ω—ã–π –¥–µ—Ñ–æ–ª—Ç
    const envDefault = parseInt(process.env.ORG_OCR_CONCURRENCY_DEFAULT || '2');
    // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
    try {
      const sub = await this.subscriptionService.getActiveSubscription(organizationId);
      if (!sub) return envDefault;
      const plan = sub.planType; // 'TRIAL' | 'LITE' | 'STANDARD' | 'LARGE' | 'ENTERPRISE'
      const map = {
        TRIAL: parseInt(process.env.PLAN_CONCURRENCY_TRIAL || '1'),
        LITE: parseInt(process.env.PLAN_CONCURRENCY_LITE || '1'),
        STANDARD: parseInt(process.env.PLAN_CONCURRENCY_STANDARD || '2'),
        LARGE: parseInt(process.env.PLAN_CONCURRENCY_LARGE || '4'),
        ENTERPRISE: parseInt(process.env.PLAN_CONCURRENCY_ENTERPRISE || '6'),
      } as const;
      return Math.max(1, map[plan] || envDefault);
    } catch (e) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–Ω–∫—É—Ä—Ä–µ–Ω—Ç–Ω–æ—Å—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç', e);
      return envDefault;
    }
  }

  /**
   * –ü—Ä–æ—Å—Ç–æ–π 32-–±–∏—Ç–Ω—ã–π —Ö—ç—à —Å—Ç—Ä–æ–∫–∏ –¥–ª—è advisory locks
   */
  private hash32(input: string): number {
    let h = 2166136261;
    for (let i = 0; i < input.length; i++) {
      h ^= input.charCodeAt(i);
      h = Math.imul(h, 16777619);
    }
    // –ü—Ä–∏–≤–æ–¥–∏–º –∫ signed 32-bit
    return (h | 0);
  }

  /**
   * –ü–æ–ø—ã—Ç–∫–∞ –∑–∞—Ö–≤–∞—Ç–∏—Ç—å –æ–¥–∏–Ω –∏–∑ N —Å–ª–æ—Ç–æ–≤ –∫–æ–Ω–∫—É—Ä—Ä–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏.
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å–ª–æ—Ç–∞ (—Å –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–æ–º) –∏–ª–∏ null –ø–æ —Ç–∞–π–º–∞—É—Ç—É.
   */
  private async acquireOrgConcurrencySlot(organizationId: string): Promise<{ client: PoolClient; key1: number; key2: number } | null> {
    if (!this.lockPool) throw new Error('Lock pool is not initialized');
    const limit = await this.getOrgConcurrencyLimit(organizationId);
    const key1 = this.hash32(`org:${organizationId}`);

    const timeoutMs = parseInt(process.env.ORG_SLOT_ACQUIRE_TIMEOUT_MS || '20000');
    const backoffMs = parseInt(process.env.ORG_SLOT_ACQUIRE_BACKOFF_MS || '250');
    const start = Date.now();

    // –î–µ—Ä–∂–∏–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –Ω–∞ –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è advisory lock
    const client = await this.lockPool.connect();
    try {
      while (Date.now() - start < timeoutMs) {
        for (let slot = 1; slot <= Math.max(1, limit); slot++) {
          const key2 = slot; // –Ω–æ–º–µ—Ä —Å–ª–æ—Ç–∞ –∫–∞–∫ –≤—Ç–æ—Ä–æ–π –∫–ª—é—á
          // pg_try_advisory_lock(int, int) ‚Äî –Ω–µ –±–ª–æ–∫–∏—Ä—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞
          const res = await client.query('SELECT pg_try_advisory_lock($1::int, $2::int) as locked', [key1, key2]);
          const locked = res.rows?.[0]?.locked === true;
          if (locked) {
            return { client, key1, key2 };
          }
        }
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —Å –¥–∂–∏—Ç—Ç–µ—Ä–æ–º
        const jitter = Math.floor(Math.random() * 50);
        await new Promise(r => setTimeout(r, backoffMs + jitter));
      }
      // –¢–∞–π–º–∞—É—Ç ‚Äî –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
      client.release();
      return null;
    } catch (e) {
      client.release();
      throw e;
    }
  }

  /**
   * –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —É–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–≥–æ —Å–ª–æ—Ç–∞ –∫–æ–Ω–∫—É—Ä—Ä–µ–Ω—Ç–Ω–æ—Å—Ç–∏
   */
  private async releaseOrgConcurrencySlot(slot: { client: PoolClient; key1: number; key2: number }): Promise<void> {
    try {
      await slot.client.query('SELECT pg_advisory_unlock($1::int, $2::int)', [slot.key1, slot.key2]);
    } finally {
      slot.client.release();
    }
  }
}

/**
 * Singleton instance –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
 */
let workerInstance: OcrWorker | null = null;

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ singleton —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ OCR Worker
 */
export function getOcrWorker(config?: Partial<WorkerConfig>): OcrWorker {
  if (!workerInstance) {
    workerInstance = new OcrWorker(config);
  }
  return workerInstance;
}

/**
 * –ó–∞–ø—É—Å–∫ OCR Worker (–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ)
 */
export async function startOcrWorker(config?: Partial<WorkerConfig>): Promise<OcrWorker> {
  const worker = getOcrWorker(config);
  await worker.start();
  return worker;
}

/**
 * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ OCR Worker
 */
export async function stopOcrWorker(): Promise<void> {
  if (workerInstance) {
    await workerInstance.stop();
    workerInstance = null;
  }
}