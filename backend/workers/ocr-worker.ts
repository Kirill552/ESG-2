/**
 * OCR Worker - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–¥–∞—á OCR –∏–∑ –æ—á–µ—Ä–µ–¥–∏ pg-boss
 * –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è 2025 –¥–ª—è –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
 *
 * üìã –ú–ê–†–®–†–£–¢–ò–ó–ê–¶–ò–Ø –§–ê–ô–õ–û–í (2025):
 *
 * 1. –°–¢–†–£–ö–¢–£–†–ò–†–û–í–ê–ù–ù–´–ï –§–û–†–ú–ê–¢–´ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç #1):
 *    - Excel (.xlsx, .xls) ‚Üí ExcelParser
 *    - CSV/TSV ‚Üí CsvTsvParser
 *    - JSON ‚Üí JsonParser
 *    - XML ‚Üí XmlParser
 *    ‚úÖ –ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞, –≤—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å
 *
 * 2. –¢–ï–ö–°–¢–û–í–´–ï –§–û–†–ú–ê–¢–´ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç #2):
 *    - Word (.docx, .doc) ‚Üí OfficeDocumentParser
 *    - RTF ‚Üí RtfParser
 *    - HTML ‚Üí HtmlParser
 *    - TXT ‚Üí TxtParser
 *    ‚ö†Ô∏è Fallback –Ω–∞ OCR –µ—Å–ª–∏ –ø–∞—Ä—Å–µ—Ä –Ω–µ —Å–ø—Ä–∞–≤–∏–ª—Å—è
 *
 * 3. OCR –û–ë–†–ê–ë–û–¢–ö–ê (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç #3):
 *    - PDF ‚Üí Yandex Vision OCR
 *    - –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (JPEG, PNG, GIF, BMP) ‚Üí Yandex Vision –∏–ª–∏ Tesseract
 *    üîç –ú–µ–¥–ª–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞, —Ç—Ä–µ–±—É–µ—Ç –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∏ Foundation Models
 */

// –ö–†–ò–¢–ò–ß–ù–û: –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
import * as dotenv from 'dotenv';
import * as path from 'path';

// –ò—Å–ø–æ–ª—å–∑—É–µ–º process.cwd() –≤–º–µ—Å—Ç–æ __dirname –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ø–æ—Å–ª–µ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏
const envPath = path.resolve(process.cwd(), '.env');
console.log('üîß [ENV] –ó–∞–≥—Ä—É–∂–∞–µ–º .env –∏–∑:', envPath);
dotenv.config({ path: envPath });

// –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å
console.log('üîß [ENV CHECK] YC_BUCKET_NAME:', process.env.YC_BUCKET_NAME || '‚ùå –ù–ï –ù–ê–ô–î–ï–ù!');
console.log('üîß [ENV CHECK] DATABASE_URL:', process.env.DATABASE_URL ? '‚úÖ –∑–∞–≥—Ä—É–∂–µ–Ω' : '‚ùå –ù–ï –ù–ê–ô–î–ï–ù!');
console.log('üîß [ENV CHECK] YC_ACCESS_KEY_ID:', process.env.YC_ACCESS_KEY_ID ? '‚úÖ –∑–∞–≥—Ä—É–∂–µ–Ω' : '‚ùå –ù–ï –ù–ê–ô–î–ï–ù!');
console.log('üîß [ENV CHECK] YANDEX_FOLDER_ID:', process.env.YANDEX_FOLDER_ID || '‚ùå –ù–ï –ù–ê–ô–î–ï–ù!');

import { createPgBoss, QUEUE_NAMES } from '../lib/pg-boss-config';
import { processImageWithPostProcessing } from '../lib/multi-level-ocr-service';
import { prisma } from '../lib/prisma';
import { getFileBuffer } from '../lib/s3';
import { extractINN, validateINN, compareINNs } from '../lib/inn-extractor';
import * as fs from 'fs';

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–∑ pg-boss-config.ts –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è
interface OcrJobData {
  documentId: string;
  userId: string;
  fileKey: string;        // S3 –∫–ª—é—á —Ñ–∞–π–ª–∞
  fileName: string;       // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è
  mimeType: string;       // MIME —Ç–∏–ø
  fileSize: number;       // –†–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö
  category?: string;
  userMode?: 'DEMO' | 'TRIAL' | 'PAID' | 'EXPIRED';
}

// –†–∞—Å—à–∏—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–¥–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ
// –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç postProcessWithFoundationModels, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –±–∞–∑–æ–≤–æ–º OcrResult)
type ExtendedOcrResult = {
  text: string;
  confidence: number;
  source: string;
  processingTime: number;
  words?: any[];
  fixedText?: string;
  extractedData?: any;
  category?: string;
  categoryConfidence?: number;
  subcategory?: string;
  categoryReasoning?: string;
};

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è OCR –æ–±—Ä–∞–±–æ—Ç–∫–∏
 */
async function processWithOcr(buffer: Buffer): Promise<ExtendedOcrResult> {
  // –ß–∏—Ç–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–¥–µ–ª—å–Ω–æ
  const enableErrorCorrection = process.env.ENABLE_OCR_ERROR_CORRECTION !== 'false';
  const enableDataExtraction = process.env.ENABLE_DATA_EXTRACTION !== 'false';
  const enableCategoryClassification = process.env.ENABLE_CATEGORY_CLASSIFICATION !== 'false';

  // –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞ –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–µ–Ω
  const enablePostProcessing = enableErrorCorrection || enableDataExtraction || enableCategoryClassification;

  console.log(`ü§ñ Foundation Models - —É—Ä–æ–≤–Ω–∏ –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∏:`);
  console.log(`   Level 2 (–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ OCR): ${enableErrorCorrection ? '‚úÖ –≤–∫–ª' : '‚ùå –æ—Ç–∫–ª'}`);
  console.log(`   Level 3 (–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö): ${enableDataExtraction ? '‚úÖ –≤–∫–ª' : '‚ùå –æ—Ç–∫–ª'}`);
  console.log(`   Level 4 (–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è): ${enableCategoryClassification ? '‚úÖ –≤–∫–ª' : '‚ùå –æ—Ç–∫–ª'}`);

  if (enablePostProcessing) {
    // –° –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–æ–π —á–µ—Ä–µ–∑ Foundation Models (–≥–∏–±–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è–º–∏)
    return await processImageWithPostProcessing(buffer, {
      ocrOptions: {
        preferredSource: 'auto',
        enableFallback: true,
        minConfidence: 0.6
      },
      postProcessOptions: {
        fixErrors: enableErrorCorrection,
        extractData: enableDataExtraction,
        classifyCategory: enableCategoryClassification
      }
    });
  } else {
    // –ë–µ–∑ –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∏ (—Ç–æ–ª—å–∫–æ OCR Levels 1-2)
    console.log('‚ö†Ô∏è –í—Å–µ —É—Ä–æ–≤–Ω–∏ –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–π OCR');
    const { processImageMultiLevel } = await import('../lib/multi-level-ocr-service');
    return await processImageMultiLevel(buffer, {
      preferredSource: 'auto',
      enableFallback: true,
      minConfidence: 0.6
    });
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ OCR –∑–∞–¥–∞—á–∏
 */
async function processOcrJob(job: any): Promise<void> {
  const jobData: OcrJobData = job.data;
  const startTime = Date.now();

  console.log(`üîÑ [OCR Worker] –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–∞: ${jobData.documentId}`);
  console.log(`üìÑ –§–∞–π–ª: ${jobData.fileName} (${jobData.mimeType}, ${jobData.fileSize} –±–∞–π—Ç)`);
  console.log(`üìÇ S3 –∫–ª—é—á: ${jobData.fileKey}`);

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    const document = await prisma.document.findUnique({
      where: { id: jobData.documentId },
      select: {
        id: true,
        fileName: true,
        filePath: true,
        status: true,
        category: true
      }
    });

    if (!document) {
      console.log(`‚ö†Ô∏è  –î–æ–∫—É–º–µ–Ω—Ç ${jobData.documentId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.`);
      return;
    }

    // 2. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "PROCESSING"
    if (document.status !== 'PROCESSING') {
      await prisma.document.update({
        where: { id: jobData.documentId },
        data: {
          status: 'PROCESSING',
          processingStartedAt: new Date(),
          processingProgress: 0,
          processingMessage: '–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–∞...'
        }
      });
      console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ PROCESSING`);
    }

    // 3. –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –∏–∑ S3 –∏—Å–ø–æ–ª—å–∑—É—è fileKey
    console.log(`üì• –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –∏–∑ S3: ${jobData.fileKey}`);
    let fileBuffer: Buffer;
    try {
      const result = await getFileBuffer(jobData.fileKey);
      fileBuffer = result.buffer;
      console.log(`üì¶ –§–∞–π–ª —Å–∫–∞—á–∞–Ω –∏–∑ S3: ${fileBuffer.length} –±–∞–π—Ç`);
    } catch (dlErr: any) {
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª –∏–∑ S3: ${dlErr.message}`);
    }

    // 4. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –∏ –≤—ã–±–∏—Ä–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏
    const { FormatDetector } = await import('../lib/format-detector');
    const formatInfo = FormatDetector.detectFormat(jobData.fileName, fileBuffer, jobData.mimeType);
    const strategy = FormatDetector.getProcessingStrategy(formatInfo);

    console.log(`üìã –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: ${formatInfo.format} (${formatInfo.subFormat || 'N/A'})`);
    console.log(`üìä –°—Ç—Ä–∞—Ç–µ–≥–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${strategy.processingPriority}`);
    console.log(`üîß –ü–∞—Ä—Å–µ—Ä: ${strategy.primaryParser || 'N/A'}`);

    let ocrResult: ExtendedOcrResult;

    // 5. –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É —Ñ–∞–π–ª–∞
    if (strategy.processingPriority === 'structural') {
      // ===== –°–¢–†–£–ö–¢–£–†–ò–†–û–í–ê–ù–ù–´–ï –§–û–†–ú–ê–¢–´: Excel, CSV, JSON =====
      console.log(`üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è ${formatInfo.format}`);

      const { ParserFactory } = await import('../lib/parsers');
      const parseResult = await ParserFactory.parseFile(
        jobData.fileName,
        fileBuffer,
        jobData.mimeType
      );

      if (!parseResult.result.success) {
        throw new Error(`–ü–∞—Ä—Å–∏–Ω–≥ ${formatInfo.format} –Ω–µ —É–¥–∞–ª—Å—è: ${parseResult.result.error}`);
      }

      const parsedData = parseResult.result.data!;

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ ExtendedOcrResult
      ocrResult = {
        text: JSON.stringify(parsedData.extractedData, null, 2),
        confidence: parsedData.confidence,
        source: `${parseResult.parserUsed} (structural)`,
        processingTime: parseResult.result.processingTime,
        extractedData: parsedData.extractedData
      };

      console.log(`‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω: ${parsedData.metadata.russian_units_found.length} —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –µ–¥–∏–Ω–∏—Ü –Ω–∞–π–¥–µ–Ω–æ`);

    } else if (strategy.processingPriority === 'textual') {
      // ===== –¢–ï–ö–°–¢–û–í–´–ï –§–û–†–ú–ê–¢–´: DOCX, RTF, TXT =====
      console.log(`üìÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è ${formatInfo.format}`);

      const { ParserFactory } = await import('../lib/parsers');
      const parseResult = await ParserFactory.parseFile(
        jobData.fileName,
        fileBuffer,
        jobData.mimeType
      );

      if (!parseResult.result.success) {
        // Fallback –Ω–∞ OCR –µ—Å–ª–∏ –ø–∞—Ä—Å–µ—Ä –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
        console.log(`‚ö†Ô∏è –¢–µ–∫—Å—Ç–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä –Ω–µ —Å–ø—Ä–∞–≤–∏–ª—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º OCR fallback`);
        ocrResult = await processWithOcr(fileBuffer);
      } else {
        const parsedData = parseResult.result.data!;

        ocrResult = {
          text: JSON.stringify(parsedData.extractedData, null, 2),
          confidence: parsedData.confidence,
          source: `${parseResult.parserUsed} (textual)`,
          processingTime: parseResult.result.processingTime,
          extractedData: parsedData.extractedData
        };

        console.log(`‚úÖ –¢–µ–∫—Å—Ç–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω`);
      }

    } else {
      // ===== OCR –û–ë–†–ê–ë–û–¢–ö–ê: PDF, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è =====
      console.log(`üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º OCR –¥–ª—è ${formatInfo.format}`);
      ocrResult = await processWithOcr(fileBuffer);
    }

  console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${ocrResult.text.length} —Å–∏–º–≤–æ–ª–æ–≤, confidence: ${ocrResult.confidence.toFixed(2)}`);
  console.log(`üîç –ò—Å—Ç–æ—á–Ω–∏–∫: ${ocrResult.source}, –í—Ä–µ–º—è: ${ocrResult.processingTime}ms`);

    // 6. –ò–∑–≤–ª–µ–∫–∞–µ–º –ò–ù–ù –∏–∑ OCR —Ç–µ–∫—Å—Ç–∞
    const extractedText = ocrResult.fixedText || ocrResult.text;
    const extractedINN = extractINN(extractedText);

    console.log(`üîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ò–ù–ù –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞:`);
    if (extractedINN) {
      console.log(`   ‚úÖ –ò–ù–ù –Ω–∞–π–¥–µ–Ω: ${extractedINN}`);
    } else {
      console.log(`   ‚ö†Ô∏è  –ò–ù–ù –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—Å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞`);
    }

    // 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ò–ù–ù —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let innMatches = false;
    if (extractedINN) {
      // –ü–æ–ª—É—á–∞–µ–º –ò–ù–ù –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userOrg = await prisma.organization.findUnique({
        where: { userId: jobData.userId },
        include: { profile: true }
      });

      if (userOrg?.profile?.inn) {
        innMatches = compareINNs(extractedINN, userOrg.profile.inn);

        console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ò–ù–ù:`);
        console.log(`   –î–æ–∫—É–º–µ–Ω—Ç:    ${extractedINN}`);
        console.log(`   –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: ${userOrg.profile.inn}`);
        console.log(`   –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ:  ${innMatches ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`);

        if (!innMatches) {
          console.log(`   ‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ò–ù–ù –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ù–ï —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –ò–ù–ù –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏`);
        }
      } else {
        console.log(`   ‚ö†Ô∏è  –ò–ù–ù –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –ø—Ä–æ—Ñ–∏–ª–µ`);
      }
    }

    // 8. –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    const updateData: any = {
      status: 'PROCESSED',
      processingCompletedAt: new Date(),
      processingProgress: 100,
      processingMessage: '–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω',
      ocrProcessed: true,
      ocrConfidence: ocrResult.confidence,
      extractedINN: extractedINN || null,
      innMatches: extractedINN ? innMatches : null,
      ocrData: {
        text: ocrResult.text,
        confidence: ocrResult.confidence,
        source: ocrResult.source,
        processingTime: ocrResult.processingTime,
        words: ocrResult.words || [],
        extractedData: ocrResult.extractedData ?? null,
        fixedText: ocrResult.fixedText ?? null,
        category: ocrResult.category ?? null,
        categoryConfidence: ocrResult.categoryConfidence ?? null,
        subcategory: ocrResult.subcategory ?? null,
        categoryReasoning: ocrResult.categoryReasoning ?? null,
        extractedINN: extractedINN || null,
        innMatches: extractedINN ? innMatches : null
      }
    };

    // 9. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –µ—Å–ª–∏ confidence > 0.5
    if (ocrResult.category && (ocrResult.categoryConfidence ?? 0) > 0.5) {
      // –ú–∞–ø–ø–∏–Ω–≥ —Ä—É—Å—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ enum –∑–Ω–∞—á–µ–Ω–∏—è
      const categoryMap: Record<string, string> = {
        '–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ': 'PRODUCTION',
        '–ü–æ—Å—Ç–∞–≤—â–∏–∫–∏': 'SUPPLIERS',
        '–û—Ç—Ö–æ–¥—ã': 'WASTE',
        '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç': 'TRANSPORT',
        '–¢–æ–ø–ª–∏–≤–æ': 'FUEL',
        '–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è': 'ENERGY',
        '–¢–µ–ø–ª–æ—ç–Ω–µ—Ä–≥–∏—è': 'HEAT',
        '–≠–Ω–µ—Ä–≥–∏—è': 'ENERGY',
        '–ü—Ä–æ—á–µ–µ': 'OTHER',
        '–î—Ä—É–≥–æ–µ': 'OTHER'
      };

      const mappedCategory = categoryMap[ocrResult.category] || ocrResult.category;
      updateData.category = mappedCategory as any;
      console.log(`üè∑Ô∏è  –ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: ${ocrResult.category} ‚Üí ${mappedCategory} (${((ocrResult.categoryConfidence || 0) * 100).toFixed(1)}%)`);
    }

    // 10. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    await prisma.document.update({
      where: { id: jobData.documentId },
      data: updateData
    });

    const totalTime = Date.now() - startTime;
    console.log(`‚úÖ [OCR Worker] –î–æ–∫—É–º–µ–Ω—Ç ${jobData.documentId} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞ ${totalTime}ms`);

  } catch (error: any) {
    console.error(`‚ùå [OCR Worker] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ ${jobData.documentId}:`, error.message);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫—É –≤ –ë–î
    await prisma.document.update({
      where: { id: jobData.documentId },
      data: {
        status: 'FAILED',
        processingCompletedAt: new Date(),
        processingProgress: 0,
        processingMessage: `–û—à–∏–±–∫–∞: ${error.message}`,
        errorDetails: {
          error: error.message,
          errorStack: error.stack,
          timestamp: new Date().toISOString()
        },
        errorType: 'OCR_ERROR'
      }
    }).catch(err => {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—à–∏–±–∫—É –≤ –ë–î:', err);
    });

    throw error; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è retry –≤ pg-boss
  }
}

/**
 * –ó–∞–ø—É—Å–∫ worker
 */
async function main() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ OCR Worker...');
  console.log(`üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${process.cwd()}`);
  console.log(`üîó –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${process.env.DATABASE_URL ? '–ø–æ–¥–∫–ª—é—á–µ–Ω–∞' : '–ù–ï –ù–ê–°–¢–†–û–ï–ù–ê!'}`);

  try {
    // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ pg-boss
    const boss = await createPgBoss();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ pg-boss —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

    // pg-boss v11: –°–æ–∑–¥–∞–µ–º –æ—á–µ—Ä–µ–¥—å —è–≤–Ω–æ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
    await boss.createQueue(QUEUE_NAMES.OCR);
    console.log(`‚úÖ –û—á–µ—Ä–µ–¥—å ${QUEUE_NAMES.OCR} —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—á–µ—Ä–µ–¥–∏ (v11 –∏—Å–ø–æ–ª—å–∑—É–µ—Ç getQueueStats –≤–º–µ—Å—Ç–æ getQueueSize)
    try {
      const stats = await boss.getQueueStats(QUEUE_NAMES.OCR);
      console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–µ—Ä–µ–¥–∏ ${QUEUE_NAMES.OCR}:`, stats);
    } catch (statsError) {
      console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—á–µ—Ä–µ–¥–∏ (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ)`);
    }

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–¥–∞—á OCR (v11 API)
    const batchSize = parseInt(process.env.OCR_WORKER_BATCH_SIZE || '5');
    const pollingIntervalSeconds = parseInt(process.env.OCR_POLLING_INTERVAL || '2');

    console.log(`‚öôÔ∏è  –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞–º–∏: –¥–æ ${batchSize} –∑–∞–¥–∞—á –∑–∞ —Ä–∞–∑`);
    console.log(`‚è±Ô∏è  –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø—Ä–æ—Å–∞: ${pollingIntervalSeconds} —Å–µ–∫—É–Ω–¥`);

    // v11: batchSize –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á –∑–∞–±–∏—Ä–∞–µ—Ç—Å—è –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–∞–µ—Ç –ú–ê–°–°–ò–í –∑–∞–¥–∞—á
    await boss.work(QUEUE_NAMES.OCR, {
      batchSize: batchSize,
      pollingIntervalSeconds: pollingIntervalSeconds
    }, async (jobs: any[]) => {
      console.log(`üéØ –ü–æ–ª—É—á–µ–Ω–æ ${jobs.length} –∑–∞–¥–∞—á –∏–∑ –æ—á–µ—Ä–µ–¥–∏`);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∑–∞–¥–∞—á—É –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
      for (const job of jobs) {
        console.log(`üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ ${job.id}:`, JSON.stringify(job.data, null, 2));
        await processOcrJob(job);
      }
    });

    console.log(`‚úÖ OCR Worker –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å: ${QUEUE_NAMES.OCR}`);
    console.log(`‚öôÔ∏è  –ë–∞—Ç—á: ${batchSize} –∑–∞–¥–∞—á, –æ–ø—Ä–æ—Å –∫–∞–∂–¥—ã–µ ${pollingIntervalSeconds}—Å`);
    console.log('');
    console.log('–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á...');

    // Graceful shutdown
    const shutdown = async (signal: string) => {
      console.log(`\n‚ö†Ô∏è  –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª ${signal}, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...`);
      try {
        await boss.stop();
        console.log('‚úÖ Worker –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        process.exit(0);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ:', error);
        process.exit(1);
      }
    };

    process.on('SIGTERM', () => shutdown('SIGTERM'));
    process.on('SIGINT', () => shutdown('SIGINT'));

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ worker:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫
main().catch((error) => {
  console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});
