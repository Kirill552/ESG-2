/**
 * Cron Job –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–¥–ª–∞–π–Ω–æ–≤ –æ—Ç—á—ë—Ç–æ–≤
 * –ó–∞–¥–∞—á–∞ 7.12: Cron job –¥–ª—è –¥–µ–¥–ª–∞–π–Ω–æ–≤
 *
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è 1 —Ä–∞–∑ –≤ –¥–µ–Ω—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ 9:00 MSK) –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç—á—ë—Ç—ã —Å –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏–º–∏—Å—è –¥–µ–¥–ª–∞–π–Ω–∞–º–∏.
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∑–∞ 30, 7 –∏ 1 –¥–µ–Ω—å –¥–æ –∫—Ä–∞–π–Ω–µ–≥–æ —Å—Ä–æ–∫–∞.
 *
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * - –õ–æ–∫–∞–ª—å–Ω–æ: npx tsx backend/scripts/check-deadlines.ts
 * - –ü—Ä–æ–¥–∞–∫—à–Ω: –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å cron job –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É—è Vercel Cron Jobs
 */

import { prisma } from '../lib/prisma';
import { notificationService, NotificationType, NotificationPriority } from '../lib/notification-service';
import { Logger } from '../lib/logger';

const logger = new Logger('check-deadlines-cron');

/**
 * –ü–æ–ª—É—á–∏—Ç—å –¥–∞—Ç—É N –¥–Ω–µ–π –Ω–∞–∑–∞–¥
 */
function getDaysAgo(days: number): Date {
  const date = new Date();
  date.setDate(date.getDate() - days);
  date.setHours(0, 0, 0, 0);
  return date;
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –¥–∞—Ç—É —á–µ—Ä–µ–∑ N –¥–Ω–µ–π
 */
function getDaysFromNow(days: number): Date {
  const date = new Date();
  date.setDate(date.getDate() + days);
  date.setHours(23, 59, 59, 999);
  return date;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
function formatDate(date: Date): string {
  return date.toLocaleDateString('ru-RU', {
    day: 'numeric',
    month: 'long',
    year: 'numeric'
  });
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç—á—ë—Ç—ã —Å –¥–µ–¥–ª–∞–π–Ω–æ–º —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
 */
async function checkDeadlinesForDays(days: number): Promise<number> {
  try {
    const targetDate = getDaysFromNow(days);
    const previousCheck = getDaysAgo(1); // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –≤—á–µ—Ä–∞

    logger.info(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—á—ë—Ç–æ–≤ —Å –¥–µ–¥–ª–∞–π–Ω–æ–º —á–µ—Ä–µ–∑ ${days} –¥–Ω–µ–π`, {
      targetDate: formatDate(targetDate),
      previousCheck: formatDate(previousCheck)
    });

    // –ù–∞—Ö–æ–¥–∏–º –æ—Ç—á—ë—Ç—ã —Å –¥–µ–¥–ª–∞–π–Ω–æ–º –≤ —Ü–µ–ª–µ–≤–æ–π –¥–µ–Ω—å
    // –ò—Å–∫–ª—é—á–∞–µ–º —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ/—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –æ—Ç—á—ë—Ç—ã
    const reports = await prisma.report.findMany({
      where: {
        submissionDeadline: {
          gte: getDaysFromNow(days - 1), // –ù–∞—á–∞–ª–æ —Ü–µ–ª–µ–≤–æ–≥–æ –¥–Ω—è
          lte: targetDate // –ö–æ–Ω–µ—Ü —Ü–µ–ª–µ–≤–æ–≥–æ –¥–Ω—è
        },
        status: {
          in: ['DRAFT', 'READY']
        }
      },
      include: {
        user: {
          select: {
            id: true,
            email: true,
            name: true
          }
        }
      }
    });

    logger.info(`–ù–∞–π–¥–µ–Ω–æ –æ—Ç—á—ë—Ç–æ–≤ —Å –¥–µ–¥–ª–∞–π–Ω–æ–º —á–µ—Ä–µ–∑ ${days} –¥–Ω–µ–π: ${reports.length}`);

    let sentCount = 0;

    for (const report of reports) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –¥–æ–ª–∂–Ω—ã –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–µ–¥–ª–∞–π–Ω–∞—Ö
        const preferences = await prisma.notificationPreferences.findUnique({
          where: { userId: report.userId }
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–∫–ª—é—á–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–µ–¥–ª–∞–π–Ω–∞—Ö
        if (preferences && !preferences.deadlinesEnabled) {
          logger.info(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–µ–¥–ª–∞–π–Ω–∞—Ö –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`, {
            userId: report.userId,
            reportId: report.id
          });
          continue;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ—Ç —Å—Ä–æ–∫ (30/7/1 –¥–µ–Ω—å) –≤–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
        if (preferences && preferences.deadlineDays) {
          const deadlineDaysArray = preferences.deadlineDays as number[];
          if (!deadlineDaysArray.includes(days)) {
            logger.info(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ ${days} –¥–Ω–µ–π –Ω–µ –≤–∫–ª—é—á–µ–Ω–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö`, {
              userId: report.userId,
              reportId: report.id,
              enabledDays: deadlineDaysArray
            });
            continue;
          }
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π
        let notificationType: NotificationType;
        let priority: NotificationPriority;

        if (days === 30) {
          notificationType = NotificationType.DEADLINE_30_DAYS;
          priority = NotificationPriority.LOW;
        } else if (days === 7) {
          notificationType = NotificationType.DEADLINE_7_DAYS;
          priority = NotificationPriority.MEDIUM;
        } else if (days === 1) {
          notificationType = NotificationType.DEADLINE_1_DAY;
          priority = NotificationPriority.URGENT;
        } else {
          // –î–ª—è –¥—Ä—É–≥–∏—Ö —Å—Ä–æ–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π —Ç–∏–ø
          notificationType = NotificationType.DEADLINE_7_DAYS;
          priority = NotificationPriority.MEDIUM;
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        const deadlineFormatted = report.submissionDeadline
          ? formatDate(report.submissionDeadline)
          : '–°–∫–æ—Ä–æ';

        const title = days === 1
          ? `–°—Ä–æ—á–Ω–æ! –ó–∞–≤—Ç—Ä–∞ –¥–µ–¥–ª–∞–π–Ω –æ—Ç—á—ë—Ç–∞ "${report.name}"`
          : `–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞ –æ—Ç—á—ë—Ç–∞ "${report.name}" –æ—Å—Ç–∞–ª–æ—Å—å ${days} ${getDaysWord(days)}`;

        const message = days === 1
          ? `–ó–∞–≤—Ç—Ä–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —Å—Ä–æ–∫ –ø–æ–¥–∞—á–∏ –æ—Ç—á—ë—Ç–∞. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –∏ –æ—Ç—á—ë—Ç –≥–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ!`
          : `–°—Ä–æ–∫ –ø–æ–¥–∞—á–∏ –æ—Ç—á—ë—Ç–∞: ${deadlineFormatted}. –û—Å—Ç–∞–ª–æ—Å—å ${days} ${getDaysWord(days)}. ${report.status === 'DRAFT' ? '–û—Ç—á—ë—Ç –µ—â—ë –≤ —á–µ—Ä–Ω–æ–≤–∏–∫–µ, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –µ–≥–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É.' : '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö.'}`;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await notificationService.sendNotification({
          userId: report.userId,
          type: notificationType,
          title,
          message,
          metadata: {
            reportId: report.id,
            reportName: report.name,
            deadline: deadlineFormatted,
            daysLeft: days,
            reportStatus: report.status,
            link: `/reports/${report.id}`,
            priority
          }
        });

        sentCount++;
        logger.info(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–µ–¥–ª–∞–π–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`, {
          userId: report.userId,
          reportId: report.id,
          reportName: report.name,
          daysLeft: days
        });

      } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–µ–¥–ª–∞–π–Ω–µ',
          error instanceof Error ? error : new Error(String(error)),
          {
            reportId: report.id,
            userId: report.userId
          }
        );
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö –æ—Ç—á—ë—Ç–æ–≤
      }
    }

    logger.info(`–ó–∞–≤–µ—Ä—à–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–¥–ª–∞–π–Ω–æ–≤ —á–µ—Ä–µ–∑ ${days} –¥–Ω–µ–π`, {
      found: reports.length,
      sent: sentCount
    });

    return sentCount;

  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–µ–¥–ª–∞–π–Ω–æ–≤ —á–µ—Ä–µ–∑ ${days} –¥–Ω–µ–π`,
      error instanceof Error ? error : new Error(String(error))
    );
    throw error;
  }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ–æ—Ä–º—É —Å–ª–æ–≤–∞ "–¥–µ–Ω—å"
 */
function getDaysWord(days: number): string {
  if (days === 1) return '–¥–µ–Ω—å';
  if (days >= 2 && days <= 4) return '–¥–Ω—è';
  return '–¥–Ω–µ–π';
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–¥–ª–∞–π–Ω–æ–≤
 */
async function checkDeadlines() {
  const startTime = Date.now();

  logger.info('üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–¥–ª–∞–π–Ω–æ–≤ –æ—Ç—á—ë—Ç–æ–≤', {
    timestamp: new Date().toISOString()
  });

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–¥–ª–∞–π–Ω—ã –∑–∞ 30, 7 –∏ 1 –¥–µ–Ω—å
    const results = await Promise.allSettled([
      checkDeadlinesForDays(30),
      checkDeadlinesForDays(7),
      checkDeadlinesForDays(1)
    ]);

    let totalSent = 0;
    const errors: string[] = [];

    results.forEach((result, index) => {
      const days = [30, 7, 1][index];
      if (result.status === 'fulfilled') {
        totalSent += result.value;
        logger.info(`‚úÖ –î–µ–¥–ª–∞–π–Ω—ã —á–µ—Ä–µ–∑ ${days} –¥–Ω–µ–π: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${result.value} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π`);
      } else {
        const error = `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–µ–¥–ª–∞–π–Ω–æ–≤ —á–µ—Ä–µ–∑ ${days} –¥–Ω–µ–π: ${result.reason}`;
        errors.push(error);
        logger.error(error);
      }
    });

    const executionTime = Date.now() - startTime;

    logger.info('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–¥–ª–∞–π–Ω–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', {
      totalSent,
      errors: errors.length,
      executionTimeMs: executionTime
    });

    if (errors.length > 0) {
      console.error('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–µ–¥–ª–∞–π–Ω–æ–≤:', errors);
    }

  } catch (error) {
    logger.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–µ–¥–ª–∞–π–Ω–æ–≤',
      error instanceof Error ? error : new Error(String(error))
    );
    throw error;
  } finally {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  checkDeadlines()
    .then(() => {
      console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–¥–ª–∞–π–Ω–æ–≤ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–µ–¥–ª–∞–π–Ω–æ–≤:', error);
      process.exit(1);
    });
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, API route –¥–ª—è Vercel Cron)
export { checkDeadlines };