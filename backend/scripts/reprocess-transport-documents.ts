/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
 */

import prisma from '../lib/prisma';
import PgBoss from 'pg-boss';

async function reprocessTransportDocuments() {
  console.log('üîÑ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...\n');

  try {
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ PgBoss
    const boss = new PgBoss({
      connectionString: process.env.DATABASE_URL!
    });

    await boss.start();
    console.log('‚úÖ PgBoss –ø–æ–¥–∫–ª—é—á–µ–Ω\n');

    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
    const transportDocs = await prisma.document.findMany({
      where: {
        status: 'PROCESSED',
        category: 'TRANSPORT'
      },
      select: {
        id: true,
        fileName: true,
        filePath: true,
        userId: true,
        fileType: true,
        createdAt: true
      },
      orderBy: {
        createdAt: 'desc'
      },
      take: 10
    });

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: ${transportDocs.length}\n`);

    if (transportDocs.length === 0) {
      console.log('‚ùå –ù–µ—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–µ—Ä–µ–æ–±—Ä–∞–±–æ—Ç–∫–∏');
      await boss.stop();
      return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
    for (const doc of transportDocs) {
      console.log(`üìÑ –ü–µ—Ä–µ–æ–±—Ä–∞–±–æ—Ç–∫–∞: ${doc.fileName}`);
      console.log(`   ID: ${doc.id}`);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ QUEUED
      await prisma.document.update({
        where: { id: doc.id },
        data: {
          status: 'QUEUED',
          processingStage: 'QUEUED',
          processingMessage: '–ü–µ—Ä–µ–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è transport data',
          retryCount: 0,
          errorDetails: null,
          errorType: null
        }
      });

      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å OCR
      await boss.send('ocr-processing', {
        documentId: doc.id,
        userId: doc.userId,
        filePath: doc.filePath,
        fileType: doc.fileType
      });

      console.log(`   ‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –ø–µ—Ä–µ–æ–±—Ä–∞–±–æ—Ç–∫—É\n`);
    }

    console.log(`\n${'='.repeat(80)}`);
    console.log(`‚úÖ –ü–µ—Ä–µ–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è ${transportDocs.length} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤`);
    console.log(`üîç –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –ª–æ–≥–∞—Ö –≤–æ—Ä–∫–µ—Ä–∞`);
    console.log(`${'='.repeat(80)}\n`);

    await boss.stop();

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

reprocessTransportDocuments();
