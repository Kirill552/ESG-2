/**
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ñ–ª–æ—É:
 * 1. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ test_ttn
 * 2. OCR –æ–±—Ä–∞–±–æ—Ç–∫–∞
 * 3. –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
 * 4. –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—á–µ—Ç–∞
 *
 * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–±–ª–µ–º
 */

import { PrismaClient } from '@prisma/client';
import path from 'path';
import fs from 'fs';
import FormData from 'form-data';

const prisma = new PrismaClient();

// –¶–≤–µ—Ç–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
const colors = {
  reset: '\x1b[0m',
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[36m',
  magenta: '\x1b[35m'
};

function log(stage: string, message: string, data?: any) {
  const timestamp = new Date().toISOString();
  console.log(`${colors.blue}[${timestamp}]${colors.reset} ${colors.magenta}[${stage}]${colors.reset} ${message}`);
  if (data) {
    console.log(`${colors.yellow}Data:${colors.reset}`, JSON.stringify(data, null, 2));
  }
}

function logSuccess(stage: string, message: string) {
  console.log(`${colors.green}‚úì [${stage}] ${message}${colors.reset}`);
}

function logError(stage: string, message: string, error?: any) {
  console.log(`${colors.red}‚úó [${stage}] ${message}${colors.reset}`);
  if (error) {
    console.error(`${colors.red}Error:${colors.reset}`, error);
  }
}

async function testFullFlow() {
  try {
    log('INIT', 'üöÄ –ù–∞—á–∞–ª–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –ø–æ–ª–Ω–æ–≥–æ —Ñ–ª–æ—É');

    // ========== –≠–¢–ê–ü 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ==========
    log('STAGE-1', 'üë§ –ü–æ–∏—Å–∫ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');

    let testUser = await prisma.user.findFirst({
      where: { email: 'test@esg-lite.ru' }
    });

    if (!testUser) {
      testUser = await prisma.user.create({
        data: {
          email: 'test@esg-lite.ru',
          name: '–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
          mode: 'PAID' // –í–∞–∂–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º, –Ω–µ demo
        }
      });
      logSuccess('STAGE-1', `–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${testUser.email}`);
    } else {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∂–∏–º –Ω–∞ PAID
      testUser = await prisma.user.update({
        where: { id: testUser.id },
        data: { mode: 'PAID' }
      });
      logSuccess('STAGE-1', `–ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${testUser.email}`);
    }

    log('STAGE-1', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:', {
      id: testUser.id,
      email: testUser.email,
      mode: testUser.mode
    });

    // ========== –≠–¢–ê–ü 2: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ test_ttn ==========
    log('STAGE-2', 'üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ test_ttn');

    const testTtnPath = path.join(process.cwd(), '..', 'test_ttn');
    log('STAGE-2', `–ü—É—Ç—å –∫ —Ç–µ—Å—Ç–æ–≤—ã–º –¥–æ–∫—É–º–µ–Ω—Ç–∞–º: ${testTtnPath}`);

    if (!fs.existsSync(testTtnPath)) {
      throw new Error(`–ü–∞–ø–∫–∞ test_ttn –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –ø—É—Ç–∏: ${testTtnPath}`);
    }

    const files = fs.readdirSync(testTtnPath).filter(file => {
      const ext = path.extname(file).toLowerCase();
      return ['.pdf', '.xlsx', '.xls', '.csv', '.jpg', '.jpeg', '.png', '.doc', '.docx'].includes(ext);
    });

    log('STAGE-2', `–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏: ${files.length}`, { files });

    if (files.length === 0) {
      throw new Error('–í –ø–∞–ø–∫–µ test_ttn –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    }

    const uploadedDocuments: any[] = [];

    for (const fileName of files) {
      try {
        const filePath = path.join(testTtnPath, fileName);
        const fileContent = fs.readFileSync(filePath);
        const fileSize = fs.statSync(filePath).size;
        const fileType = path.extname(fileName).toLowerCase().substring(1);

        log('STAGE-2', `–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞: ${fileName}`, {
          size: fileSize,
          type: fileType
        });

        // –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ –ë–î
        const document = await prisma.document.create({
          data: {
            fileName: `test_${Date.now()}_${fileName}`,
            originalName: fileName,
            filePath: filePath, // –ü—É—Ç—å –∫ —Ä–µ–∞–ª—å–Ω–æ–º—É —Ñ–∞–π–ª—É
            fileSize,
            fileType: `application/${fileType}`,
            userId: testUser.id,
            status: 'UPLOADED',
            category: 'TRANSPORT' // –¢–¢–ù - —ç—Ç–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
          }
        });

        uploadedDocuments.push(document);
        logSuccess('STAGE-2', `–î–æ–∫—É–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω: ${fileName} (ID: ${document.id})`);

      } catch (error) {
        logError('STAGE-2', `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ ${fileName}`, error);
      }
    }

    log('STAGE-2', `–í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: ${uploadedDocuments.length}`);

    // ========== –≠–¢–ê–ü 3: –°–∏–º—É–ª—è—Ü–∏—è OCR –æ–±—Ä–∞–±–æ—Ç–∫–∏ ==========
    log('STAGE-3', 'üîç –°–∏–º—É–ª—è—Ü–∏—è OCR –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤');

    for (const doc of uploadedDocuments) {
      try {
        log('STAGE-3', `–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞: ${doc.originalName} (ID: ${doc.id})`);

        // –°–∏–º—É–ª–∏—Ä—É–µ–º OCR –æ–±—Ä–∞–±–æ—Ç–∫—É
        const updatedDoc = await prisma.document.update({
          where: { id: doc.id },
          data: {
            status: 'PROCESSED',
            ocrProcessed: true,
            ocrData: {
              fullText: `–¢–µ—Å—Ç–æ–≤—ã–π OCR —Ç–µ–∫—Å—Ç –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ ${doc.originalName}`,
              emissions: Math.random() * 100 + 50, // 50-150 —Ç–æ–Ω–Ω CO2
              transport: {
                vehicle: '–ì—Ä—É–∑–æ–≤–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å',
                distance: Math.random() * 500 + 100,
                fuelType: '–î–∏–∑–µ–ª—å'
              }
            },
            ocrConfidence: 0.95,
            processingCompletedAt: new Date()
          }
        });

        logSuccess('STAGE-3', `–î–æ–∫—É–º–µ–Ω—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω: ${doc.originalName}`);
        log('STAGE-3', '–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', updatedDoc.ocrData);

      } catch (error) {
        logError('STAGE-3', `–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ ${doc.originalName}`, error);
      }
    }

    // ========== –≠–¢–ê–ü 4: –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ ==========
    log('STAGE-4', 'üìä –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ 296-–§–ó');

    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
      const processedDocs = await prisma.document.findMany({
        where: {
          userId: testUser.id,
          status: 'PROCESSED'
        },
        select: {
          id: true,
          ocrData: true
        }
      });

      log('STAGE-4', `–ù–∞–π–¥–µ–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: ${processedDocs.length}`);

      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–µ –≤—ã–±—Ä–æ—Å—ã
      let totalEmissions = 0;
      processedDocs.forEach(doc => {
        if (doc.ocrData && typeof doc.ocrData === 'object') {
          const data = doc.ocrData as any;
          if (data.emissions) {
            totalEmissions += Number(data.emissions) || 0;
          }
        }
      });

      log('STAGE-4', `–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–æ—Å—ã: ${totalEmissions} —Ç–°–û‚ÇÇ-—ç–∫–≤`);

      // –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
      const reportFileName = `test_report_${Date.now()}.pdf`;
      const report = await prisma.report.create({
        data: {
          name: `–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç ${new Date().toISOString().split('T')[0]}`,
          reportType: 'REPORT_296FZ',
          format: 'PDF',
          fileName: reportFileName,
          filePath: `/reports/${reportFileName}`,
          period: '2025',
          status: 'READY',
          userId: testUser.id,
          submissionDeadline: new Date('2026-07-01'),
          totalEmissions,
          documentCount: processedDocs.length,
          emissionData: {
            total: totalEmissions,
            byCategory: {
              transport: totalEmissions
            }
          }
        }
      });

      logSuccess('STAGE-4', `–û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!`);
      log('STAGE-4', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç—á–µ—Ç–µ:', {
        id: report.id,
        name: report.name,
        period: report.period,
        totalEmissions: report.totalEmissions,
        documentCount: report.documentCount,
        status: report.status,
        deadline: report.submissionDeadline
      });

      // ========== –≠–¢–ê–ü 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF ==========
      log('STAGE-5', 'üìÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF –æ—Ç—á–µ—Ç–∞');

      try {
        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á–µ—Ç–æ–≤
        const { generate296FZFullReport } = await import('../lib/enhanced-report-generator');

        const reportData = {
          organizationId: testUser.id,
          organizationName: '–û–û–û "–¢–µ—Å—Ç–æ–≤–∞—è –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è"',
          documentId: report.id,
          reportId: report.id,
          period: report.period,
          methodology: '296-–§–ó –æ—Ç 02.07.2021',
          submissionDeadline: report.submissionDeadline,
          organizationInn: '1234567890',
          organizationAddress: '–ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è',
          emissionData: {
            scope1: totalEmissions * 0.4,
            scope2: totalEmissions * 0.4,
            scope3: totalEmissions * 0.2,
            total: totalEmissions,
            sources: {
              energy: totalEmissions * 0.3,
              transport: totalEmissions * 0.5,
              production: totalEmissions * 0.1,
              waste: totalEmissions * 0.05,
              suppliers: totalEmissions * 0.05
            }
          },
          variables: {
            responsible_person: '–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á',
            phone_number: '+7 (495) 123-45-67',
            email: testUser.email
          }
        };

        log('STAGE-5', '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', reportData);

        const result = await generate296FZFullReport(reportData, {
          writeToDisk: true,
          outputDir: path.join(process.cwd(), 'test-reports')
        });

        if (result.success) {
          logSuccess('STAGE-5', `PDF –æ—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!`);
          log('STAGE-5', '–†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', {
            success: result.success,
            filePath: result.filePath,
            fileName: result.fileName,
            fileSize: result.fileSize
          });
        } else {
          logError('STAGE-5', '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å PDF', result.error);
          if (result.templateErrors && result.templateErrors.length > 0) {
            log('STAGE-5', '–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞:', result.templateErrors);
          }
          if (result.unreplacedTokens && result.unreplacedTokens.length > 0) {
            log('STAGE-5', '–ù–µ–∑–∞–º–µ–Ω–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã:', result.unreplacedTokens);
          }
        }

      } catch (error) {
        logError('STAGE-5', '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF', error);
      }

      // ========== –ò–¢–û–ì–ò ==========
      log('SUMMARY', '‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
      log('SUMMARY', 'üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞:', {
        userId: testUser.id,
        uploadedDocuments: uploadedDocuments.length,
        processedDocuments: processedDocs.length,
        reportId: report.id,
        totalEmissions,
        testPassed: true
      });

    } catch (error) {
      logError('STAGE-4', '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞', error);
      throw error;
    }

  } catch (error) {
    logError('FATAL', '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testFullFlow()
  .then(() => {
    console.log(`\n${colors.green}üéâ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!${colors.reset}\n`);
    process.exit(0);
  })
  .catch((error) => {
    console.error(`\n${colors.red}‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω:${colors.reset}`, error);
    process.exit(1);
  });
