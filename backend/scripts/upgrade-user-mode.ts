/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: npx tsx scripts/upgrade-user-mode.ts whirpy@yandex.ru PAID
 */

import { PrismaClient, UserMode } from '@prisma/client';

const prisma = new PrismaClient();

async function upgradeUserMode(email: string, newMode: UserMode) {
  try {
    console.log(`üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${email} –≤ —Ä–µ–∂–∏–º ${newMode}...`);

    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await prisma.user.findUnique({
      where: { email },
      select: {
        id: true,
        email: true,
        name: true,
        mode: true,
      }
    });

    if (!user) {
      console.error(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${email} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      process.exit(1);
    }

    console.log(`üìã –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: ${user.mode}`);

    if (user.mode === newMode) {
      console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —Ä–µ–∂–∏–º–µ ${newMode}`);
      return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const updatedUser = await prisma.user.update({
      where: { email },
      data: { mode: newMode },
      select: {
        id: true,
        email: true,
        name: true,
        mode: true,
      }
    });

    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –≤ —Ä–µ–∂–∏–º ${newMode}`);
    console.log(`üë§ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`, {
      id: updatedUser.id,
      email: updatedUser.email,
      name: updatedUser.name,
      mode: updatedUser.mode,
    });

    // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    await prisma.auditLog.create({
      data: {
        userId: user.id,
        action: 'USER_MODE_CHANGED',
        resourceType: 'USER',
        resourceId: user.id,
        ipAddress: 'localhost',
        userAgent: 'upgrade-script',
        details: {
          oldMode: user.mode,
          newMode: newMode,
        },
        metadata: {
          script: 'upgrade-user-mode.ts',
          executedAt: new Date().toISOString(),
        }
      }
    });

    console.log(`üìù –î–µ–π—Å—Ç–≤–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –∞—É–¥–∏—Ç-–ª–æ–≥`);

  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–∞:`, error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

// –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const email = process.argv[2];
const mode = process.argv[3] as UserMode;

if (!email || !mode) {
  console.error(`
‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: npx tsx scripts/upgrade-user-mode.ts <email> <mode>

–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã:
- DEMO    - –¥–µ–º–æ-—Ä–µ–∂–∏–º —Å –º–æ–∫–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
- TRIAL   - –ø—Ä–æ–±–Ω—ã–π —Ä–µ–∂–∏–º (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø)
- PAID    - –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø
- EXPIRED - –∏—Å—Ç–µ–∫—à–∏–π –¥–æ—Å—Ç—É–ø

–ü—Ä–∏–º–µ—Ä—ã:
npx tsx scripts/upgrade-user-mode.ts whirpy@yandex.ru PAID
npx tsx scripts/upgrade-user-mode.ts user@example.com TRIAL
npx tsx scripts/upgrade-user-mode.ts demo@test.com DEMO
  `);
  process.exit(1);
}

if (!['DEMO', 'TRIAL', 'PAID', 'EXPIRED'].includes(mode)) {
  console.error(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º: ${mode}`);
  console.error(`–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã: DEMO, TRIAL, PAID, EXPIRED`);
  process.exit(1);
}

upgradeUserMode(email, mode);