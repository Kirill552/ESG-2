import { PrismaClient } from '@prisma/client';
import bcrypt from 'bcryptjs';

const prisma = new PrismaClient();

async function addSuperAdmin() {
  const email = 'whirpy@yandex.ru';

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    const existingAdmin = await prisma.adminUser.findUnique({
      where: { email },
    });

    if (existingAdmin) {
      console.log('‚ö†Ô∏è  –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', existingAdmin.email);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å –Ω–∞ SUPER_ADMIN –µ—Å–ª–∏ –Ω–µ —Ç–∞–∫
      if (existingAdmin.role !== 'SUPER_ADMIN') {
        await prisma.adminUser.update({
          where: { email },
          data: {
            role: 'SUPER_ADMIN',
            isActive: true,
          },
        });
        console.log('‚úÖ –†–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ SUPER_ADMIN');
      } else {
        console.log('‚úÖ –£–∂–µ —è–≤–ª—è–µ—Ç—Å—è SUPER_ADMIN');
      }
    } else {
      // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å (–º–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å —á–µ—Ä–µ–∑ reset)
      const tempPassword = Math.random().toString(36).slice(-12);
      const passwordHash = await bcrypt.hash(tempPassword, 10);

      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      const admin = await prisma.adminUser.create({
        data: {
          email,
          passwordHash,
          role: 'SUPER_ADMIN',
          isActive: true,
        },
      });

      console.log('‚úÖ –°–æ–∑–¥–∞–Ω SUPER_ADMIN:', admin.email);
      console.log('‚ö†Ô∏è  –í—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å:', tempPassword);
      console.log('   (–ò–∑–º–µ–Ω–∏—Ç–µ –µ–≥–æ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞!)');
    }

    console.log('\nüéâ –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ª–æ–≥–∏–Ω–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ Passkey —Å email:', email);
    console.log('   URL: /admin/login');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

addSuperAdmin();
