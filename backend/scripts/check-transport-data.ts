/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ
 */

import prisma from '../lib/prisma';

async function checkTransportDocuments() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...\n');

  try {
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
    const documents = await prisma.document.findMany({
      where: {
        status: 'PROCESSED'
      },
      select: {
        id: true,
        fileName: true,
        ocrData: true,
        category: true,
        createdAt: true
      },
      orderBy: {
        createdAt: 'desc'
      },
      take: 5
    });

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: ${documents.length}\n`);

    for (const doc of documents) {
      console.log(`\n${'='.repeat(80)}`);
      console.log(`üìÑ –î–æ–∫—É–º–µ–Ω—Ç: ${doc.fileName}`);
      console.log(`üÜî ID: ${doc.id}`);
      console.log(`üìÖ –î–∞—Ç–∞: ${doc.createdAt.toLocaleString('ru-RU')}`);
      console.log(`${'='.repeat(80)}\n`);

      if (doc.ocrData && typeof doc.ocrData === 'object') {
        const data = doc.ocrData as any;

        console.log('üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ ocrData:');
        console.log(JSON.stringify(Object.keys(data), null, 2));
        console.log('');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if (data.extractedData) {
          console.log('‚úÖ extractedData –Ω–∞–π–¥–µ–Ω');
          console.log('–ö–ª—é—á–∏ extractedData:', Object.keys(data.extractedData));

          if (data.extractedData.transport) {
            console.log('\nüöó –¢–†–ê–ù–°–ü–û–†–¢–ù–´–ï –î–ê–ù–ù–´–ï –ù–ê–ô–î–ï–ù–´:');
            console.log(JSON.stringify(data.extractedData.transport, null, 2));
          } else {
            console.log('\n‚ùå extractedData.transport –ù–ï –ù–ê–ô–î–ï–ù');
          }
        } else {
          console.log('‚ùå extractedData –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ ocrData');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª—è —Å –≤—ã–±—Ä–æ—Å–∞–º–∏
        if (data.emissions) {
          console.log(`\nüí® emissions: ${data.emissions}`);
        }
        if (data.co2) {
          console.log(`üí® co2: ${data.co2}`);
        }
        if (data.carbon) {
          console.log(`üí® carbon: ${data.carbon}`);
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        if (data.category) {
          console.log(`\nüè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${data.category}`);
        }
      } else {
        console.log('‚ùå ocrData –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º');
      }
    }

    console.log(`\n\n${'='.repeat(80)}`);
    console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    console.log(`${'='.repeat(80)}\n`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkTransportDocuments();
